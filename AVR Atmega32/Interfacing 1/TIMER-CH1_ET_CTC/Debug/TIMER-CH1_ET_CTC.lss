
TIMER-CH1_ET_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  0000025c  2**0
                  ALLOC
  3 .stab         00000438  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000071c  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8a:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
unsigned char num = 0;
unsigned char compValue = 250;
unsigned char nCompPerSec= 250;
unsigned int numbers[10] = {0x7e,0x0c,0xb6,0x9e,0xcc,0xda,0xfa,0x0e,0xfe,0xde};
/*ISR function*/
ISR(TIMER0_COMP_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	tickG++;
  b2:	80 91 76 00 	lds	r24, 0x0076
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 76 00 	sts	0x0076, r24
	if(tickG == nCompPerSec){
  bc:	90 91 76 00 	lds	r25, 0x0076
  c0:	80 91 61 00 	lds	r24, 0x0061
  c4:	98 17       	cp	r25, r24
  c6:	19 f5       	brne	.+70     	; 0x10e <__vector_10+0x7c>
		tickG = 0;
  c8:	10 92 76 00 	sts	0x0076, r1
		if(num == 9){
  cc:	80 91 77 00 	lds	r24, 0x0077
  d0:	89 30       	cpi	r24, 0x09	; 9
  d2:	19 f4       	brne	.+6      	; 0xda <__vector_10+0x48>
			num = 0;
  d4:	10 92 77 00 	sts	0x0077, r1
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <__vector_10+0x52>
		}
		else{
			num++;
  da:	80 91 77 00 	lds	r24, 0x0077
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 77 00 	sts	0x0077, r24
		}
		PORTA = (PORTA & 0x01) | (numbers[num] & 0xfe);
  e4:	ab e3       	ldi	r26, 0x3B	; 59
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	28 2f       	mov	r18, r24
  f0:	21 70       	andi	r18, 0x01	; 1
  f2:	80 91 77 00 	lds	r24, 0x0077
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	fc 01       	movw	r30, r24
 100:	ee 59       	subi	r30, 0x9E	; 158
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	82 2b       	or	r24, r18
 10c:	8c 93       	st	X, r24
	}
}
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <timer0compMode>:
/*timer 0 init*/
void timer0compMode(void){
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02);
 132:	e3 e5       	ldi	r30, 0x53	; 83
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8c e8       	ldi	r24, 0x8C	; 140
 138:	80 83       	st	Z, r24
	TCNT0 = 0;
 13a:	e2 e5       	ldi	r30, 0x52	; 82
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
	OCR0 = compValue;
 140:	ec e5       	ldi	r30, 0x5C	; 92
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0);
 14a:	a9 e5       	ldi	r26, 0x59	; 89
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e9 e5       	ldi	r30, 0x59	; 89
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	8c 93       	st	X, r24
	SREG |= (1<<7);
 158:	af e5       	ldi	r26, 0x5F	; 95
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	ef e5       	ldi	r30, 0x5F	; 95
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8c 93       	st	X, r24
}
 166:	cf 91       	pop	r28
 168:	df 91       	pop	r29
 16a:	08 95       	ret

0000016c <main>:
/*main function*/
int main(void){
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	/*application initialization*/
	/*set port a as output*/
	DDRA = 0xfe;
 174:	ea e3       	ldi	r30, 0x3A	; 58
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	8e ef       	ldi	r24, 0xFE	; 254
 17a:	80 83       	st	Z, r24
	/*set port a to start with zero*/
	//PORTA = 0x7e;
	PORTA = (PORTA & 0x01) | (0x7e & 0xfe);/*save pin A0 from any undesired change*/
 17c:	ab e3       	ldi	r26, 0x3B	; 59
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	eb e3       	ldi	r30, 0x3B	; 59
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 70       	andi	r24, 0x01	; 1
 188:	8e 67       	ori	r24, 0x7E	; 126
 18a:	8c 93       	st	X, r24
	/*enable 7 segment*/
	DDRC |=(1<<PC6);
 18c:	a4 e3       	ldi	r26, 0x34	; 52
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e4 e3       	ldi	r30, 0x34	; 52
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 64       	ori	r24, 0x40	; 64
 198:	8c 93       	st	X, r24
	PORTC |= (1<<PC6);
 19a:	a5 e3       	ldi	r26, 0x35	; 53
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e5 e3       	ldi	r30, 0x35	; 53
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	8c 93       	st	X, r24
	timer0compMode();
 1a8:	0e 94 95 00 	call	0x12a	; 0x12a <timer0compMode>
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x40>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
