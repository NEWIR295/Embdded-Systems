
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003c6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000570  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb6  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */

#include <avr/io.h>
#include <util/delay.h>

int main(void) {
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2e 97       	sbiw	r28, 0x0e	; 14
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61

    DDRB |= (1 << PB0); // Set PB0 as output
  80:	87 e3       	ldi	r24, 0x37	; 55
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	27 e3       	ldi	r18, 0x37	; 55
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	f9 01       	movw	r30, r18
  8a:	20 81       	ld	r18, Z
  8c:	21 60       	ori	r18, 0x01	; 1
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
    //DDRB &=~(1<<PB1); // set pb1 as input
    while (1) {
        PORTB ^= (1 << PB0); // Toggle PB0
  92:	88 e3       	ldi	r24, 0x38	; 56
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	28 e3       	ldi	r18, 0x38	; 56
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	f9 01       	movw	r30, r18
  9c:	30 81       	ld	r19, Z
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	23 27       	eor	r18, r19
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	aa ef       	ldi	r26, 0xFA	; 250
  ac:	b3 e4       	ldi	r27, 0x43	; 67
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	ab 83       	std	Y+3, r26	; 0x03
  b4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	4a ef       	ldi	r20, 0xFA	; 250
  bc:	54 e4       	ldi	r21, 0x44	; 68
  be:	69 81       	ldd	r22, Y+1	; 0x01
  c0:	7a 81       	ldd	r23, Y+2	; 0x02
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
  ca:	dc 01       	movw	r26, r24
  cc:	cb 01       	movw	r24, r22
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	9e 83       	std	Y+6, r25	; 0x06
  d2:	af 83       	std	Y+7, r26	; 0x07
  d4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	5f e3       	ldi	r21, 0x3F	; 63
  de:	6d 81       	ldd	r22, Y+5	; 0x05
  e0:	7e 81       	ldd	r23, Y+6	; 0x06
  e2:	8f 81       	ldd	r24, Y+7	; 0x07
  e4:	98 85       	ldd	r25, Y+8	; 0x08
  e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	2c f4       	brge	.+10     	; 0xf8 <main+0x8c>
		__ticks = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 87       	std	Y+10, r25	; 0x0a
  f4:	89 87       	std	Y+9, r24	; 0x09
  f6:	3f c0       	rjmp	.+126    	; 0x176 <main+0x10a>
	else if (__tmp > 65535)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	4f e7       	ldi	r20, 0x7F	; 127
  fe:	57 e4       	ldi	r21, 0x47	; 71
 100:	6d 81       	ldd	r22, Y+5	; 0x05
 102:	7e 81       	ldd	r23, Y+6	; 0x06
 104:	8f 81       	ldd	r24, Y+7	; 0x07
 106:	98 85       	ldd	r25, Y+8	; 0x08
 108:	0e 94 47 01 	call	0x28e	; 0x28e <__gesf2>
 10c:	18 16       	cp	r1, r24
 10e:	4c f5       	brge	.+82     	; 0x162 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e2       	ldi	r20, 0x20	; 32
 116:	51 e4       	ldi	r21, 0x41	; 65
 118:	69 81       	ldd	r22, Y+1	; 0x01
 11a:	7a 81       	ldd	r23, Y+2	; 0x02
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	bc 01       	movw	r22, r24
 12a:	cd 01       	movw	r24, r26
 12c:	0e 94 cb 00 	call	0x196	; 0x196 <__fixunssfsi>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	9a 87       	std	Y+10, r25	; 0x0a
 136:	89 87       	std	Y+9, r24	; 0x09
 138:	0f c0       	rjmp	.+30     	; 0x158 <main+0xec>
 13a:	88 ec       	ldi	r24, 0xC8	; 200
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9c 87       	std	Y+12, r25	; 0x0c
 140:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 142:	8b 85       	ldd	r24, Y+11	; 0x0b
 144:	9c 85       	ldd	r25, Y+12	; 0x0c
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xda>
 14a:	9c 87       	std	Y+12, r25	; 0x0c
 14c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	89 85       	ldd	r24, Y+9	; 0x09
 150:	9a 85       	ldd	r25, Y+10	; 0x0a
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	9a 87       	std	Y+10, r25	; 0x0a
 156:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	89 85       	ldd	r24, Y+9	; 0x09
 15a:	9a 85       	ldd	r25, Y+10	; 0x0a
 15c:	89 2b       	or	r24, r25
 15e:	69 f7       	brne	.-38     	; 0x13a <main+0xce>
 160:	14 c0       	rjmp	.+40     	; 0x18a <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 162:	6d 81       	ldd	r22, Y+5	; 0x05
 164:	7e 81       	ldd	r23, Y+6	; 0x06
 166:	8f 81       	ldd	r24, Y+7	; 0x07
 168:	98 85       	ldd	r25, Y+8	; 0x08
 16a:	0e 94 cb 00 	call	0x196	; 0x196 <__fixunssfsi>
 16e:	dc 01       	movw	r26, r24
 170:	cb 01       	movw	r24, r22
 172:	9a 87       	std	Y+10, r25	; 0x0a
 174:	89 87       	std	Y+9, r24	; 0x09
 176:	89 85       	ldd	r24, Y+9	; 0x09
 178:	9a 85       	ldd	r25, Y+10	; 0x0a
 17a:	9e 87       	std	Y+14, r25	; 0x0e
 17c:	8d 87       	std	Y+13, r24	; 0x0d
 17e:	8d 85       	ldd	r24, Y+13	; 0x0d
 180:	9e 85       	ldd	r25, Y+14	; 0x0e
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x116>
 186:	9e 87       	std	Y+14, r25	; 0x0e
 188:	8d 87       	std	Y+13, r24	; 0x0d
        _delay_ms(500); // Delay for 500ms
    }
 18a:	83 cf       	rjmp	.-250    	; 0x92 <main+0x26>

0000018c <__cmpsf2>:
 18c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__fp_cmp>
 190:	08 f4       	brcc	.+2      	; 0x194 <__cmpsf2+0x8>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret

00000196 <__fixunssfsi>:
 196:	0e 94 26 01 	call	0x24c	; 0x24c <__fp_splitA>
 19a:	88 f0       	brcs	.+34     	; 0x1be <__fixunssfsi+0x28>
 19c:	9f 57       	subi	r25, 0x7F	; 127
 19e:	98 f0       	brcs	.+38     	; 0x1c6 <__fixunssfsi+0x30>
 1a0:	b9 2f       	mov	r27, r25
 1a2:	99 27       	eor	r25, r25
 1a4:	b7 51       	subi	r27, 0x17	; 23
 1a6:	b0 f0       	brcs	.+44     	; 0x1d4 <__fixunssfsi+0x3e>
 1a8:	e1 f0       	breq	.+56     	; 0x1e2 <__fixunssfsi+0x4c>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	88 1f       	adc	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	1a f0       	brmi	.+6      	; 0x1ba <__fixunssfsi+0x24>
 1b4:	ba 95       	dec	r27
 1b6:	c9 f7       	brne	.-14     	; 0x1aa <__fixunssfsi+0x14>
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <__fixunssfsi+0x4c>
 1ba:	b1 30       	cpi	r27, 0x01	; 1
 1bc:	91 f0       	breq	.+36     	; 0x1e2 <__fixunssfsi+0x4c>
 1be:	0e 94 40 01 	call	0x280	; 0x280 <__fp_zero>
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	0c 94 40 01 	jmp	0x280	; 0x280 <__fp_zero>
 1ca:	67 2f       	mov	r22, r23
 1cc:	78 2f       	mov	r23, r24
 1ce:	88 27       	eor	r24, r24
 1d0:	b8 5f       	subi	r27, 0xF8	; 248
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <__fixunssfsi+0x4c>
 1d4:	b9 3f       	cpi	r27, 0xF9	; 249
 1d6:	cc f3       	brlt	.-14     	; 0x1ca <__fixunssfsi+0x34>
 1d8:	86 95       	lsr	r24
 1da:	77 95       	ror	r23
 1dc:	67 95       	ror	r22
 1de:	b3 95       	inc	r27
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__fixunssfsi+0x42>
 1e2:	3e f4       	brtc	.+14     	; 0x1f2 <__fixunssfsi+0x5c>
 1e4:	90 95       	com	r25
 1e6:	80 95       	com	r24
 1e8:	70 95       	com	r23
 1ea:	61 95       	neg	r22
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	08 95       	ret

000001f4 <__fp_cmp>:
 1f4:	99 0f       	add	r25, r25
 1f6:	00 08       	sbc	r0, r0
 1f8:	55 0f       	add	r21, r21
 1fa:	aa 0b       	sbc	r26, r26
 1fc:	e0 e8       	ldi	r30, 0x80	; 128
 1fe:	fe ef       	ldi	r31, 0xFE	; 254
 200:	16 16       	cp	r1, r22
 202:	17 06       	cpc	r1, r23
 204:	e8 07       	cpc	r30, r24
 206:	f9 07       	cpc	r31, r25
 208:	c0 f0       	brcs	.+48     	; 0x23a <__fp_cmp+0x46>
 20a:	12 16       	cp	r1, r18
 20c:	13 06       	cpc	r1, r19
 20e:	e4 07       	cpc	r30, r20
 210:	f5 07       	cpc	r31, r21
 212:	98 f0       	brcs	.+38     	; 0x23a <__fp_cmp+0x46>
 214:	62 1b       	sub	r22, r18
 216:	73 0b       	sbc	r23, r19
 218:	84 0b       	sbc	r24, r20
 21a:	95 0b       	sbc	r25, r21
 21c:	39 f4       	brne	.+14     	; 0x22c <__fp_cmp+0x38>
 21e:	0a 26       	eor	r0, r26
 220:	61 f0       	breq	.+24     	; 0x23a <__fp_cmp+0x46>
 222:	23 2b       	or	r18, r19
 224:	24 2b       	or	r18, r20
 226:	25 2b       	or	r18, r21
 228:	21 f4       	brne	.+8      	; 0x232 <__fp_cmp+0x3e>
 22a:	08 95       	ret
 22c:	0a 26       	eor	r0, r26
 22e:	09 f4       	brne	.+2      	; 0x232 <__fp_cmp+0x3e>
 230:	a1 40       	sbci	r26, 0x01	; 1
 232:	a6 95       	lsr	r26
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	81 1d       	adc	r24, r1
 238:	81 1d       	adc	r24, r1
 23a:	08 95       	ret

0000023c <__fp_split3>:
 23c:	57 fd       	sbrc	r21, 7
 23e:	90 58       	subi	r25, 0x80	; 128
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	59 f0       	breq	.+22     	; 0x25c <__fp_splitA+0x10>
 246:	5f 3f       	cpi	r21, 0xFF	; 255
 248:	71 f0       	breq	.+28     	; 0x266 <__fp_splitA+0x1a>
 24a:	47 95       	ror	r20

0000024c <__fp_splitA>:
 24c:	88 0f       	add	r24, r24
 24e:	97 fb       	bst	r25, 7
 250:	99 1f       	adc	r25, r25
 252:	61 f0       	breq	.+24     	; 0x26c <__fp_splitA+0x20>
 254:	9f 3f       	cpi	r25, 0xFF	; 255
 256:	79 f0       	breq	.+30     	; 0x276 <__fp_splitA+0x2a>
 258:	87 95       	ror	r24
 25a:	08 95       	ret
 25c:	12 16       	cp	r1, r18
 25e:	13 06       	cpc	r1, r19
 260:	14 06       	cpc	r1, r20
 262:	55 1f       	adc	r21, r21
 264:	f2 cf       	rjmp	.-28     	; 0x24a <__fp_split3+0xe>
 266:	46 95       	lsr	r20
 268:	f1 df       	rcall	.-30     	; 0x24c <__fp_splitA>
 26a:	08 c0       	rjmp	.+16     	; 0x27c <__fp_splitA+0x30>
 26c:	16 16       	cp	r1, r22
 26e:	17 06       	cpc	r1, r23
 270:	18 06       	cpc	r1, r24
 272:	99 1f       	adc	r25, r25
 274:	f1 cf       	rjmp	.-30     	; 0x258 <__fp_splitA+0xc>
 276:	86 95       	lsr	r24
 278:	71 05       	cpc	r23, r1
 27a:	61 05       	cpc	r22, r1
 27c:	08 94       	sec
 27e:	08 95       	ret

00000280 <__fp_zero>:
 280:	e8 94       	clt

00000282 <__fp_szero>:
 282:	bb 27       	eor	r27, r27
 284:	66 27       	eor	r22, r22
 286:	77 27       	eor	r23, r23
 288:	cb 01       	movw	r24, r22
 28a:	97 f9       	bld	r25, 7
 28c:	08 95       	ret

0000028e <__gesf2>:
 28e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__fp_cmp>
 292:	08 f4       	brcc	.+2      	; 0x296 <__gesf2+0x8>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	08 95       	ret

00000298 <__mulsf3>:
 298:	0e 94 5f 01 	call	0x2be	; 0x2be <__mulsf3x>
 29c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_round>
 2a0:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscA>
 2a4:	38 f0       	brcs	.+14     	; 0x2b4 <__mulsf3+0x1c>
 2a6:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_pscB>
 2aa:	20 f0       	brcs	.+8      	; 0x2b4 <__mulsf3+0x1c>
 2ac:	95 23       	and	r25, r21
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <__mulsf3+0x1c>
 2b0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 2b4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_nan>
 2b8:	11 24       	eor	r1, r1
 2ba:	0c 94 41 01 	jmp	0x282	; 0x282 <__fp_szero>

000002be <__mulsf3x>:
 2be:	0e 94 1e 01 	call	0x23c	; 0x23c <__fp_split3>
 2c2:	70 f3       	brcs	.-36     	; 0x2a0 <__mulsf3+0x8>

000002c4 <__mulsf3_pse>:
 2c4:	95 9f       	mul	r25, r21
 2c6:	c1 f3       	breq	.-16     	; 0x2b8 <__mulsf3+0x20>
 2c8:	95 0f       	add	r25, r21
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	55 1f       	adc	r21, r21
 2ce:	62 9f       	mul	r22, r18
 2d0:	f0 01       	movw	r30, r0
 2d2:	72 9f       	mul	r23, r18
 2d4:	bb 27       	eor	r27, r27
 2d6:	f0 0d       	add	r31, r0
 2d8:	b1 1d       	adc	r27, r1
 2da:	63 9f       	mul	r22, r19
 2dc:	aa 27       	eor	r26, r26
 2de:	f0 0d       	add	r31, r0
 2e0:	b1 1d       	adc	r27, r1
 2e2:	aa 1f       	adc	r26, r26
 2e4:	64 9f       	mul	r22, r20
 2e6:	66 27       	eor	r22, r22
 2e8:	b0 0d       	add	r27, r0
 2ea:	a1 1d       	adc	r26, r1
 2ec:	66 1f       	adc	r22, r22
 2ee:	82 9f       	mul	r24, r18
 2f0:	22 27       	eor	r18, r18
 2f2:	b0 0d       	add	r27, r0
 2f4:	a1 1d       	adc	r26, r1
 2f6:	62 1f       	adc	r22, r18
 2f8:	73 9f       	mul	r23, r19
 2fa:	b0 0d       	add	r27, r0
 2fc:	a1 1d       	adc	r26, r1
 2fe:	62 1f       	adc	r22, r18
 300:	83 9f       	mul	r24, r19
 302:	a0 0d       	add	r26, r0
 304:	61 1d       	adc	r22, r1
 306:	22 1f       	adc	r18, r18
 308:	74 9f       	mul	r23, r20
 30a:	33 27       	eor	r19, r19
 30c:	a0 0d       	add	r26, r0
 30e:	61 1d       	adc	r22, r1
 310:	23 1f       	adc	r18, r19
 312:	84 9f       	mul	r24, r20
 314:	60 0d       	add	r22, r0
 316:	21 1d       	adc	r18, r1
 318:	82 2f       	mov	r24, r18
 31a:	76 2f       	mov	r23, r22
 31c:	6a 2f       	mov	r22, r26
 31e:	11 24       	eor	r1, r1
 320:	9f 57       	subi	r25, 0x7F	; 127
 322:	50 40       	sbci	r21, 0x00	; 0
 324:	9a f0       	brmi	.+38     	; 0x34c <__mulsf3_pse+0x88>
 326:	f1 f0       	breq	.+60     	; 0x364 <__mulsf3_pse+0xa0>
 328:	88 23       	and	r24, r24
 32a:	4a f0       	brmi	.+18     	; 0x33e <__mulsf3_pse+0x7a>
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	bb 1f       	adc	r27, r27
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	50 40       	sbci	r21, 0x00	; 0
 33c:	a9 f7       	brne	.-22     	; 0x328 <__mulsf3_pse+0x64>
 33e:	9e 3f       	cpi	r25, 0xFE	; 254
 340:	51 05       	cpc	r21, r1
 342:	80 f0       	brcs	.+32     	; 0x364 <__mulsf3_pse+0xa0>
 344:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 348:	0c 94 41 01 	jmp	0x282	; 0x282 <__fp_szero>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	e4 f3       	brlt	.-8      	; 0x348 <__mulsf3_pse+0x84>
 350:	98 3e       	cpi	r25, 0xE8	; 232
 352:	d4 f3       	brlt	.-12     	; 0x348 <__mulsf3_pse+0x84>
 354:	86 95       	lsr	r24
 356:	77 95       	ror	r23
 358:	67 95       	ror	r22
 35a:	b7 95       	ror	r27
 35c:	f7 95       	ror	r31
 35e:	e7 95       	ror	r30
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	c1 f7       	brne	.-16     	; 0x354 <__mulsf3_pse+0x90>
 364:	fe 2b       	or	r31, r30
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__fp_inf>:
 372:	97 f9       	bld	r25, 7
 374:	9f 67       	ori	r25, 0x7F	; 127
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	08 95       	ret

0000037e <__fp_nan>:
 37e:	9f ef       	ldi	r25, 0xFF	; 255
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	08 95       	ret

00000384 <__fp_pscA>:
 384:	00 24       	eor	r0, r0
 386:	0a 94       	dec	r0
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	18 06       	cpc	r1, r24
 38e:	09 06       	cpc	r0, r25
 390:	08 95       	ret

00000392 <__fp_pscB>:
 392:	00 24       	eor	r0, r0
 394:	0a 94       	dec	r0
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	14 06       	cpc	r1, r20
 39c:	05 06       	cpc	r0, r21
 39e:	08 95       	ret

000003a0 <__fp_round>:
 3a0:	09 2e       	mov	r0, r25
 3a2:	03 94       	inc	r0
 3a4:	00 0c       	add	r0, r0
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__fp_round+0xc>
 3a8:	88 23       	and	r24, r24
 3aa:	52 f0       	brmi	.+20     	; 0x3c0 <__fp_round+0x20>
 3ac:	bb 0f       	add	r27, r27
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <__fp_round+0x20>
 3b0:	bf 2b       	or	r27, r31
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__fp_round+0x18>
 3b4:	60 ff       	sbrs	r22, 0
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__fp_round+0x20>
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
