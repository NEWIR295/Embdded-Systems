
Car_Parking_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003422  000034b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080018a  0080018a  000035e0  2**0
                  ALLOC
  3 .stab         00002d30  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014aa  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000077ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000795a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c96a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 18 	call	0x30a8	; 0x30a8 <main>
      8a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 19 	jmp	0x335e	; 0x335e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 19 	jmp	0x335e	; 0x335e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e8       	ldi	r22, 0x81	; 129
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 57       	subi	r30, 0x77	; 119
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 8a 01 	lds	r24, 0x018A
     e5c:	90 91 8b 01 	lds	r25, 0x018B
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 8a 01 	lds	r30, 0x018A
     e68:	f0 91 8b 01 	lds	r31, 0x018B
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	98 2f       	mov	r25, r24
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	80 81       	ld	r24, Z
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	2f 7b       	andi	r18, 0xBF	; 191
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	00 24       	eor	r0, r0
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	07 94       	ror	r0
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	07 94       	ror	r0
     ef6:	98 2f       	mov	r25, r24
     ef8:	80 2d       	mov	r24, r0
     efa:	82 2b       	or	r24, r18
     efc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <ICU_setCallBack+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	90 93 8b 01 	sts	0x018B, r25
     f3c:	80 93 8a 01 	sts	0x018A, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	2f 7b       	andi	r18, 0xBF	; 191
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 24       	eor	r0, r0
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	07 94       	ror	r0
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	07 94       	ror	r0
     f78:	98 2f       	mov	r25, r24
     f7a:	80 2d       	mov	r24, r0
     f7c:	82 2b       	or	r24, r18
     f7e:	8c 93       	st	X, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	11 82       	std	Z+1, r1	; 0x01
     fac:	10 82       	st	Z, r1
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	10 82       	st	Z, r1
	TCCR1B = 0;
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc8:	ec e4       	ldi	r30, 0x4C	; 76
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	11 82       	std	Z+1, r1	; 0x01
     fce:	10 82       	st	Z, r1
	ICR1 = 0;
     fd0:	e6 e4       	ldi	r30, 0x46	; 70
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     fe6:	10 92 8b 01 	sts	0x018B, r1
     fea:	10 92 8a 01 	sts	0x018A, r1
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPinDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f0       	brcs	.+2      	; 0x1018 <GPIO_setupPinDirection+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_setupPinDirection+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <GPIO_setupPinDirection+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <GPIO_setupPinDirection+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <GPIO_setupPinDirection+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <GPIO_setupPinDirection+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <GPIO_setupPinDirection+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <GPIO_setupPinDirection+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x88>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	98 c0       	rjmp	.+304    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0xb4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0xb0>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0xe0>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x10c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x108>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x138>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x164>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x160>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x190>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x1bc>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x1b8>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_writePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
    11dc:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x1c>
    11e4:	d5 c0       	rjmp	.+426    	; 0x1390 <GPIO_writePin+0x1c6>
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <GPIO_writePin+0x24>
    11ec:	d1 c0       	rjmp	.+418    	; 0x1390 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_writePin+0x3a>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <GPIO_writePin+0xc0>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_writePin+0x4e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <GPIO_writePin+0x68>
    1216:	bc c0       	rjmp	.+376    	; 0x1390 <GPIO_writePin+0x1c6>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_writePin+0x5a>
    1222:	5f c0       	rjmp	.+190    	; 0x12e2 <GPIO_writePin+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x66>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <GPIO_writePin+0x170>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x8c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x88>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0xb0>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0xe0>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	6c c0       	rjmp	.+216    	; 0x1390 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x10c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x108>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x13c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x138>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x164>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x160>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0x194>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0x190>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x1bc>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x1b8>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	29 97       	sbiw	r28, 0x09	; 9
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <GPIO_readPin+0x20>
    13be:	8d c0       	rjmp	.+282    	; 0x14da <GPIO_readPin+0x13a>
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_readPin+0x28>
    13c6:	89 c0       	rjmp	.+274    	; 0x14da <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	39 87       	std	Y+9, r19	; 0x09
    13d0:	28 87       	std	Y+8, r18	; 0x08
    13d2:	48 85       	ldd	r20, Y+8	; 0x08
    13d4:	59 85       	ldd	r21, Y+9	; 0x09
    13d6:	41 30       	cpi	r20, 0x01	; 1
    13d8:	51 05       	cpc	r21, r1
    13da:	89 f1       	breq	.+98     	; 0x143e <GPIO_readPin+0x9e>
    13dc:	88 85       	ldd	r24, Y+8	; 0x08
    13de:	99 85       	ldd	r25, Y+9	; 0x09
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <GPIO_readPin+0x52>
    13e6:	28 85       	ldd	r18, Y+8	; 0x08
    13e8:	39 85       	ldd	r19, Y+9	; 0x09
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	69 f0       	breq	.+26     	; 0x140a <GPIO_readPin+0x6a>
    13f0:	74 c0       	rjmp	.+232    	; 0x14da <GPIO_readPin+0x13a>
    13f2:	48 85       	ldd	r20, Y+8	; 0x08
    13f4:	59 85       	ldd	r21, Y+9	; 0x09
    13f6:	42 30       	cpi	r20, 0x02	; 2
    13f8:	51 05       	cpc	r21, r1
    13fa:	d9 f1       	breq	.+118    	; 0x1472 <GPIO_readPin+0xd2>
    13fc:	88 85       	ldd	r24, Y+8	; 0x08
    13fe:	99 85       	ldd	r25, Y+9	; 0x09
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <GPIO_readPin+0x68>
    1406:	4f c0       	rjmp	.+158    	; 0x14a6 <GPIO_readPin+0x106>
    1408:	68 c0       	rjmp	.+208    	; 0x14da <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_readPin+0x82>
    141e:	55 95       	asr	r21
    1420:	47 95       	ror	r20
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_readPin+0x7e>
    1426:	ca 01       	movw	r24, r20
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	90 70       	andi	r25, 0x00	; 0
    142c:	88 23       	and	r24, r24
    142e:	19 f0       	breq	.+6      	; 0x1436 <GPIO_readPin+0x96>
    1430:	51 e0       	ldi	r21, 0x01	; 1
    1432:	5e 83       	std	Y+6, r21	; 0x06
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <GPIO_readPin+0x98>
    1436:	1e 82       	std	Y+6, r1	; 0x06
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	4f c0       	rjmp	.+158    	; 0x14dc <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    143e:	e6 e3       	ldi	r30, 0x36	; 54
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_readPin+0xb6>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_readPin+0xb2>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	88 23       	and	r24, r24
    1462:	19 f0       	breq	.+6      	; 0x146a <GPIO_readPin+0xca>
    1464:	51 e0       	ldi	r21, 0x01	; 1
    1466:	5d 83       	std	Y+5, r21	; 0x05
    1468:	01 c0       	rjmp	.+2      	; 0x146c <GPIO_readPin+0xcc>
    146a:	1d 82       	std	Y+5, r1	; 0x05
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	8f 83       	std	Y+7, r24	; 0x07
    1470:	35 c0       	rjmp	.+106    	; 0x14dc <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    1472:	e3 e3       	ldi	r30, 0x33	; 51
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_readPin+0xea>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_readPin+0xe6>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	88 23       	and	r24, r24
    1496:	19 f0       	breq	.+6      	; 0x149e <GPIO_readPin+0xfe>
    1498:	51 e0       	ldi	r21, 0x01	; 1
    149a:	5c 83       	std	Y+4, r21	; 0x04
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <GPIO_readPin+0x100>
    149e:	1c 82       	std	Y+4, r1	; 0x04
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	8f 83       	std	Y+7, r24	; 0x07
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    14a6:	e0 e3       	ldi	r30, 0x30	; 48
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_readPin+0x11e>
    14ba:	55 95       	asr	r21
    14bc:	47 95       	ror	r20
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_readPin+0x11a>
    14c2:	ca 01       	movw	r24, r20
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	88 23       	and	r24, r24
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <GPIO_readPin+0x132>
    14cc:	51 e0       	ldi	r21, 0x01	; 1
    14ce:	5b 83       	std	Y+3, r21	; 0x03
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <GPIO_readPin+0x134>
    14d2:	1b 82       	std	Y+3, r1	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	8f 83       	std	Y+7, r24	; 0x07
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <GPIO_readPin+0x13c>
			break;
		}

	}

	return 0;
    14da:	1f 82       	std	Y+7, r1	; 0x07
    14dc:	8f 81       	ldd	r24, Y+7	; 0x07
}
    14de:	29 96       	adiw	r28, 0x09	; 9
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_setupPortDirection+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_setupPortDirection+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	90 f5       	brcc	.+100    	; 0x156a <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <GPIO_setupPortDirection+0x5e>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_setupPortDirection+0x3e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <GPIO_setupPortDirection+0x54>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <GPIO_setupPortDirection+0x7a>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <GPIO_setupPortDirection+0x68>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <GPIO_setupPortDirection+0x72>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	0e c0       	rjmp	.+28     	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    154e:	e7 e3       	ldi	r30, 0x37	; 55
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	09 c0       	rjmp	.+18     	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1558:	e4 e3       	ldi	r30, 0x34	; 52
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
    1560:	04 c0       	rjmp	.+8      	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
			break;
		}
	}
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_writePort+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_writePort+0x8>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	90 f5       	brcc	.+100    	; 0x15f2 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	d1 f0       	breq	.+52     	; 0x15d6 <GPIO_writePort+0x5e>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <GPIO_writePort+0x3e>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 f0       	breq	.+24     	; 0x15cc <GPIO_writePort+0x54>
    15b4:	1e c0       	rjmp	.+60     	; 0x15f2 <GPIO_writePort+0x7a>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <GPIO_writePort+0x68>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <GPIO_writePort+0x72>
    15ca:	13 c0       	rjmp	.+38     	; 0x15f2 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24
    15d4:	0e c0       	rjmp	.+28     	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 83       	st	Z, r24
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 83       	st	Z, r24
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ea:	e2 e3       	ldi	r30, 0x32	; 50
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_readPort+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_readPort+0x8>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	98 f5       	brcc	.+102    	; 0x167a <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	d1 f0       	breq	.+52     	; 0x165c <GPIO_readPort+0x5c>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <GPIO_readPort+0x3c>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_readPort+0x52>
    163a:	1f c0       	rjmp	.+62     	; 0x167a <GPIO_readPort+0x7a>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_readPort+0x66>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_readPort+0x70>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    1652:	e9 e3       	ldi	r30, 0x39	; 57
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	90 81       	ld	r25, Z
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	10 c0       	rjmp	.+32     	; 0x167c <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    165c:	e6 e3       	ldi	r30, 0x36	; 54
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	20 81       	ld	r18, Z
    1662:	2a 83       	std	Y+2, r18	; 0x02
    1664:	0b c0       	rjmp	.+22     	; 0x167c <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1666:	e3 e3       	ldi	r30, 0x33	; 51
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	30 81       	ld	r19, Z
    166c:	3a 83       	std	Y+2, r19	; 0x02
    166e:	06 c0       	rjmp	.+12     	; 0x167c <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	01 c0       	rjmp	.+2      	; 0x167c <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    167a:	1a 82       	std	Y+2, r1	; 0x02
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <Ultrasonic_init>:
 * 	Initialize the ICU driver as required.
 *	Set up the ICU callback function.
 *	Set the direction for the trigger pin as output through
 *	the GPIO driver.
 */
void Ultrasonic_init(void){
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <Ultrasonic_init+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62

	ICU_ConfigType US_config = {F_CPU_8,RAISING};
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&US_config);
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    16a6:	89 e2       	ldi	r24, 0x29	; 41
    16a8:	9d e0       	ldi	r25, 0x0D	; 13
    16aa:	0e 94 93 07 	call	0xf26	; 0xf26 <ICU_setCallBack>
	/* set trigger pin as output */
	GPIO_setupPinDirection(TRIGGER_PORT_ID,TRIGGER_PIN_ID,PIN_OUTPUT);
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	67 e0       	ldi	r22, 0x07	; 7
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <Ultrasonic_Trigger>:

/*
 * Send the trigger pulse to the ultrasonic sensor.
 */
void Ultrasonic_Trigger(void){
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	e0 97       	sbiw	r28, 0x30	; 48
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOW);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	67 e0       	ldi	r22, 0x07	; 7
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e4       	ldi	r27, 0x40	; 64
    16e8:	8d a7       	std	Y+45, r24	; 0x2d
    16ea:	9e a7       	std	Y+46, r25	; 0x2e
    16ec:	af a7       	std	Y+47, r26	; 0x2f
    16ee:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    16f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f6:	98 a9       	ldd	r25, Y+48	; 0x30
    16f8:	2b ea       	ldi	r18, 0xAB	; 171
    16fa:	3a ea       	ldi	r19, 0xAA	; 170
    16fc:	4a ea       	ldi	r20, 0xAA	; 170
    16fe:	50 e4       	ldi	r21, 0x40	; 64
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	89 a7       	std	Y+41, r24	; 0x29
    170a:	9a a7       	std	Y+42, r25	; 0x2a
    170c:	ab a7       	std	Y+43, r26	; 0x2b
    170e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1710:	69 a5       	ldd	r22, Y+41	; 0x29
    1712:	7a a5       	ldd	r23, Y+42	; 0x2a
    1714:	8b a5       	ldd	r24, Y+43	; 0x2b
    1716:	9c a5       	ldd	r25, Y+44	; 0x2c
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	1c f4       	brge	.+6      	; 0x172e <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	88 a7       	std	Y+40, r24	; 0x28
    172c:	91 c0       	rjmp	.+290    	; 0x1850 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    172e:	69 a5       	ldd	r22, Y+41	; 0x29
    1730:	7a a5       	ldd	r23, Y+42	; 0x2a
    1732:	8b a5       	ldd	r24, Y+43	; 0x2b
    1734:	9c a5       	ldd	r25, Y+44	; 0x2c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	53 e4       	ldi	r21, 0x43	; 67
    173e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	0c f0       	brlt	.+2      	; 0x1748 <Ultrasonic_Trigger+0x86>
    1746:	7b c0       	rjmp	.+246    	; 0x183e <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1748:	6d a5       	ldd	r22, Y+45	; 0x2d
    174a:	7e a5       	ldd	r23, Y+46	; 0x2e
    174c:	8f a5       	ldd	r24, Y+47	; 0x2f
    174e:	98 a9       	ldd	r25, Y+48	; 0x30
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a e7       	ldi	r20, 0x7A	; 122
    1756:	54 e4       	ldi	r21, 0x44	; 68
    1758:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	8c a3       	std	Y+36, r24	; 0x24
    1762:	9d a3       	std	Y+37, r25	; 0x25
    1764:	ae a3       	std	Y+38, r26	; 0x26
    1766:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6c a1       	ldd	r22, Y+36	; 0x24
    176a:	7d a1       	ldd	r23, Y+37	; 0x25
    176c:	8e a1       	ldd	r24, Y+38	; 0x26
    176e:	9f a1       	ldd	r25, Y+39	; 0x27
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a e7       	ldi	r20, 0x7A	; 122
    1776:	55 e4       	ldi	r21, 0x45	; 69
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	88 a3       	std	Y+32, r24	; 0x20
    1782:	99 a3       	std	Y+33, r25	; 0x21
    1784:	aa a3       	std	Y+34, r26	; 0x22
    1786:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1788:	68 a1       	ldd	r22, Y+32	; 0x20
    178a:	79 a1       	ldd	r23, Y+33	; 0x21
    178c:	8a a1       	ldd	r24, Y+34	; 0x22
    178e:	9b a1       	ldd	r25, Y+35	; 0x23
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9f 8f       	std	Y+31, r25	; 0x1f
    17a6:	8e 8f       	std	Y+30, r24	; 0x1e
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    17aa:	68 a1       	ldd	r22, Y+32	; 0x20
    17ac:	79 a1       	ldd	r23, Y+33	; 0x21
    17ae:	8a a1       	ldd	r24, Y+34	; 0x22
    17b0:	9b a1       	ldd	r25, Y+35	; 0x23
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6c a1       	ldd	r22, Y+36	; 0x24
    17c4:	7d a1       	ldd	r23, Y+37	; 0x25
    17c6:	8e a1       	ldd	r24, Y+38	; 0x26
    17c8:	9f a1       	ldd	r25, Y+39	; 0x27
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9f 8f       	std	Y+31, r25	; 0x1f
    17e8:	8e 8f       	std	Y+30, r24	; 0x1e
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <Ultrasonic_Trigger+0x148>
    17ec:	80 e9       	ldi	r24, 0x90	; 144
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	9d 8f       	std	Y+29, r25	; 0x1d
    17f2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <Ultrasonic_Trigger+0x136>
    17fc:	9d 8f       	std	Y+29, r25	; 0x1d
    17fe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1802:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9f 8f       	std	Y+31, r25	; 0x1f
    1808:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <Ultrasonic_Trigger+0x12a>
    1812:	24 c0       	rjmp	.+72     	; 0x185c <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	68 a1       	ldd	r22, Y+32	; 0x20
    1816:	79 a1       	ldd	r23, Y+33	; 0x21
    1818:	8a a1       	ldd	r24, Y+34	; 0x22
    181a:	9b a1       	ldd	r25, Y+35	; 0x23
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9f 8f       	std	Y+31, r25	; 0x1f
    1826:	8e 8f       	std	Y+30, r24	; 0x1e
    1828:	8e 8d       	ldd	r24, Y+30	; 0x1e
    182a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    182c:	9b 8f       	std	Y+27, r25	; 0x1b
    182e:	8a 8f       	std	Y+26, r24	; 0x1a
    1830:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1832:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <Ultrasonic_Trigger+0x172>
    1838:	9b 8f       	std	Y+27, r25	; 0x1b
    183a:	8a 8f       	std	Y+26, r24	; 0x1a
    183c:	0f c0       	rjmp	.+30     	; 0x185c <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183e:	69 a5       	ldd	r22, Y+41	; 0x29
    1840:	7a a5       	ldd	r23, Y+42	; 0x2a
    1842:	8b a5       	ldd	r24, Y+43	; 0x2b
    1844:	9c a5       	ldd	r25, Y+44	; 0x2c
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	88 a7       	std	Y+40, r24	; 0x28
    1850:	88 a5       	ldd	r24, Y+40	; 0x28
    1852:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1854:	89 8d       	ldd	r24, Y+25	; 0x19
    1856:	8a 95       	dec	r24
    1858:	f1 f7       	brne	.-4      	; 0x1856 <Ultrasonic_Trigger+0x194>
    185a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	GPIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,HIGH);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	67 e0       	ldi	r22, 0x07	; 7
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e2       	ldi	r26, 0x20	; 32
    186c:	b1 e4       	ldi	r27, 0x41	; 65
    186e:	8d 8b       	std	Y+21, r24	; 0x15
    1870:	9e 8b       	std	Y+22, r25	; 0x16
    1872:	af 8b       	std	Y+23, r26	; 0x17
    1874:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1876:	6d 89       	ldd	r22, Y+21	; 0x15
    1878:	7e 89       	ldd	r23, Y+22	; 0x16
    187a:	8f 89       	ldd	r24, Y+23	; 0x17
    187c:	98 8d       	ldd	r25, Y+24	; 0x18
    187e:	2b ea       	ldi	r18, 0xAB	; 171
    1880:	3a ea       	ldi	r19, 0xAA	; 170
    1882:	4a ea       	ldi	r20, 0xAA	; 170
    1884:	50 e4       	ldi	r21, 0x40	; 64
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	89 8b       	std	Y+17, r24	; 0x11
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	ab 8b       	std	Y+19, r26	; 0x13
    1894:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1896:	69 89       	ldd	r22, Y+17	; 0x11
    1898:	7a 89       	ldd	r23, Y+18	; 0x12
    189a:	8b 89       	ldd	r24, Y+19	; 0x13
    189c:	9c 89       	ldd	r25, Y+20	; 0x14
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e8       	ldi	r20, 0x80	; 128
    18a4:	5f e3       	ldi	r21, 0x3F	; 63
    18a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	1c f4       	brge	.+6      	; 0x18b4 <Ultrasonic_Trigger+0x1f2>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	88 8b       	std	Y+16, r24	; 0x10
    18b2:	91 c0       	rjmp	.+290    	; 0x19d6 <Ultrasonic_Trigger+0x314>
	else if (__tmp > 255)
    18b4:	69 89       	ldd	r22, Y+17	; 0x11
    18b6:	7a 89       	ldd	r23, Y+18	; 0x12
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	53 e4       	ldi	r21, 0x43	; 67
    18c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <Ultrasonic_Trigger+0x20c>
    18cc:	7b c0       	rjmp	.+246    	; 0x19c4 <Ultrasonic_Trigger+0x302>
	{
		_delay_ms(__us / 1000.0);
    18ce:	6d 89       	ldd	r22, Y+21	; 0x15
    18d0:	7e 89       	ldd	r23, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	4a e7       	ldi	r20, 0x7A	; 122
    18dc:	54 e4       	ldi	r21, 0x44	; 68
    18de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	8c 87       	std	Y+12, r24	; 0x0c
    18e8:	9d 87       	std	Y+13, r25	; 0x0d
    18ea:	ae 87       	std	Y+14, r26	; 0x0e
    18ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    18f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    18f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	88 87       	std	Y+8, r24	; 0x08
    1908:	99 87       	std	Y+9, r25	; 0x09
    190a:	aa 87       	std	Y+10, r26	; 0x0a
    190c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    190e:	68 85       	ldd	r22, Y+8	; 0x08
    1910:	79 85       	ldd	r23, Y+9	; 0x09
    1912:	8a 85       	ldd	r24, Y+10	; 0x0a
    1914:	9b 85       	ldd	r25, Y+11	; 0x0b
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <Ultrasonic_Trigger+0x26e>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9f 83       	std	Y+7, r25	; 0x07
    192c:	8e 83       	std	Y+6, r24	; 0x06
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <Ultrasonic_Trigger+0x2ec>
	else if (__tmp > 65535)
    1930:	68 85       	ldd	r22, Y+8	; 0x08
    1932:	79 85       	ldd	r23, Y+9	; 0x09
    1934:	8a 85       	ldd	r24, Y+10	; 0x0a
    1936:	9b 85       	ldd	r25, Y+11	; 0x0b
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <Ultrasonic_Trigger+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6c 85       	ldd	r22, Y+12	; 0x0c
    194a:	7d 85       	ldd	r23, Y+13	; 0x0d
    194c:	8e 85       	ldd	r24, Y+14	; 0x0e
    194e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9f 83       	std	Y+7, r25	; 0x07
    196e:	8e 83       	std	Y+6, r24	; 0x06
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <Ultrasonic_Trigger+0x2ce>
    1972:	80 e9       	ldi	r24, 0x90	; 144
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9d 83       	std	Y+5, r25	; 0x05
    1978:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <Ultrasonic_Trigger+0x2bc>
    1982:	9d 83       	std	Y+5, r25	; 0x05
    1984:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9f 83       	std	Y+7, r25	; 0x07
    198e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8e 81       	ldd	r24, Y+6	; 0x06
    1992:	9f 81       	ldd	r25, Y+7	; 0x07
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <Ultrasonic_Trigger+0x2b0>
    1998:	24 c0       	rjmp	.+72     	; 0x19e2 <Ultrasonic_Trigger+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	68 85       	ldd	r22, Y+8	; 0x08
    199c:	79 85       	ldd	r23, Y+9	; 0x09
    199e:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9f 83       	std	Y+7, r25	; 0x07
    19ac:	8e 83       	std	Y+6, r24	; 0x06
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	9b 83       	std	Y+3, r25	; 0x03
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <Ultrasonic_Trigger+0x2f8>
    19be:	9b 83       	std	Y+3, r25	; 0x03
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <Ultrasonic_Trigger+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19c4:	69 89       	ldd	r22, Y+17	; 0x11
    19c6:	7a 89       	ldd	r23, Y+18	; 0x12
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	88 8b       	std	Y+16, r24	; 0x10
    19d6:	88 89       	ldd	r24, Y+16	; 0x10
    19d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	8a 95       	dec	r24
    19de:	f1 f7       	brne	.-4      	; 0x19dc <Ultrasonic_Trigger+0x31a>
    19e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOW);
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	67 e0       	ldi	r22, 0x07	; 7
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    19ec:	e0 96       	adiw	r28, 0x30	; 48
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <Ultrasonic_readDistance>:

/*
 * Send the trigger pulse by using the Ultrasonic_Trigger function.
 *Start the measurement process via the ICU driver.
 */
uint16 Ultrasonic_readDistance(void){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	/* send trigger to start measure time */
	Ultrasonic_Trigger();
    1a06:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Ultrasonic_Trigger>

	/* to wait until measurement complete and ensure synchronization */
	while(g_edgeCount <2);
    1a0a:	80 91 8c 01 	lds	r24, 0x018C
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	e0 f3       	brcs	.-8      	; 0x1a0a <Ultrasonic_readDistance+0xc>

	/* return distance reading */
	return g_timeHigh * 0.017;
    1a12:	80 91 8d 01 	lds	r24, 0x018D
    1a16:	90 91 8e 01 	lds	r25, 0x018E
    1a1a:	cc 01       	movw	r24, r24
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	26 e9       	ldi	r18, 0x96	; 150
    1a32:	33 e4       	ldi	r19, 0x43	; 67
    1a34:	4b e8       	ldi	r20, 0x8B	; 139
    1a36:	5c e3       	ldi	r21, 0x3C	; 60
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <Ultrasonic_edgeProcessing>:
/*
 * This is the callback function called by the ICU driver.
 * It calculates the high time (pulse time) generated by
 * the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void){
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    1a5a:	80 91 8c 01 	lds	r24, 0x018C
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 8c 01 	sts	0x018C, r24
	if(g_edgeCount == 1)
    1a64:	80 91 8c 01 	lds	r24, 0x018C
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	31 f4       	brne	.+12     	; 0x1a78 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    1a6c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>
		/* Detect falling edge  for next measurement */
		ICU_setEdgeDetectionType(FALLING);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <Ultrasonic_edgeProcessing+0x48>
	}
	else if(g_edgeCount == 2)
    1a78:	80 91 8c 01 	lds	r24, 0x018C
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	69 f4       	brne	.+26     	; 0x1a9a <Ultrasonic_edgeProcessing+0x48>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    1a80:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_getInputCaptureValue>
    1a84:	90 93 8e 01 	sts	0x018E, r25
    1a88:	80 93 8d 01 	sts	0x018D, r24

		/* clear timer */
		ICU_clearTimerValue();
    1a8c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>

		/* reset edge count */
		g_edgeCount = 0;
    1a90:	10 92 8c 01 	sts	0x018C, r1

		/* Detect rising edge for next measurement */
		ICU_setEdgeDetectionType(RAISING);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>

	}

}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <LEDS_init>:
#include "led.h"
/*
 * Initializes all Leds (red, green, blue) pins direction.
 * Turn off all the Leds
 */
void LEDS_init(void){
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62

	/* SETUP LEDs  Direction as Output */
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_pin,PIN_OUTPUT);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT,GREEN_LED_pin,PIN_OUTPUT);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT,BLUE_LED_pin,PIN_OUTPUT);
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	/* Turn off All pins on Startup*/
#if(LED_MODE == POSITIVE_LOGIC)

	GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);

#endif

}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <LED_on>:
/*
 * Turns on the specified LED.
 */
void LED_on(uint8 id){
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <LED_on+0x6>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01

#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3b 83       	std	Y+3, r19	; 0x03
    1b00:	2a 83       	std	Y+2, r18	; 0x02
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	91 05       	cpc	r25, r1
    1b0a:	a9 f0       	breq	.+42     	; 0x1b36 <LED_on+0x4c>
    1b0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	51 f0       	breq	.+20     	; 0x1b2a <LED_on+0x40>
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	89 f4       	brne	.+34     	; 0x1b40 <LED_on+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,HIGH);
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <LED_on+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <LED_on+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
		break;
	}

#endif

}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <LED_off>:

/*
 * Turns off the specified LED.
 */
void LED_off(uint8 id){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <LED_off+0x6>
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	89 83       	std	Y+1, r24	; 0x01


#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3b 83       	std	Y+3, r19	; 0x03
    1b62:	2a 83       	std	Y+2, r18	; 0x02
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	a9 f0       	breq	.+42     	; 0x1b98 <LED_off+0x4c>
    1b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b70:	3b 81       	ldd	r19, Y+3	; 0x03
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <LED_off+0x40>
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	89 f4       	brne	.+34     	; 0x1ba2 <LED_off+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1b8a:	0b c0       	rjmp	.+22     	; 0x1ba2 <LED_off+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	62 e0       	ldi	r22, 0x02	; 2
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <LED_off+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
		break;
	}

#endif

}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	41 e0       	ldi	r20, 0x01	; 1
    1bc8:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	62 e0       	ldi	r22, 0x02	; 2
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 ea       	ldi	r26, 0xA0	; 160
    1bdc:	b1 e4       	ldi	r27, 0x41	; 65
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	ad 87       	std	Y+13, r26	; 0x0d
    1be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	98 87       	std	Y+8, r25	; 0x08
    1c02:	a9 87       	std	Y+9, r26	; 0x09
    1c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_init+0x7a>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_init+0xda>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_init+0xc8>
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_init+0xbc>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_init+0x104>
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	65 e0       	ldi	r22, 0x05	; 5
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	66 e0       	ldi	r22, 0x06	; 6
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
    1ce2:	83 e3       	ldi	r24, 0x33	; 51
    1ce4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
    1ce8:	82 e3       	ldi	r24, 0x32	; 50
    1cea:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
    1cee:	88 e2       	ldi	r24, 0x28	; 40
    1cf0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1cf4:	8c e0       	ldi	r24, 0x0C	; 12
    1cf6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>

}
    1d00:	2e 96       	adiw	r28, 0x0e	; 14
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	c3 56       	subi	r28, 0x63	; 99
    1d20:	d0 40       	sbci	r29, 0x00	; 0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ed 59       	subi	r30, 0x9D	; 157
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e1 5a       	subi	r30, 0xA1	; 161
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	8e 01       	movw	r16, r28
    1d56:	05 5a       	subi	r16, 0xA5	; 165
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e1 5a       	subi	r30, 0xA1	; 161
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a e7       	ldi	r20, 0x7A	; 122
    1d6e:	55 e4       	ldi	r21, 0x45	; 69
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5a       	subi	r30, 0xA5	; 165
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	44 f4       	brge	.+16     	; 0x1db0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5a       	subi	r30, 0xA7	; 167
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	64 c0       	rjmp	.+200    	; 0x1e78 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1db0:	fe 01       	movw	r30, r28
    1db2:	e5 5a       	subi	r30, 0xA5	; 165
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <LCD_sendCommand+0xbe>
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e1 5a       	subi	r30, 0xA1	; 161
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8e 01       	movw	r16, r28
    1df0:	07 5a       	subi	r16, 0xA7	; 167
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	f8 01       	movw	r30, r16
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	1f c0       	rjmp	.+62     	; 0x1e46 <LCD_sendCommand+0x134>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e9 5a       	subi	r30, 0xA9	; 169
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 e9       	ldi	r24, 0x90	; 144
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    1e16:	fe 01       	movw	r30, r28
    1e18:	e9 5a       	subi	r30, 0xA9	; 169
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_sendCommand+0x10e>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e9 5a       	subi	r30, 0xA9	; 169
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	de 01       	movw	r26, r28
    1e30:	a7 5a       	subi	r26, 0xA7	; 167
    1e32:	bf 4f       	sbci	r27, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	e7 5a       	subi	r30, 0xA7	; 167
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	11 96       	adiw	r26, 0x01	; 1
    1e42:	9c 93       	st	X, r25
    1e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e7 5a       	subi	r30, 0xA7	; 167
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	d1 f6       	brne	.-76     	; 0x1e08 <LCD_sendCommand+0xf6>
    1e54:	27 c0       	rjmp	.+78     	; 0x1ea4 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	8e 01       	movw	r16, r28
    1e58:	07 5a       	subi	r16, 0xA7	; 167
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e5 5a       	subi	r30, 0xA5	; 165
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	f8 01       	movw	r30, r16
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	de 01       	movw	r26, r28
    1e7a:	ab 5a       	subi	r26, 0xAB	; 171
    1e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e7 5a       	subi	r30, 0xA7	; 167
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	8d 93       	st	X+, r24
    1e8a:	9c 93       	st	X, r25
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	eb 5a       	subi	r30, 0xAB	; 171
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_sendCommand+0x184>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	eb 5a       	subi	r30, 0xAB	; 171
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 5a       	subi	r30, 0xAF	; 175
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e8       	ldi	r26, 0x80	; 128
    1eba:	bf e3       	ldi	r27, 0x3F	; 63
    1ebc:	80 83       	st	Z, r24
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	a2 83       	std	Z+2, r26	; 0x02
    1ec2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	8e 01       	movw	r16, r28
    1ec6:	03 5b       	subi	r16, 0xB3	; 179
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 5a       	subi	r30, 0xAF	; 175
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a e7       	ldi	r20, 0x7A	; 122
    1ede:	55 e4       	ldi	r21, 0x45	; 69
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e3 5b       	subi	r30, 0xB3	; 179
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	44 f4       	brge	.+16     	; 0x1f20 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f10:	fe 01       	movw	r30, r28
    1f12:	e5 5b       	subi	r30, 0xB5	; 181
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	64 c0       	rjmp	.+200    	; 0x1fe8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f20:	fe 01       	movw	r30, r28
    1f22:	e3 5b       	subi	r30, 0xB3	; 179
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	0c f0       	brlt	.+2      	; 0x1f40 <LCD_sendCommand+0x22e>
    1f3e:	43 c0       	rjmp	.+134    	; 0x1fc6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	fe 01       	movw	r30, r28
    1f42:	ef 5a       	subi	r30, 0xAF	; 175
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8e 01       	movw	r16, r28
    1f60:	05 5b       	subi	r16, 0xB5	; 181
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	1f c0       	rjmp	.+62     	; 0x1fb6 <LCD_sendCommand+0x2a4>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 5b       	subi	r30, 0xB7	; 183
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 e9       	ldi	r24, 0x90	; 144
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	fe 01       	movw	r30, r28
    1f88:	e7 5b       	subi	r30, 0xB7	; 183
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_sendCommand+0x27e>
    1f94:	fe 01       	movw	r30, r28
    1f96:	e7 5b       	subi	r30, 0xB7	; 183
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	de 01       	movw	r26, r28
    1fa0:	a5 5b       	subi	r26, 0xB5	; 181
    1fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e5 5b       	subi	r30, 0xB5	; 181
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e5 5b       	subi	r30, 0xB5	; 181
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	d1 f6       	brne	.-76     	; 0x1f78 <LCD_sendCommand+0x266>
    1fc4:	27 c0       	rjmp	.+78     	; 0x2014 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	05 5b       	subi	r16, 0xB5	; 181
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e3 5b       	subi	r30, 0xB3	; 179
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	de 01       	movw	r26, r28
    1fea:	a9 5b       	subi	r26, 0xB9	; 185
    1fec:	bf 4f       	sbci	r27, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5b       	subi	r30, 0xB5	; 181
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	8d 93       	st	X+, r24
    1ffa:	9c 93       	st	X, r25
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 5b       	subi	r30, 0xB9	; 185
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_sendCommand+0x2f4>
    200a:	fe 01       	movw	r30, r28
    200c:	e9 5b       	subi	r30, 0xB9	; 185
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2014:	fe 01       	movw	r30, r28
    2016:	ed 59       	subi	r30, 0x9D	; 157
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	88 2f       	mov	r24, r24
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	80 71       	andi	r24, 0x10	; 16
    2022:	90 70       	andi	r25, 0x00	; 0
    2024:	95 95       	asr	r25
    2026:	87 95       	ror	r24
    2028:	95 95       	asr	r25
    202a:	87 95       	ror	r24
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	95 95       	asr	r25
    2032:	87 95       	ror	r24
    2034:	98 2f       	mov	r25, r24
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	63 e0       	ldi	r22, 0x03	; 3
    203a:	49 2f       	mov	r20, r25
    203c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2040:	fe 01       	movw	r30, r28
    2042:	ed 59       	subi	r30, 0x9D	; 157
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	80 72       	andi	r24, 0x20	; 32
    204e:	90 70       	andi	r25, 0x00	; 0
    2050:	95 95       	asr	r25
    2052:	87 95       	ror	r24
    2054:	95 95       	asr	r25
    2056:	87 95       	ror	r24
    2058:	95 95       	asr	r25
    205a:	87 95       	ror	r24
    205c:	95 95       	asr	r25
    205e:	87 95       	ror	r24
    2060:	95 95       	asr	r25
    2062:	87 95       	ror	r24
    2064:	98 2f       	mov	r25, r24
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	64 e0       	ldi	r22, 0x04	; 4
    206a:	49 2f       	mov	r20, r25
    206c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2070:	fe 01       	movw	r30, r28
    2072:	ed 59       	subi	r30, 0x9D	; 157
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	80 74       	andi	r24, 0x40	; 64
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	08 2e       	mov	r0, r24
    2082:	89 2f       	mov	r24, r25
    2084:	00 0c       	add	r0, r0
    2086:	88 1f       	adc	r24, r24
    2088:	99 0b       	sbc	r25, r25
    208a:	00 0c       	add	r0, r0
    208c:	88 1f       	adc	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	98 2f       	mov	r25, r24
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	49 2f       	mov	r20, r25
    2098:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    209c:	fe 01       	movw	r30, r28
    209e:	ed 59       	subi	r30, 0x9D	; 157
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	98 2f       	mov	r25, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	99 1f       	adc	r25, r25
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    20b6:	fe 01       	movw	r30, r28
    20b8:	ed 5b       	subi	r30, 0xBD	; 189
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	a2 83       	std	Z+2, r26	; 0x02
    20ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	8e 01       	movw	r16, r28
    20ce:	01 5c       	subi	r16, 0xC1	; 193
    20d0:	1f 4f       	sbci	r17, 0xFF	; 255
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 5b       	subi	r30, 0xBD	; 189
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4a e7       	ldi	r20, 0x7A	; 122
    20e6:	55 e4       	ldi	r21, 0x45	; 69
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	f8 01       	movw	r30, r16
    20f2:	80 83       	st	Z, r24
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	a2 83       	std	Z+2, r26	; 0x02
    20f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20fa:	fe 01       	movw	r30, r28
    20fc:	ff 96       	adiw	r30, 0x3f	; 63
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9e af       	std	Y+62, r25	; 0x3e
    211c:	8d af       	std	Y+61, r24	; 0x3d
    211e:	46 c0       	rjmp	.+140    	; 0x21ac <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2120:	fe 01       	movw	r30, r28
    2122:	ff 96       	adiw	r30, 0x3f	; 63
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	64 f5       	brge	.+88     	; 0x2194 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	fe 01       	movw	r30, r28
    213e:	ed 5b       	subi	r30, 0xBD	; 189
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e af       	std	Y+62, r25	; 0x3e
    2168:	8d af       	std	Y+61, r24	; 0x3d
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_sendCommand+0x478>
    216c:	80 e9       	ldi	r24, 0x90	; 144
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	9c af       	std	Y+60, r25	; 0x3c
    2172:	8b af       	std	Y+59, r24	; 0x3b
    2174:	8b ad       	ldd	r24, Y+59	; 0x3b
    2176:	9c ad       	ldd	r25, Y+60	; 0x3c
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_sendCommand+0x466>
    217c:	9c af       	std	Y+60, r25	; 0x3c
    217e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	8d ad       	ldd	r24, Y+61	; 0x3d
    2182:	9e ad       	ldd	r25, Y+62	; 0x3e
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9e af       	std	Y+62, r25	; 0x3e
    2188:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	8d ad       	ldd	r24, Y+61	; 0x3d
    218c:	9e ad       	ldd	r25, Y+62	; 0x3e
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_sendCommand+0x45a>
    2192:	16 c0       	rjmp	.+44     	; 0x21c0 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	fe 01       	movw	r30, r28
    2196:	ff 96       	adiw	r30, 0x3f	; 63
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e af       	std	Y+62, r25	; 0x3e
    21aa:	8d af       	std	Y+61, r24	; 0x3d
    21ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    21b0:	9a af       	std	Y+58, r25	; 0x3a
    21b2:	89 af       	std	Y+57, r24	; 0x39
    21b4:	89 ad       	ldd	r24, Y+57	; 0x39
    21b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_sendCommand+0x4a6>
    21bc:	9a af       	std	Y+58, r25	; 0x3a
    21be:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	62 e0       	ldi	r22, 0x02	; 2
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a0 e8       	ldi	r26, 0x80	; 128
    21d0:	bf e3       	ldi	r27, 0x3F	; 63
    21d2:	8d ab       	std	Y+53, r24	; 0x35
    21d4:	9e ab       	std	Y+54, r25	; 0x36
    21d6:	af ab       	std	Y+55, r26	; 0x37
    21d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21da:	6d a9       	ldd	r22, Y+53	; 0x35
    21dc:	7e a9       	ldd	r23, Y+54	; 0x36
    21de:	8f a9       	ldd	r24, Y+55	; 0x37
    21e0:	98 ad       	ldd	r25, Y+56	; 0x38
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4a e7       	ldi	r20, 0x7A	; 122
    21e8:	55 e4       	ldi	r21, 0x45	; 69
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	89 ab       	std	Y+49, r24	; 0x31
    21f4:	9a ab       	std	Y+50, r25	; 0x32
    21f6:	ab ab       	std	Y+51, r26	; 0x33
    21f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21fa:	69 a9       	ldd	r22, Y+49	; 0x31
    21fc:	7a a9       	ldd	r23, Y+50	; 0x32
    21fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2200:	9c a9       	ldd	r25, Y+52	; 0x34
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	2c f4       	brge	.+10     	; 0x221c <LCD_sendCommand+0x50a>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	98 ab       	std	Y+48, r25	; 0x30
    2218:	8f a7       	std	Y+47, r24	; 0x2f
    221a:	3f c0       	rjmp	.+126    	; 0x229a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	4c f5       	brge	.+82     	; 0x2286 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2234:	6d a9       	ldd	r22, Y+53	; 0x35
    2236:	7e a9       	ldd	r23, Y+54	; 0x36
    2238:	8f a9       	ldd	r24, Y+55	; 0x37
    223a:	98 ad       	ldd	r25, Y+56	; 0x38
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	98 ab       	std	Y+48, r25	; 0x30
    225a:	8f a7       	std	Y+47, r24	; 0x2f
    225c:	0f c0       	rjmp	.+30     	; 0x227c <LCD_sendCommand+0x56a>
    225e:	80 e9       	ldi	r24, 0x90	; 144
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	9e a7       	std	Y+46, r25	; 0x2e
    2264:	8d a7       	std	Y+45, r24	; 0x2d
    2266:	8d a5       	ldd	r24, Y+45	; 0x2d
    2268:	9e a5       	ldd	r25, Y+46	; 0x2e
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_sendCommand+0x558>
    226e:	9e a7       	std	Y+46, r25	; 0x2e
    2270:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	98 ab       	std	Y+48, r25	; 0x30
    227a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	8f a5       	ldd	r24, Y+47	; 0x2f
    227e:	98 a9       	ldd	r25, Y+48	; 0x30
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	69 f7       	brne	.-38     	; 0x225e <LCD_sendCommand+0x54c>
    2284:	14 c0       	rjmp	.+40     	; 0x22ae <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	69 a9       	ldd	r22, Y+49	; 0x31
    2288:	7a a9       	ldd	r23, Y+50	; 0x32
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	98 ab       	std	Y+48, r25	; 0x30
    2298:	8f a7       	std	Y+47, r24	; 0x2f
    229a:	8f a5       	ldd	r24, Y+47	; 0x2f
    229c:	98 a9       	ldd	r25, Y+48	; 0x30
    229e:	9c a7       	std	Y+44, r25	; 0x2c
    22a0:	8b a7       	std	Y+43, r24	; 0x2b
    22a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_sendCommand+0x594>
    22aa:	9c a7       	std	Y+44, r25	; 0x2c
    22ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	62 e0       	ldi	r22, 0x02	; 2
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e8       	ldi	r26, 0x80	; 128
    22be:	bf e3       	ldi	r27, 0x3F	; 63
    22c0:	8f a3       	std	Y+39, r24	; 0x27
    22c2:	98 a7       	std	Y+40, r25	; 0x28
    22c4:	a9 a7       	std	Y+41, r26	; 0x29
    22c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ca:	78 a5       	ldd	r23, Y+40	; 0x28
    22cc:	89 a5       	ldd	r24, Y+41	; 0x29
    22ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	55 e4       	ldi	r21, 0x45	; 69
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8b a3       	std	Y+35, r24	; 0x23
    22e2:	9c a3       	std	Y+36, r25	; 0x24
    22e4:	ad a3       	std	Y+37, r26	; 0x25
    22e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ea:	7c a1       	ldd	r23, Y+36	; 0x24
    22ec:	8d a1       	ldd	r24, Y+37	; 0x25
    22ee:	9e a1       	ldd	r25, Y+38	; 0x26
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9a a3       	std	Y+34, r25	; 0x22
    2306:	89 a3       	std	Y+33, r24	; 0x21
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    230a:	6b a1       	ldd	r22, Y+35	; 0x23
    230c:	7c a1       	ldd	r23, Y+36	; 0x24
    230e:	8d a1       	ldd	r24, Y+37	; 0x25
    2310:	9e a1       	ldd	r25, Y+38	; 0x26
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6f a1       	ldd	r22, Y+39	; 0x27
    2324:	78 a5       	ldd	r23, Y+40	; 0x28
    2326:	89 a5       	ldd	r24, Y+41	; 0x29
    2328:	9a a5       	ldd	r25, Y+42	; 0x2a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
    234a:	0f c0       	rjmp	.+30     	; 0x236a <LCD_sendCommand+0x658>
    234c:	80 e9       	ldi	r24, 0x90	; 144
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	98 a3       	std	Y+32, r25	; 0x20
    2352:	8f 8f       	std	Y+31, r24	; 0x1f
    2354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2356:	98 a1       	ldd	r25, Y+32	; 0x20
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_sendCommand+0x646>
    235c:	98 a3       	std	Y+32, r25	; 0x20
    235e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9a a3       	std	Y+34, r25	; 0x22
    2368:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	89 a1       	ldd	r24, Y+33	; 0x21
    236c:	9a a1       	ldd	r25, Y+34	; 0x22
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <LCD_sendCommand+0x63a>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6b a1       	ldd	r22, Y+35	; 0x23
    2376:	7c a1       	ldd	r23, Y+36	; 0x24
    2378:	8d a1       	ldd	r24, Y+37	; 0x25
    237a:	9e a1       	ldd	r25, Y+38	; 0x26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9a a3       	std	Y+34, r25	; 0x22
    2386:	89 a3       	std	Y+33, r24	; 0x21
    2388:	89 a1       	ldd	r24, Y+33	; 0x21
    238a:	9a a1       	ldd	r25, Y+34	; 0x22
    238c:	9e 8f       	std	Y+30, r25	; 0x1e
    238e:	8d 8f       	std	Y+29, r24	; 0x1d
    2390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2392:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_sendCommand+0x682>
    2398:	9e 8f       	std	Y+30, r25	; 0x1e
    239a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    239c:	fe 01       	movw	r30, r28
    239e:	ed 59       	subi	r30, 0x9D	; 157
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 81       	ld	r24, Z
    23a4:	98 2f       	mov	r25, r24
    23a6:	91 70       	andi	r25, 0x01	; 1
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	63 e0       	ldi	r22, 0x03	; 3
    23ac:	49 2f       	mov	r20, r25
    23ae:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    23b2:	fe 01       	movw	r30, r28
    23b4:	ed 59       	subi	r30, 0x9D	; 157
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	82 70       	andi	r24, 0x02	; 2
    23c0:	90 70       	andi	r25, 0x00	; 0
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	98 2f       	mov	r25, r24
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	64 e0       	ldi	r22, 0x04	; 4
    23cc:	49 2f       	mov	r20, r25
    23ce:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    23d2:	fe 01       	movw	r30, r28
    23d4:	ed 59       	subi	r30, 0x9D	; 157
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	84 70       	andi	r24, 0x04	; 4
    23e0:	90 70       	andi	r25, 0x00	; 0
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	98 2f       	mov	r25, r24
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	65 e0       	ldi	r22, 0x05	; 5
    23f0:	49 2f       	mov	r20, r25
    23f2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    23f6:	fe 01       	movw	r30, r28
    23f8:	ed 59       	subi	r30, 0x9D	; 157
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	88 70       	andi	r24, 0x08	; 8
    2404:	90 70       	andi	r25, 0x00	; 0
    2406:	95 95       	asr	r25
    2408:	87 95       	ror	r24
    240a:	95 95       	asr	r25
    240c:	87 95       	ror	r24
    240e:	95 95       	asr	r25
    2410:	87 95       	ror	r24
    2412:	98 2f       	mov	r25, r24
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	66 e0       	ldi	r22, 0x06	; 6
    2418:	49 2f       	mov	r20, r25
    241a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e8       	ldi	r26, 0x80	; 128
    2424:	bf e3       	ldi	r27, 0x3F	; 63
    2426:	89 8f       	std	Y+25, r24	; 0x19
    2428:	9a 8f       	std	Y+26, r25	; 0x1a
    242a:	ab 8f       	std	Y+27, r26	; 0x1b
    242c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	69 8d       	ldd	r22, Y+25	; 0x19
    2430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a e7       	ldi	r20, 0x7A	; 122
    243c:	55 e4       	ldi	r21, 0x45	; 69
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	8d 8b       	std	Y+21, r24	; 0x15
    2448:	9e 8b       	std	Y+22, r25	; 0x16
    244a:	af 8b       	std	Y+23, r26	; 0x17
    244c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9c 8b       	std	Y+20, r25	; 0x14
    246c:	8b 8b       	std	Y+19, r24	; 0x13
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2470:	6d 89       	ldd	r22, Y+21	; 0x15
    2472:	7e 89       	ldd	r23, Y+22	; 0x16
    2474:	8f 89       	ldd	r24, Y+23	; 0x17
    2476:	98 8d       	ldd	r25, Y+24	; 0x18
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	69 8d       	ldd	r22, Y+25	; 0x19
    248a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	9c 8b       	std	Y+20, r25	; 0x14
    24ae:	8b 8b       	std	Y+19, r24	; 0x13
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <LCD_sendCommand+0x7be>
    24b2:	80 e9       	ldi	r24, 0x90	; 144
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	9a 8b       	std	Y+18, r25	; 0x12
    24b8:	89 8b       	std	Y+17, r24	; 0x11
    24ba:	89 89       	ldd	r24, Y+17	; 0x11
    24bc:	9a 89       	ldd	r25, Y+18	; 0x12
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_sendCommand+0x7ac>
    24c2:	9a 8b       	std	Y+18, r25	; 0x12
    24c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8b 89       	ldd	r24, Y+19	; 0x13
    24c8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <LCD_sendCommand+0x7a0>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	6d 89       	ldd	r22, Y+21	; 0x15
    24dc:	7e 89       	ldd	r23, Y+22	; 0x16
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	98 8d       	ldd	r25, Y+24	; 0x18
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
    24ee:	8b 89       	ldd	r24, Y+19	; 0x13
    24f0:	9c 89       	ldd	r25, Y+20	; 0x14
    24f2:	98 8b       	std	Y+16, r25	; 0x10
    24f4:	8f 87       	std	Y+15, r24	; 0x0f
    24f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f8:	98 89       	ldd	r25, Y+16	; 0x10
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_sendCommand+0x7e8>
    24fe:	98 8b       	std	Y+16, r25	; 0x10
    2500:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	62 e0       	ldi	r22, 0x02	; 2
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8b 87       	std	Y+11, r24	; 0x0b
    2516:	9c 87       	std	Y+12, r25	; 0x0c
    2518:	ad 87       	std	Y+13, r26	; 0x0d
    251a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a e7       	ldi	r20, 0x7A	; 122
    252a:	55 e4       	ldi	r21, 0x45	; 69
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	a9 87       	std	Y+9, r26	; 0x09
    253a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_sendCommand+0x8ac>
    25a0:	80 e9       	ldi	r24, 0x90	; 144
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_sendCommand+0x89a>
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <LCD_sendCommand+0x88e>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_sendCommand+0x8d6>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25f0:	cd 59       	subi	r28, 0x9D	; 157
    25f2:	df 4f       	sbci	r29, 0xFF	; 255
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	08 95       	ret

00002608 <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	c3 56       	subi	r28, 0x63	; 99
    2616:	d0 40       	sbci	r29, 0x00	; 0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	fe 01       	movw	r30, r28
    2624:	ed 59       	subi	r30, 0x9D	; 157
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2634:	fe 01       	movw	r30, r28
    2636:	e1 5a       	subi	r30, 0xA1	; 161
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	8e 01       	movw	r16, r28
    264c:	05 5a       	subi	r16, 0xA5	; 165
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	fe 01       	movw	r30, r28
    2652:	e1 5a       	subi	r30, 0xA1	; 161
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a e7       	ldi	r20, 0x7A	; 122
    2664:	55 e4       	ldi	r21, 0x45	; 69
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	f8 01       	movw	r30, r16
    2670:	80 83       	st	Z, r24
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	a2 83       	std	Z+2, r26	; 0x02
    2676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2678:	fe 01       	movw	r30, r28
    267a:	e5 5a       	subi	r30, 0xA5	; 165
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	44 f4       	brge	.+16     	; 0x26a6 <LCD_displayChar+0x9e>
		__ticks = 1;
    2696:	fe 01       	movw	r30, r28
    2698:	e7 5a       	subi	r30, 0xA7	; 167
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	64 c0       	rjmp	.+200    	; 0x276e <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    26a6:	fe 01       	movw	r30, r28
    26a8:	e5 5a       	subi	r30, 0xA5	; 165
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	0c f0       	brlt	.+2      	; 0x26c6 <LCD_displayChar+0xbe>
    26c4:	43 c0       	rjmp	.+134    	; 0x274c <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	fe 01       	movw	r30, r28
    26c8:	e1 5a       	subi	r30, 0xA1	; 161
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8e 01       	movw	r16, r28
    26e6:	07 5a       	subi	r16, 0xA7	; 167
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	1f c0       	rjmp	.+62     	; 0x273c <LCD_displayChar+0x134>
    26fe:	fe 01       	movw	r30, r28
    2700:	e9 5a       	subi	r30, 0xA9	; 169
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 e9       	ldi	r24, 0x90	; 144
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	fe 01       	movw	r30, r28
    270e:	e9 5a       	subi	r30, 0xA9	; 169
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_displayChar+0x10e>
    271a:	fe 01       	movw	r30, r28
    271c:	e9 5a       	subi	r30, 0xA9	; 169
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	de 01       	movw	r26, r28
    2726:	a7 5a       	subi	r26, 0xA7	; 167
    2728:	bf 4f       	sbci	r27, 0xFF	; 255
    272a:	fe 01       	movw	r30, r28
    272c:	e7 5a       	subi	r30, 0xA7	; 167
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	11 96       	adiw	r26, 0x01	; 1
    2738:	9c 93       	st	X, r25
    273a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	fe 01       	movw	r30, r28
    273e:	e7 5a       	subi	r30, 0xA7	; 167
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	d1 f6       	brne	.-76     	; 0x26fe <LCD_displayChar+0xf6>
    274a:	27 c0       	rjmp	.+78     	; 0x279a <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	8e 01       	movw	r16, r28
    274e:	07 5a       	subi	r16, 0xA7	; 167
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	e5 5a       	subi	r30, 0xA5	; 165
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	f8 01       	movw	r30, r16
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	de 01       	movw	r26, r28
    2770:	ab 5a       	subi	r26, 0xAB	; 171
    2772:	bf 4f       	sbci	r27, 0xFF	; 255
    2774:	fe 01       	movw	r30, r28
    2776:	e7 5a       	subi	r30, 0xA7	; 167
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	8d 93       	st	X+, r24
    2780:	9c 93       	st	X, r25
    2782:	fe 01       	movw	r30, r28
    2784:	eb 5a       	subi	r30, 0xAB	; 171
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_displayChar+0x184>
    2790:	fe 01       	movw	r30, r28
    2792:	eb 5a       	subi	r30, 0xAB	; 171
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    27a4:	fe 01       	movw	r30, r28
    27a6:	ef 5a       	subi	r30, 0xAF	; 175
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	bf e3       	ldi	r27, 0x3F	; 63
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	8e 01       	movw	r16, r28
    27bc:	03 5b       	subi	r16, 0xB3	; 179
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	ef 5a       	subi	r30, 0xAF	; 175
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a e7       	ldi	r20, 0x7A	; 122
    27d4:	55 e4       	ldi	r21, 0x45	; 69
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	f8 01       	movw	r30, r16
    27e0:	80 83       	st	Z, r24
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	a2 83       	std	Z+2, r26	; 0x02
    27e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e8:	fe 01       	movw	r30, r28
    27ea:	e3 5b       	subi	r30, 0xB3	; 179
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	44 f4       	brge	.+16     	; 0x2816 <LCD_displayChar+0x20e>
		__ticks = 1;
    2806:	fe 01       	movw	r30, r28
    2808:	e5 5b       	subi	r30, 0xB5	; 181
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	64 c0       	rjmp	.+200    	; 0x28de <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    2816:	fe 01       	movw	r30, r28
    2818:	e3 5b       	subi	r30, 0xB3	; 179
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	0c f0       	brlt	.+2      	; 0x2836 <LCD_displayChar+0x22e>
    2834:	43 c0       	rjmp	.+134    	; 0x28bc <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	fe 01       	movw	r30, r28
    2838:	ef 5a       	subi	r30, 0xAF	; 175
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8e 01       	movw	r16, r28
    2856:	05 5b       	subi	r16, 0xB5	; 181
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	1f c0       	rjmp	.+62     	; 0x28ac <LCD_displayChar+0x2a4>
    286e:	fe 01       	movw	r30, r28
    2870:	e7 5b       	subi	r30, 0xB7	; 183
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 e9       	ldi	r24, 0x90	; 144
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e7 5b       	subi	r30, 0xB7	; 183
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_displayChar+0x27e>
    288a:	fe 01       	movw	r30, r28
    288c:	e7 5b       	subi	r30, 0xB7	; 183
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	de 01       	movw	r26, r28
    2896:	a5 5b       	subi	r26, 0xB5	; 181
    2898:	bf 4f       	sbci	r27, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	e5 5b       	subi	r30, 0xB5	; 181
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	9c 93       	st	X, r25
    28aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e5 5b       	subi	r30, 0xB5	; 181
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	d1 f6       	brne	.-76     	; 0x286e <LCD_displayChar+0x266>
    28ba:	27 c0       	rjmp	.+78     	; 0x290a <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	8e 01       	movw	r16, r28
    28be:	05 5b       	subi	r16, 0xB5	; 181
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	e3 5b       	subi	r30, 0xB3	; 179
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	de 01       	movw	r26, r28
    28e0:	a9 5b       	subi	r26, 0xB9	; 185
    28e2:	bf 4f       	sbci	r27, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e5 5b       	subi	r30, 0xB5	; 181
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	8d 93       	st	X+, r24
    28f0:	9c 93       	st	X, r25
    28f2:	fe 01       	movw	r30, r28
    28f4:	e9 5b       	subi	r30, 0xB9	; 185
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_displayChar+0x2f4>
    2900:	fe 01       	movw	r30, r28
    2902:	e9 5b       	subi	r30, 0xB9	; 185
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    290a:	fe 01       	movw	r30, r28
    290c:	ed 59       	subi	r30, 0x9D	; 157
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	80 71       	andi	r24, 0x10	; 16
    2918:	90 70       	andi	r25, 0x00	; 0
    291a:	95 95       	asr	r25
    291c:	87 95       	ror	r24
    291e:	95 95       	asr	r25
    2920:	87 95       	ror	r24
    2922:	95 95       	asr	r25
    2924:	87 95       	ror	r24
    2926:	95 95       	asr	r25
    2928:	87 95       	ror	r24
    292a:	98 2f       	mov	r25, r24
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	63 e0       	ldi	r22, 0x03	; 3
    2930:	49 2f       	mov	r20, r25
    2932:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    2936:	fe 01       	movw	r30, r28
    2938:	ed 59       	subi	r30, 0x9D	; 157
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	80 72       	andi	r24, 0x20	; 32
    2944:	90 70       	andi	r25, 0x00	; 0
    2946:	95 95       	asr	r25
    2948:	87 95       	ror	r24
    294a:	95 95       	asr	r25
    294c:	87 95       	ror	r24
    294e:	95 95       	asr	r25
    2950:	87 95       	ror	r24
    2952:	95 95       	asr	r25
    2954:	87 95       	ror	r24
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	98 2f       	mov	r25, r24
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	64 e0       	ldi	r22, 0x04	; 4
    2960:	49 2f       	mov	r20, r25
    2962:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    2966:	fe 01       	movw	r30, r28
    2968:	ed 59       	subi	r30, 0x9D	; 157
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	80 74       	andi	r24, 0x40	; 64
    2974:	90 70       	andi	r25, 0x00	; 0
    2976:	08 2e       	mov	r0, r24
    2978:	89 2f       	mov	r24, r25
    297a:	00 0c       	add	r0, r0
    297c:	88 1f       	adc	r24, r24
    297e:	99 0b       	sbc	r25, r25
    2980:	00 0c       	add	r0, r0
    2982:	88 1f       	adc	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	98 2f       	mov	r25, r24
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	65 e0       	ldi	r22, 0x05	; 5
    298c:	49 2f       	mov	r20, r25
    298e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    2992:	fe 01       	movw	r30, r28
    2994:	ed 59       	subi	r30, 0x9D	; 157
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	98 2f       	mov	r25, r24
    299c:	99 1f       	adc	r25, r25
    299e:	99 27       	eor	r25, r25
    29a0:	99 1f       	adc	r25, r25
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	66 e0       	ldi	r22, 0x06	; 6
    29a6:	49 2f       	mov	r20, r25
    29a8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    29ac:	fe 01       	movw	r30, r28
    29ae:	ed 5b       	subi	r30, 0xBD	; 189
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	80 83       	st	Z, r24
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	a2 83       	std	Z+2, r26	; 0x02
    29c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	8e 01       	movw	r16, r28
    29c4:	01 5c       	subi	r16, 0xC1	; 193
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	ed 5b       	subi	r30, 0xBD	; 189
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a e7       	ldi	r20, 0x7A	; 122
    29dc:	55 e4       	ldi	r21, 0x45	; 69
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	f8 01       	movw	r30, r16
    29e8:	80 83       	st	Z, r24
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	a2 83       	std	Z+2, r26	; 0x02
    29ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f0:	fe 01       	movw	r30, r28
    29f2:	ff 96       	adiw	r30, 0x3f	; 63
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <LCD_displayChar+0x40e>
		__ticks = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9e af       	std	Y+62, r25	; 0x3e
    2a12:	8d af       	std	Y+61, r24	; 0x3d
    2a14:	46 c0       	rjmp	.+140    	; 0x2aa2 <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    2a16:	fe 01       	movw	r30, r28
    2a18:	ff 96       	adiw	r30, 0x3f	; 63
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	4f e7       	ldi	r20, 0x7F	; 127
    2a28:	57 e4       	ldi	r21, 0x47	; 71
    2a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2e:	18 16       	cp	r1, r24
    2a30:	64 f5       	brge	.+88     	; 0x2a8a <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a32:	fe 01       	movw	r30, r28
    2a34:	ed 5b       	subi	r30, 0xBD	; 189
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9e af       	std	Y+62, r25	; 0x3e
    2a5e:	8d af       	std	Y+61, r24	; 0x3d
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <LCD_displayChar+0x478>
    2a62:	80 e9       	ldi	r24, 0x90	; 144
    2a64:	91 e0       	ldi	r25, 0x01	; 1
    2a66:	9c af       	std	Y+60, r25	; 0x3c
    2a68:	8b af       	std	Y+59, r24	; 0x3b
    2a6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_displayChar+0x466>
    2a72:	9c af       	std	Y+60, r25	; 0x3c
    2a74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9e af       	std	Y+62, r25	; 0x3e
    2a7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <LCD_displayChar+0x45a>
    2a88:	16 c0       	rjmp	.+44     	; 0x2ab6 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ff 96       	adiw	r30, 0x3f	; 63
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9e af       	std	Y+62, r25	; 0x3e
    2aa0:	8d af       	std	Y+61, r24	; 0x3d
    2aa2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aa4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aa6:	9a af       	std	Y+58, r25	; 0x3a
    2aa8:	89 af       	std	Y+57, r24	; 0x39
    2aaa:	89 ad       	ldd	r24, Y+57	; 0x39
    2aac:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_displayChar+0x4a6>
    2ab2:	9a af       	std	Y+58, r25	; 0x3a
    2ab4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	62 e0       	ldi	r22, 0x02	; 2
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	a0 e8       	ldi	r26, 0x80	; 128
    2ac6:	bf e3       	ldi	r27, 0x3F	; 63
    2ac8:	8d ab       	std	Y+53, r24	; 0x35
    2aca:	9e ab       	std	Y+54, r25	; 0x36
    2acc:	af ab       	std	Y+55, r26	; 0x37
    2ace:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ad6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4a e7       	ldi	r20, 0x7A	; 122
    2ade:	55 e4       	ldi	r21, 0x45	; 69
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	89 ab       	std	Y+49, r24	; 0x31
    2aea:	9a ab       	std	Y+50, r25	; 0x32
    2aec:	ab ab       	std	Y+51, r26	; 0x33
    2aee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af0:	69 a9       	ldd	r22, Y+49	; 0x31
    2af2:	7a a9       	ldd	r23, Y+50	; 0x32
    2af4:	8b a9       	ldd	r24, Y+51	; 0x33
    2af6:	9c a9       	ldd	r25, Y+52	; 0x34
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e8       	ldi	r20, 0x80	; 128
    2afe:	5f e3       	ldi	r21, 0x3F	; 63
    2b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	2c f4       	brge	.+10     	; 0x2b12 <LCD_displayChar+0x50a>
		__ticks = 1;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	98 ab       	std	Y+48, r25	; 0x30
    2b0e:	8f a7       	std	Y+47, r24	; 0x2f
    2b10:	3f c0       	rjmp	.+126    	; 0x2b90 <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    2b12:	69 a9       	ldd	r22, Y+49	; 0x31
    2b14:	7a a9       	ldd	r23, Y+50	; 0x32
    2b16:	8b a9       	ldd	r24, Y+51	; 0x33
    2b18:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	3f ef       	ldi	r19, 0xFF	; 255
    2b1e:	4f e7       	ldi	r20, 0x7F	; 127
    2b20:	57 e4       	ldi	r21, 0x47	; 71
    2b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b26:	18 16       	cp	r1, r24
    2b28:	4c f5       	brge	.+82     	; 0x2b7c <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b30:	98 ad       	ldd	r25, Y+56	; 0x38
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e2       	ldi	r20, 0x20	; 32
    2b38:	51 e4       	ldi	r21, 0x41	; 65
    2b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	bc 01       	movw	r22, r24
    2b44:	cd 01       	movw	r24, r26
    2b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
    2b52:	0f c0       	rjmp	.+30     	; 0x2b72 <LCD_displayChar+0x56a>
    2b54:	80 e9       	ldi	r24, 0x90	; 144
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	9e a7       	std	Y+46, r25	; 0x2e
    2b5a:	8d a7       	std	Y+45, r24	; 0x2d
    2b5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <LCD_displayChar+0x558>
    2b64:	9e a7       	std	Y+46, r25	; 0x2e
    2b66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	98 ab       	std	Y+48, r25	; 0x30
    2b70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b74:	98 a9       	ldd	r25, Y+48	; 0x30
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	69 f7       	brne	.-38     	; 0x2b54 <LCD_displayChar+0x54c>
    2b7a:	14 c0       	rjmp	.+40     	; 0x2ba4 <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b80:	8b a9       	ldd	r24, Y+51	; 0x33
    2b82:	9c a9       	ldd	r25, Y+52	; 0x34
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	98 ab       	std	Y+48, r25	; 0x30
    2b8e:	8f a7       	std	Y+47, r24	; 0x2f
    2b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b92:	98 a9       	ldd	r25, Y+48	; 0x30
    2b94:	9c a7       	std	Y+44, r25	; 0x2c
    2b96:	8b a7       	std	Y+43, r24	; 0x2b
    2b98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_displayChar+0x594>
    2ba0:	9c a7       	std	Y+44, r25	; 0x2c
    2ba2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	62 e0       	ldi	r22, 0x02	; 2
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a0 e8       	ldi	r26, 0x80	; 128
    2bb4:	bf e3       	ldi	r27, 0x3F	; 63
    2bb6:	8f a3       	std	Y+39, r24	; 0x27
    2bb8:	98 a7       	std	Y+40, r25	; 0x28
    2bba:	a9 a7       	std	Y+41, r26	; 0x29
    2bbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4a e7       	ldi	r20, 0x7A	; 122
    2bcc:	55 e4       	ldi	r21, 0x45	; 69
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	8b a3       	std	Y+35, r24	; 0x23
    2bd8:	9c a3       	std	Y+36, r25	; 0x24
    2bda:	ad a3       	std	Y+37, r26	; 0x25
    2bdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bde:	6b a1       	ldd	r22, Y+35	; 0x23
    2be0:	7c a1       	ldd	r23, Y+36	; 0x24
    2be2:	8d a1       	ldd	r24, Y+37	; 0x25
    2be4:	9e a1       	ldd	r25, Y+38	; 0x26
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e8       	ldi	r20, 0x80	; 128
    2bec:	5f e3       	ldi	r21, 0x3F	; 63
    2bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf2:	88 23       	and	r24, r24
    2bf4:	2c f4       	brge	.+10     	; 0x2c00 <LCD_displayChar+0x5f8>
		__ticks = 1;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9a a3       	std	Y+34, r25	; 0x22
    2bfc:	89 a3       	std	Y+33, r24	; 0x21
    2bfe:	3f c0       	rjmp	.+126    	; 0x2c7e <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    2c00:	6b a1       	ldd	r22, Y+35	; 0x23
    2c02:	7c a1       	ldd	r23, Y+36	; 0x24
    2c04:	8d a1       	ldd	r24, Y+37	; 0x25
    2c06:	9e a1       	ldd	r25, Y+38	; 0x26
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	3f ef       	ldi	r19, 0xFF	; 255
    2c0c:	4f e7       	ldi	r20, 0x7F	; 127
    2c0e:	57 e4       	ldi	r21, 0x47	; 71
    2c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c14:	18 16       	cp	r1, r24
    2c16:	4c f5       	brge	.+82     	; 0x2c6a <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c18:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <LCD_displayChar+0x658>
    2c42:	80 e9       	ldi	r24, 0x90	; 144
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	98 a3       	std	Y+32, r25	; 0x20
    2c48:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <LCD_displayChar+0x646>
    2c52:	98 a3       	std	Y+32, r25	; 0x20
    2c54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c56:	89 a1       	ldd	r24, Y+33	; 0x21
    2c58:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	9a a3       	std	Y+34, r25	; 0x22
    2c5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c60:	89 a1       	ldd	r24, Y+33	; 0x21
    2c62:	9a a1       	ldd	r25, Y+34	; 0x22
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	69 f7       	brne	.-38     	; 0x2c42 <LCD_displayChar+0x63a>
    2c68:	14 c0       	rjmp	.+40     	; 0x2c92 <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c70:	9e a1       	ldd	r25, Y+38	; 0x26
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	9a a3       	std	Y+34, r25	; 0x22
    2c7c:	89 a3       	std	Y+33, r24	; 0x21
    2c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c80:	9a a1       	ldd	r25, Y+34	; 0x22
    2c82:	9e 8f       	std	Y+30, r25	; 0x1e
    2c84:	8d 8f       	std	Y+29, r24	; 0x1d
    2c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_displayChar+0x682>
    2c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    2c92:	fe 01       	movw	r30, r28
    2c94:	ed 59       	subi	r30, 0x9D	; 157
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	98 2f       	mov	r25, r24
    2c9c:	91 70       	andi	r25, 0x01	; 1
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	63 e0       	ldi	r22, 0x03	; 3
    2ca2:	49 2f       	mov	r20, r25
    2ca4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 59       	subi	r30, 0x9D	; 157
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	82 70       	andi	r24, 0x02	; 2
    2cb6:	90 70       	andi	r25, 0x00	; 0
    2cb8:	95 95       	asr	r25
    2cba:	87 95       	ror	r24
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	64 e0       	ldi	r22, 0x04	; 4
    2cc2:	49 2f       	mov	r20, r25
    2cc4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ed 59       	subi	r30, 0x9D	; 157
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	84 70       	andi	r24, 0x04	; 4
    2cd6:	90 70       	andi	r25, 0x00	; 0
    2cd8:	95 95       	asr	r25
    2cda:	87 95       	ror	r24
    2cdc:	95 95       	asr	r25
    2cde:	87 95       	ror	r24
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	65 e0       	ldi	r22, 0x05	; 5
    2ce6:	49 2f       	mov	r20, r25
    2ce8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    2cec:	fe 01       	movw	r30, r28
    2cee:	ed 59       	subi	r30, 0x9D	; 157
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	88 70       	andi	r24, 0x08	; 8
    2cfa:	90 70       	andi	r25, 0x00	; 0
    2cfc:	95 95       	asr	r25
    2cfe:	87 95       	ror	r24
    2d00:	95 95       	asr	r25
    2d02:	87 95       	ror	r24
    2d04:	95 95       	asr	r25
    2d06:	87 95       	ror	r24
    2d08:	98 2f       	mov	r25, r24
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	66 e0       	ldi	r22, 0x06	; 6
    2d0e:	49 2f       	mov	r20, r25
    2d10:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a0 e8       	ldi	r26, 0x80	; 128
    2d1a:	bf e3       	ldi	r27, 0x3F	; 63
    2d1c:	89 8f       	std	Y+25, r24	; 0x19
    2d1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d20:	ab 8f       	std	Y+27, r26	; 0x1b
    2d22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d24:	69 8d       	ldd	r22, Y+25	; 0x19
    2d26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a e7       	ldi	r20, 0x7A	; 122
    2d32:	55 e4       	ldi	r21, 0x45	; 69
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8d 8b       	std	Y+21, r24	; 0x15
    2d3e:	9e 8b       	std	Y+22, r25	; 0x16
    2d40:	af 8b       	std	Y+23, r26	; 0x17
    2d42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d44:	6d 89       	ldd	r22, Y+21	; 0x15
    2d46:	7e 89       	ldd	r23, Y+22	; 0x16
    2d48:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <LCD_displayChar+0x75e>
		__ticks = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9c 8b       	std	Y+20, r25	; 0x14
    2d62:	8b 8b       	std	Y+19, r24	; 0x13
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    2d66:	6d 89       	ldd	r22, Y+21	; 0x15
    2d68:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	3f ef       	ldi	r19, 0xFF	; 255
    2d72:	4f e7       	ldi	r20, 0x7F	; 127
    2d74:	57 e4       	ldi	r21, 0x47	; 71
    2d76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d7a:	18 16       	cp	r1, r24
    2d7c:	4c f5       	brge	.+82     	; 0x2dd0 <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e2       	ldi	r20, 0x20	; 32
    2d8c:	51 e4       	ldi	r21, 0x41	; 65
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9c 8b       	std	Y+20, r25	; 0x14
    2da4:	8b 8b       	std	Y+19, r24	; 0x13
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <LCD_displayChar+0x7be>
    2da8:	80 e9       	ldi	r24, 0x90	; 144
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	9a 8b       	std	Y+18, r25	; 0x12
    2dae:	89 8b       	std	Y+17, r24	; 0x11
    2db0:	89 89       	ldd	r24, Y+17	; 0x11
    2db2:	9a 89       	ldd	r25, Y+18	; 0x12
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <LCD_displayChar+0x7ac>
    2db8:	9a 8b       	std	Y+18, r25	; 0x12
    2dba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9c 8b       	std	Y+20, r25	; 0x14
    2dc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <LCD_displayChar+0x7a0>
    2dce:	14 c0       	rjmp	.+40     	; 0x2df8 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9c 8b       	std	Y+20, r25	; 0x14
    2de2:	8b 8b       	std	Y+19, r24	; 0x13
    2de4:	8b 89       	ldd	r24, Y+19	; 0x13
    2de6:	9c 89       	ldd	r25, Y+20	; 0x14
    2de8:	98 8b       	std	Y+16, r25	; 0x10
    2dea:	8f 87       	std	Y+15, r24	; 0x0f
    2dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dee:	98 89       	ldd	r25, Y+16	; 0x10
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <LCD_displayChar+0x7e8>
    2df4:	98 8b       	std	Y+16, r25	; 0x10
    2df6:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	62 e0       	ldi	r22, 0x02	; 2
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e8       	ldi	r26, 0x80	; 128
    2e08:	bf e3       	ldi	r27, 0x3F	; 63
    2e0a:	8b 87       	std	Y+11, r24	; 0x0b
    2e0c:	9c 87       	std	Y+12, r25	; 0x0c
    2e0e:	ad 87       	std	Y+13, r26	; 0x0d
    2e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a e7       	ldi	r20, 0x7A	; 122
    2e20:	55 e4       	ldi	r21, 0x45	; 69
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8f 83       	std	Y+7, r24	; 0x07
    2e2c:	98 87       	std	Y+8, r25	; 0x08
    2e2e:	a9 87       	std	Y+9, r26	; 0x09
    2e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <LCD_displayChar+0x84c>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <LCD_displayChar+0x8ac>
    2e96:	80 e9       	ldi	r24, 0x90	; 144
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <LCD_displayChar+0x89a>
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <LCD_displayChar+0x88e>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <LCD_displayChar+0x8d6>
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ee6:	cd 59       	subi	r28, 0x9D	; 157
    2ee8:	df 4f       	sbci	r29, 0xFF	; 255
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	08 95       	ret

00002efe <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <LCD_displayString+0x6>
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	9b 83       	std	Y+3, r25	; 0x03
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f0e:	19 82       	std	Y+1, r1	; 0x01
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	e2 0f       	add	r30, r18
    2f20:	f3 1f       	adc	r31, r19
    2f22:	80 81       	ld	r24, Z
    2f24:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_displayChar>
		i++;
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	9b 81       	ldd	r25, Y+3	; 0x03
    2f38:	fc 01       	movw	r30, r24
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	80 81       	ld	r24, Z
    2f40:	88 23       	and	r24, r24
    2f42:	39 f7       	brne	.-50     	; 0x2f12 <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <LCD_moveCursor+0x6>
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <LCD_moveCursor+0x8>
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	8a 83       	std	Y+2, r24	; 0x02
    2f60:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	28 2f       	mov	r18, r24
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	3d 83       	std	Y+5, r19	; 0x05
    2f6a:	2c 83       	std	Y+4, r18	; 0x04
    2f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	91 05       	cpc	r25, r1
    2f74:	c1 f0       	breq	.+48     	; 0x2fa6 <LCD_moveCursor+0x56>
    2f76:	2c 81       	ldd	r18, Y+4	; 0x04
    2f78:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7a:	22 30       	cpi	r18, 0x02	; 2
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <LCD_moveCursor+0x3a>
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	61 f0       	breq	.+24     	; 0x2fa0 <LCD_moveCursor+0x50>
    2f88:	19 c0       	rjmp	.+50     	; 0x2fbc <LCD_moveCursor+0x6c>
    2f8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f8e:	22 30       	cpi	r18, 0x02	; 2
    2f90:	31 05       	cpc	r19, r1
    2f92:	69 f0       	breq	.+26     	; 0x2fae <LCD_moveCursor+0x5e>
    2f94:	8c 81       	ldd	r24, Y+4	; 0x04
    2f96:	9d 81       	ldd	r25, Y+5	; 0x05
    2f98:	83 30       	cpi	r24, 0x03	; 3
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	61 f0       	breq	.+24     	; 0x2fb6 <LCD_moveCursor+0x66>
    2f9e:	0e c0       	rjmp	.+28     	; 0x2fbc <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	0b c0       	rjmp	.+22     	; 0x2fbc <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	80 5c       	subi	r24, 0xC0	; 192
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	07 c0       	rjmp	.+14     	; 0x2fbc <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	80 5f       	subi	r24, 0xF0	; 240
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	80 5b       	subi	r24, 0xB0	; 176
    2fba:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	80 68       	ori	r24, 0x80	; 128
    2fc0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <LCD_displayStringRowColumn+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <LCD_displayStringRowColumn+0x8>
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	6a 83       	std	Y+2, r22	; 0x02
    2fe4:	5c 83       	std	Y+4, r21	; 0x04
    2fe6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	6a 81       	ldd	r22, Y+2	; 0x02
    2fec:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <LCD_moveCursor>
	LCD_displayString(str);
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayString>
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint16 data){
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	62 97       	sbiw	r28, 0x12	; 18
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	9a 8b       	std	Y+18, r25	; 0x12
    301c:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    301e:	89 89       	ldd	r24, Y+17	; 0x11
    3020:	9a 89       	ldd	r25, Y+18	; 0x12
    3022:	9e 01       	movw	r18, r28
    3024:	2f 5f       	subi	r18, 0xFF	; 255
    3026:	3f 4f       	sbci	r19, 0xFF	; 255
    3028:	b9 01       	movw	r22, r18
    302a:	4a e0       	ldi	r20, 0x0A	; 10
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	0e 94 ca 19 	call	0x3394	; 0x3394 <itoa>
	LCD_displayString(buff);
    3032:	ce 01       	movw	r24, r28
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayString>
}
    303a:	62 96       	adiw	r28, 0x12	; 18
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_sendCommand>
}
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <Buzzer_init>:
#include "buzzer.h"

/*
 * Initializes the buzzer pin direction and turn off the buzzer
 */
void Buzzer_init(void){
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62

	/* set buzzer pin direction to be output */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	65 e0       	ldi	r22, 0x05	; 5
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

}
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <Buzzer_on>:

/*
 * Activates the buzzer.
 */
void Buzzer_on(void){
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62

	/* activate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,HIGH);
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	65 e0       	ldi	r22, 0x05	; 5
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>

}
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <Buzzer_off>:

/*
 * Deactivates the buzzer.
 */
void Buzzer_off(void){
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62

	/* deactivate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOW);
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	65 e0       	ldi	r22, 0x05	; 5
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>

}
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <main>:
#include  "../HAL/LCD_DRIVER/lcd.h"
#include "../HAL/LED_DRIVER/led.h"
#include "../HAL/US_DRIVER/us.h"

/* Main Function */
int main (void){
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	62 97       	sbiw	r28, 0x12	; 18
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61

	/* Application Initialization */
	LCD_init();
    30bc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_init>
	LEDS_init();
    30c0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LEDS_init>
	Buzzer_init();
    30c4:	0e 94 30 18 	call	0x3060	; 0x3060 <Buzzer_init>
	Ultrasonic_init();
    30c8:	0e 94 46 0b 	call	0x168c	; 0x168c <Ultrasonic_init>

	/* clear screen @ start*/
	LCD_clearScreen();
    30cc:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_clearScreen>
	/* Show Reading on screen */
	LCD_displayStringRowColumn(0,0,"Distance = ");
    30d0:	20 e6       	ldi	r18, 0x60	; 96
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	a9 01       	movw	r20, r18
    30da:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LCD_displayStringRowColumn>

	/* local variables definitions */
	uint16 US_distanceReading ;
	uint16 US_distanceReading_prevState = 0;
    30de:	18 8a       	std	Y+16, r1	; 0x10
    30e0:	1f 86       	std	Y+15, r1	; 0x0f
	while(1){

		/* Application Code */
		US_distanceReading = Ultrasonic_readDistance();
    30e2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Ultrasonic_readDistance>
    30e6:	9a 8b       	std	Y+18, r25	; 0x12
    30e8:	89 8b       	std	Y+17, r24	; 0x11

		if(US_distanceReading <= 5){
    30ea:	89 89       	ldd	r24, Y+17	; 0x11
    30ec:	9a 89       	ldd	r25, Y+18	; 0x12
    30ee:	86 30       	cpi	r24, 0x06	; 6
    30f0:	91 05       	cpc	r25, r1
    30f2:	08 f0       	brcs	.+2      	; 0x30f6 <main+0x4e>
    30f4:	84 c0       	rjmp	.+264    	; 0x31fe <main+0x156>
			/* show threat level */
			/* Flash LEDs */
			LED_on(RED_LED_ID);
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
			LED_on(GREEN_LED_ID);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
			LED_on(BLUE_LED_ID);
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	aa ef       	ldi	r26, 0xFA	; 250
    310e:	b3 e4       	ldi	r27, 0x43	; 67
    3110:	8b 87       	std	Y+11, r24	; 0x0b
    3112:	9c 87       	std	Y+12, r25	; 0x0c
    3114:	ad 87       	std	Y+13, r26	; 0x0d
    3116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3118:	6b 85       	ldd	r22, Y+11	; 0x0b
    311a:	7c 85       	ldd	r23, Y+12	; 0x0c
    311c:	8d 85       	ldd	r24, Y+13	; 0x0d
    311e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	4a e7       	ldi	r20, 0x7A	; 122
    3126:	55 e4       	ldi	r21, 0x45	; 69
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	8f 83       	std	Y+7, r24	; 0x07
    3132:	98 87       	std	Y+8, r25	; 0x08
    3134:	a9 87       	std	Y+9, r26	; 0x09
    3136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3138:	6f 81       	ldd	r22, Y+7	; 0x07
    313a:	78 85       	ldd	r23, Y+8	; 0x08
    313c:	89 85       	ldd	r24, Y+9	; 0x09
    313e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e8       	ldi	r20, 0x80	; 128
    3146:	5f e3       	ldi	r21, 0x3F	; 63
    3148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314c:	88 23       	and	r24, r24
    314e:	2c f4       	brge	.+10     	; 0x315a <main+0xb2>
		__ticks = 1;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	3f c0       	rjmp	.+126    	; 0x31d8 <main+0x130>
	else if (__tmp > 65535)
    315a:	6f 81       	ldd	r22, Y+7	; 0x07
    315c:	78 85       	ldd	r23, Y+8	; 0x08
    315e:	89 85       	ldd	r24, Y+9	; 0x09
    3160:	9a 85       	ldd	r25, Y+10	; 0x0a
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	3f ef       	ldi	r19, 0xFF	; 255
    3166:	4f e7       	ldi	r20, 0x7F	; 127
    3168:	57 e4       	ldi	r21, 0x47	; 71
    316a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    316e:	18 16       	cp	r1, r24
    3170:	4c f5       	brge	.+82     	; 0x31c4 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3172:	6b 85       	ldd	r22, Y+11	; 0x0b
    3174:	7c 85       	ldd	r23, Y+12	; 0x0c
    3176:	8d 85       	ldd	r24, Y+13	; 0x0d
    3178:	9e 85       	ldd	r25, Y+14	; 0x0e
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e2       	ldi	r20, 0x20	; 32
    3180:	51 e4       	ldi	r21, 0x41	; 65
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	0f c0       	rjmp	.+30     	; 0x31ba <main+0x112>
    319c:	80 e9       	ldi	r24, 0x90	; 144
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	9c 83       	std	Y+4, r25	; 0x04
    31a2:	8b 83       	std	Y+3, r24	; 0x03
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	9c 81       	ldd	r25, Y+4	; 0x04
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <main+0x100>
    31ac:	9c 83       	std	Y+4, r25	; 0x04
    31ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	69 f7       	brne	.-38     	; 0x319c <main+0xf4>
    31c2:	14 c0       	rjmp	.+40     	; 0x31ec <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c4:	6f 81       	ldd	r22, Y+7	; 0x07
    31c6:	78 85       	ldd	r23, Y+8	; 0x08
    31c8:	89 85       	ldd	r24, Y+9	; 0x09
    31ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <main+0x13c>
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LED_off(RED_LED_ID);
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
			LED_off(GREEN_LED_ID);
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
			LED_off(BLUE_LED_ID);
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
		}

		if(US_distanceReading != US_distanceReading_prevState){
    31fe:	29 89       	ldd	r18, Y+17	; 0x11
    3200:	3a 89       	ldd	r19, Y+18	; 0x12
    3202:	8f 85       	ldd	r24, Y+15	; 0x0f
    3204:	98 89       	ldd	r25, Y+16	; 0x10
    3206:	28 17       	cp	r18, r24
    3208:	39 07       	cpc	r19, r25
    320a:	09 f4       	brne	.+2      	; 0x320e <main+0x166>
    320c:	87 c0       	rjmp	.+270    	; 0x331c <main+0x274>

			/* Show Reading on screen */
			LCD_moveCursor(0,11);
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	6b e0       	ldi	r22, 0x0B	; 11
    3212:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <LCD_moveCursor>
			if(US_distanceReading <10){
    3216:	89 89       	ldd	r24, Y+17	; 0x11
    3218:	9a 89       	ldd	r25, Y+18	; 0x12
    321a:	8a 30       	cpi	r24, 0x0A	; 10
    321c:	91 05       	cpc	r25, r1
    321e:	48 f4       	brcc	.+18     	; 0x3232 <main+0x18a>
				LCD_integerToString(US_distanceReading);
    3220:	89 89       	ldd	r24, Y+17	; 0x11
    3222:	9a 89       	ldd	r25, Y+18	; 0x12
    3224:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_integerToString>
				LCD_displayString(" ");
    3228:	8c e6       	ldi	r24, 0x6C	; 108
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayString>
    3230:	04 c0       	rjmp	.+8      	; 0x323a <main+0x192>
			}
			else{
				LCD_integerToString(US_distanceReading);
    3232:	89 89       	ldd	r24, Y+17	; 0x11
    3234:	9a 89       	ldd	r25, Y+18	; 0x12
    3236:	0e 94 03 18 	call	0x3006	; 0x3006 <LCD_integerToString>
			}
			LCD_displayString(" cm");
    323a:	8e e6       	ldi	r24, 0x6E	; 110
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayString>

			/* ensure stop section is cleared */
			if(US_distanceReading > 5){
    3242:	89 89       	ldd	r24, Y+17	; 0x11
    3244:	9a 89       	ldd	r25, Y+18	; 0x12
    3246:	86 30       	cpi	r24, 0x06	; 6
    3248:	91 05       	cpc	r25, r1
    324a:	38 f0       	brcs	.+14     	; 0x325a <main+0x1b2>
				LCD_displayStringRowColumn(1,5,"       ");
    324c:	22 e7       	ldi	r18, 0x72	; 114
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	65 e0       	ldi	r22, 0x05	; 5
    3254:	a9 01       	movw	r20, r18
    3256:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LCD_displayStringRowColumn>
			}

			/* apply threat/warnings for several car parking conditions */
			if(US_distanceReading <= 5){
    325a:	89 89       	ldd	r24, Y+17	; 0x11
    325c:	9a 89       	ldd	r25, Y+18	; 0x12
    325e:	86 30       	cpi	r24, 0x06	; 6
    3260:	91 05       	cpc	r25, r1
    3262:	50 f4       	brcc	.+20     	; 0x3278 <main+0x1d0>

				/* open buzzer */
				Buzzer_on();
    3264:	0e 94 3c 18 	call	0x3078	; 0x3078 <Buzzer_on>

				/* show alarm message */
				LCD_displayStringRowColumn(1,5,"STOP!!");
    3268:	2a e7       	ldi	r18, 0x7A	; 122
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	65 e0       	ldi	r22, 0x05	; 5
    3270:	a9 01       	movw	r20, r18
    3272:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LCD_displayStringRowColumn>
    3276:	52 c0       	rjmp	.+164    	; 0x331c <main+0x274>

			}
			else if ( (US_distanceReading >= 6) &&  (US_distanceReading <= 10) ){
    3278:	89 89       	ldd	r24, Y+17	; 0x11
    327a:	9a 89       	ldd	r25, Y+18	; 0x12
    327c:	86 30       	cpi	r24, 0x06	; 6
    327e:	91 05       	cpc	r25, r1
    3280:	88 f0       	brcs	.+34     	; 0x32a4 <main+0x1fc>
    3282:	89 89       	ldd	r24, Y+17	; 0x11
    3284:	9a 89       	ldd	r25, Y+18	; 0x12
    3286:	8b 30       	cpi	r24, 0x0B	; 11
    3288:	91 05       	cpc	r25, r1
    328a:	60 f4       	brcc	.+24     	; 0x32a4 <main+0x1fc>

				/*ensure that buzzer is off */
				Buzzer_off();
    328c:	0e 94 48 18 	call	0x3090	; 0x3090 <Buzzer_off>

				/* show threat level */
				/* open all LEDs */
				LED_on(RED_LED_ID);
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
				LED_on(GREEN_LED_ID);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
				LED_on(BLUE_LED_ID);
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
    32a2:	3c c0       	rjmp	.+120    	; 0x331c <main+0x274>

			}
			else if ( (US_distanceReading >= 11) &&  (US_distanceReading <= 15) ){
    32a4:	89 89       	ldd	r24, Y+17	; 0x11
    32a6:	9a 89       	ldd	r25, Y+18	; 0x12
    32a8:	8b 30       	cpi	r24, 0x0B	; 11
    32aa:	91 05       	cpc	r25, r1
    32ac:	88 f0       	brcs	.+34     	; 0x32d0 <main+0x228>
    32ae:	89 89       	ldd	r24, Y+17	; 0x11
    32b0:	9a 89       	ldd	r25, Y+18	; 0x12
    32b2:	80 31       	cpi	r24, 0x10	; 16
    32b4:	91 05       	cpc	r25, r1
    32b6:	60 f4       	brcc	.+24     	; 0x32d0 <main+0x228>

				/*ensure that buzzer is off */
				Buzzer_off();
    32b8:	0e 94 48 18 	call	0x3090	; 0x3090 <Buzzer_off>

				/* show threat level */
				/* open led & green only */
				LED_on(RED_LED_ID);
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
				LED_on(GREEN_LED_ID);
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
				LED_off(BLUE_LED_ID);
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
    32ce:	26 c0       	rjmp	.+76     	; 0x331c <main+0x274>

			}
			else if ( (US_distanceReading >= 16) &&  (US_distanceReading <= 20) ){
    32d0:	89 89       	ldd	r24, Y+17	; 0x11
    32d2:	9a 89       	ldd	r25, Y+18	; 0x12
    32d4:	80 31       	cpi	r24, 0x10	; 16
    32d6:	91 05       	cpc	r25, r1
    32d8:	88 f0       	brcs	.+34     	; 0x32fc <main+0x254>
    32da:	89 89       	ldd	r24, Y+17	; 0x11
    32dc:	9a 89       	ldd	r25, Y+18	; 0x12
    32de:	85 31       	cpi	r24, 0x15	; 21
    32e0:	91 05       	cpc	r25, r1
    32e2:	60 f4       	brcc	.+24     	; 0x32fc <main+0x254>

				/*ensure that buzzer is off */
				Buzzer_off();
    32e4:	0e 94 48 18 	call	0x3090	; 0x3090 <Buzzer_off>

				/* show threat level */
				/* open led only */
				LED_on(RED_LED_ID);
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LED_on>
				LED_off(GREEN_LED_ID);
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
				LED_off(BLUE_LED_ID);
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
    32fa:	10 c0       	rjmp	.+32     	; 0x331c <main+0x274>

			}
			else if ( US_distanceReading > 20 ){
    32fc:	89 89       	ldd	r24, Y+17	; 0x11
    32fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3300:	85 31       	cpi	r24, 0x15	; 21
    3302:	91 05       	cpc	r25, r1
    3304:	58 f0       	brcs	.+22     	; 0x331c <main+0x274>

				/*ensure that buzzer is off */
				Buzzer_off();
    3306:	0e 94 48 18 	call	0x3090	; 0x3090 <Buzzer_off>

				/* show threat level */
				/* close all LEDs*/
				LED_off(RED_LED_ID);
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
				LED_off(GREEN_LED_ID);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>
				LED_off(BLUE_LED_ID);
    3316:	82 e0       	ldi	r24, 0x02	; 2
    3318:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LED_off>

			}
		}
		US_distanceReading_prevState = US_distanceReading;
    331c:	89 89       	ldd	r24, Y+17	; 0x11
    331e:	9a 89       	ldd	r25, Y+18	; 0x12
    3320:	98 8b       	std	Y+16, r25	; 0x10
    3322:	8f 87       	std	Y+15, r24	; 0x0f
    3324:	de ce       	rjmp	.-580    	; 0x30e2 <main+0x3a>

00003326 <__prologue_saves__>:
    3326:	2f 92       	push	r2
    3328:	3f 92       	push	r3
    332a:	4f 92       	push	r4
    332c:	5f 92       	push	r5
    332e:	6f 92       	push	r6
    3330:	7f 92       	push	r7
    3332:	8f 92       	push	r8
    3334:	9f 92       	push	r9
    3336:	af 92       	push	r10
    3338:	bf 92       	push	r11
    333a:	cf 92       	push	r12
    333c:	df 92       	push	r13
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	0f 93       	push	r16
    3344:	1f 93       	push	r17
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	ca 1b       	sub	r28, r26
    3350:	db 0b       	sbc	r29, r27
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	09 94       	ijmp

0000335e <__epilogue_restores__>:
    335e:	2a 88       	ldd	r2, Y+18	; 0x12
    3360:	39 88       	ldd	r3, Y+17	; 0x11
    3362:	48 88       	ldd	r4, Y+16	; 0x10
    3364:	5f 84       	ldd	r5, Y+15	; 0x0f
    3366:	6e 84       	ldd	r6, Y+14	; 0x0e
    3368:	7d 84       	ldd	r7, Y+13	; 0x0d
    336a:	8c 84       	ldd	r8, Y+12	; 0x0c
    336c:	9b 84       	ldd	r9, Y+11	; 0x0b
    336e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3370:	b9 84       	ldd	r11, Y+9	; 0x09
    3372:	c8 84       	ldd	r12, Y+8	; 0x08
    3374:	df 80       	ldd	r13, Y+7	; 0x07
    3376:	ee 80       	ldd	r14, Y+6	; 0x06
    3378:	fd 80       	ldd	r15, Y+5	; 0x05
    337a:	0c 81       	ldd	r16, Y+4	; 0x04
    337c:	1b 81       	ldd	r17, Y+3	; 0x03
    337e:	aa 81       	ldd	r26, Y+2	; 0x02
    3380:	b9 81       	ldd	r27, Y+1	; 0x01
    3382:	ce 0f       	add	r28, r30
    3384:	d1 1d       	adc	r29, r1
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	ed 01       	movw	r28, r26
    3392:	08 95       	ret

00003394 <itoa>:
    3394:	fb 01       	movw	r30, r22
    3396:	9f 01       	movw	r18, r30
    3398:	e8 94       	clt
    339a:	42 30       	cpi	r20, 0x02	; 2
    339c:	c4 f0       	brlt	.+48     	; 0x33ce <itoa+0x3a>
    339e:	45 32       	cpi	r20, 0x25	; 37
    33a0:	b4 f4       	brge	.+44     	; 0x33ce <itoa+0x3a>
    33a2:	4a 30       	cpi	r20, 0x0A	; 10
    33a4:	29 f4       	brne	.+10     	; 0x33b0 <itoa+0x1c>
    33a6:	97 fb       	bst	r25, 7
    33a8:	1e f4       	brtc	.+6      	; 0x33b0 <itoa+0x1c>
    33aa:	90 95       	com	r25
    33ac:	81 95       	neg	r24
    33ae:	9f 4f       	sbci	r25, 0xFF	; 255
    33b0:	64 2f       	mov	r22, r20
    33b2:	77 27       	eor	r23, r23
    33b4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__udivmodhi4>
    33b8:	80 5d       	subi	r24, 0xD0	; 208
    33ba:	8a 33       	cpi	r24, 0x3A	; 58
    33bc:	0c f0       	brlt	.+2      	; 0x33c0 <itoa+0x2c>
    33be:	89 5d       	subi	r24, 0xD9	; 217
    33c0:	81 93       	st	Z+, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	a1 f7       	brne	.-24     	; 0x33b0 <itoa+0x1c>
    33c8:	16 f4       	brtc	.+4      	; 0x33ce <itoa+0x3a>
    33ca:	5d e2       	ldi	r21, 0x2D	; 45
    33cc:	51 93       	st	Z+, r21
    33ce:	10 82       	st	Z, r1
    33d0:	c9 01       	movw	r24, r18
    33d2:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <strrev>

000033d6 <strrev>:
    33d6:	dc 01       	movw	r26, r24
    33d8:	fc 01       	movw	r30, r24
    33da:	67 2f       	mov	r22, r23
    33dc:	71 91       	ld	r23, Z+
    33de:	77 23       	and	r23, r23
    33e0:	e1 f7       	brne	.-8      	; 0x33da <strrev+0x4>
    33e2:	32 97       	sbiw	r30, 0x02	; 2
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <strrev+0x18>
    33e6:	7c 91       	ld	r23, X
    33e8:	6d 93       	st	X+, r22
    33ea:	70 83       	st	Z, r23
    33ec:	62 91       	ld	r22, -Z
    33ee:	ae 17       	cp	r26, r30
    33f0:	bf 07       	cpc	r27, r31
    33f2:	c8 f3       	brcs	.-14     	; 0x33e6 <strrev+0x10>
    33f4:	08 95       	ret

000033f6 <__udivmodhi4>:
    33f6:	aa 1b       	sub	r26, r26
    33f8:	bb 1b       	sub	r27, r27
    33fa:	51 e1       	ldi	r21, 0x11	; 17
    33fc:	07 c0       	rjmp	.+14     	; 0x340c <__udivmodhi4_ep>

000033fe <__udivmodhi4_loop>:
    33fe:	aa 1f       	adc	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	a6 17       	cp	r26, r22
    3404:	b7 07       	cpc	r27, r23
    3406:	10 f0       	brcs	.+4      	; 0x340c <__udivmodhi4_ep>
    3408:	a6 1b       	sub	r26, r22
    340a:	b7 0b       	sbc	r27, r23

0000340c <__udivmodhi4_ep>:
    340c:	88 1f       	adc	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	5a 95       	dec	r21
    3412:	a9 f7       	brne	.-22     	; 0x33fe <__udivmodhi4_loop>
    3414:	80 95       	com	r24
    3416:	90 95       	com	r25
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	08 95       	ret

0000341e <_exit>:
    341e:	f8 94       	cli

00003420 <__stop_program>:
    3420:	ff cf       	rjmp	.-2      	; 0x3420 <__stop_program>
