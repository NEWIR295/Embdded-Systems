
SPI_EX1_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002ac0  00002b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002484  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000117a  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000613a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000627a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000063ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 be 14 	call	0x297c	; 0x297c <main>
      7a:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SPI_initMaster>:
#include "../GPIO_Driver/GPIO/gpio.h"
#include "../GPIO_Driver/macros/macros.h"
#include "spi.h"

/* SPI master initialization */
void SPI_initMaster(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	/* set spi pin direction */
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	64 e0       	ldi	r22, 0x04	; 4
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	65 e0       	ldi	r22, 0x05	; 5
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	66 e0       	ldi	r22, 0x06	; 6
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	67 e0       	ldi	r22, 0x07	; 7
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>

	/* enable spi and master */
	SPCR = (1<<SPE) | (1<<MSTR) ;
     b66:	ed e2       	ldi	r30, 0x2D	; 45
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 e5       	ldi	r24, 0x50	; 80
     b6c:	80 83       	st	Z, r24
	SPSR &=~(1<<SPI2X);
     b6e:	ae e2       	ldi	r26, 0x2E	; 46
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ee e2       	ldi	r30, 0x2E	; 46
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	8c 93       	st	X, r24
}
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <SPI_initSlave>:

/* SPI slave initialization */
void SPI_initSlave(void){
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62

	/* set spi pin direction */
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	64 e0       	ldi	r22, 0x04	; 4
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	65 e0       	ldi	r22, 0x05	; 5
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	66 e0       	ldi	r22, 0x06	; 6
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	67 e0       	ldi	r22, 0x07	; 7
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>

	/* enable spi and slave */
	SPCR = (1<<SPE) ;
     bb2:	ed e2       	ldi	r30, 0x2D	; 45
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	80 83       	st	Z, r24
	SPSR &=~(1<<SPI2X);
     bba:	ae e2       	ldi	r26, 0x2E	; 46
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ee e2       	ldi	r30, 0x2E	; 46
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	8c 93       	st	X, r24
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <SPI_sendReceive>:

/*
 * SPI function send and receive data at the same time
 */
uint8 SPI_sendReceive(uint8 data){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01

	/* send data to another device */
	SPDR = data;
     bda:	ef e2       	ldi	r30, 0x2F	; 47
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	80 83       	st	Z, r24

	/* wait until data sent successfully */
	while(BIT_IS_CLEAR(SPSR,SPIF));
     be2:	ee e2       	ldi	r30, 0x2E	; 46
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	88 23       	and	r24, r24
     bea:	dc f7       	brge	.-10     	; 0xbe2 <SPI_sendReceive+0x14>

	/* return data received */
	return SPDR;
     bec:	ef e2       	ldi	r30, 0x2F	; 47
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z

}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <SPI_sendString>:

/*
 * send String to another device using SPI
 */
void SPI_sendString(const uint8 *str){
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <SPI_sendString+0x6>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <SPI_sendString+0x8>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	9c 83       	std	Y+4, r25	; 0x04
     c08:	8b 83       	std	Y+3, r24	; 0x03

	/* counter variable */
	uint8 i = 0;
     c0a:	1a 82       	std	Y+2, r1	; 0x02

	/* dummy variable */
	uint8 dataReceived = 0;
     c0c:	19 82       	std	Y+1, r1	; 0x01
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <SPI_sendString+0x34>

	while( *(str + i ) != '\0'){
		dataReceived = SPI_sendReceive( *(str + i) );
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	fc 01       	movw	r30, r24
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	80 81       	ld	r24, Z
     c22:	0e 94 e7 05 	call	0xbce	; 0xbce <SPI_sendReceive>
     c26:	89 83       	std	Y+1, r24	; 0x01
		i++;
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;

	/* dummy variable */
	uint8 dataReceived = 0;

	while( *(str + i ) != '\0'){
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	fc 01       	movw	r30, r24
     c3a:	e2 0f       	add	r30, r18
     c3c:	f3 1f       	adc	r31, r19
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	31 f7       	brne	.-52     	; 0xc10 <SPI_sendString+0x16>
		dataReceived = SPI_sendReceive( *(str + i) );
		i++;
	}
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <SPI_ReceiveString>:

/*
 * Receive String from another device using SPI
 */
void SPI_ReceiveString(uint8 *str){
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <SPI_ReceiveString+0xa>
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9b 83       	std	Y+3, r25	; 0x03
     c64:	8a 83       	std	Y+2, r24	; 0x02

	/* counter variable */
	uint8 i = 0;
     c66:	19 82       	std	Y+1, r1	; 0x01

	/* dummy variable */
	str[i] = SPI_sendReceive(SPI_DEFAULT_VALUE) ;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	9b 81       	ldd	r25, Y+3	; 0x03
     c72:	8c 01       	movw	r16, r24
     c74:	02 0f       	add	r16, r18
     c76:	13 1f       	adc	r17, r19
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	0e 94 e7 05 	call	0xbce	; 0xbce <SPI_sendReceive>
     c7e:	f8 01       	movw	r30, r16
     c80:	80 83       	st	Z, r24
     c82:	10 c0       	rjmp	.+32     	; 0xca4 <SPI_ReceiveString+0x52>

	while( *(str + i ) != '#'){
		i++;
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceive( SPI_DEFAULT_VALUE );
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	8c 01       	movw	r16, r24
     c96:	02 0f       	add	r16, r18
     c98:	13 1f       	adc	r17, r19
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	0e 94 e7 05 	call	0xbce	; 0xbce <SPI_sendReceive>
     ca0:	f8 01       	movw	r30, r16
     ca2:	80 83       	st	Z, r24
	uint8 i = 0;

	/* dummy variable */
	str[i] = SPI_sendReceive(SPI_DEFAULT_VALUE) ;

	while( *(str + i ) != '#'){
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	fc 01       	movw	r30, r24
     cb0:	e2 0f       	add	r30, r18
     cb2:	f3 1f       	adc	r31, r19
     cb4:	80 81       	ld	r24, Z
     cb6:	83 32       	cpi	r24, 0x23	; 35
     cb8:	29 f7       	brne	.-54     	; 0xc84 <SPI_ReceiveString+0x32>
		i++;
		str[i] = SPI_sendReceive( SPI_DEFAULT_VALUE );
	}
	str[i] = '\0';
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	fc 01       	movw	r30, r24
     cc6:	e2 0f       	add	r30, r18
     cc8:	f3 1f       	adc	r31, r19
     cca:	10 82       	st	Z, r1
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <GPIO_setupPinDirection+0x6>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <GPIO_setupPinDirection+0x8>
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
     cee:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	88 30       	cpi	r24, 0x08	; 8
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x1c>
     cf6:	d5 c0       	rjmp	.+426    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <GPIO_setupPinDirection+0x24>
     cfe:	d1 c0       	rjmp	.+418    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	3d 83       	std	Y+5, r19	; 0x05
     d08:	2c 83       	std	Y+4, r18	; 0x04
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	9d 81       	ldd	r25, Y+5	; 0x05
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	91 05       	cpc	r25, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <GPIO_setupPinDirection+0x3a>
     d14:	43 c0       	rjmp	.+134    	; 0xd9c <GPIO_setupPinDirection+0xc0>
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	31 05       	cpc	r19, r1
     d1e:	2c f4       	brge	.+10     	; 0xd2a <GPIO_setupPinDirection+0x4e>
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	71 f0       	breq	.+28     	; 0xd44 <GPIO_setupPinDirection+0x68>
     d28:	bc c0       	rjmp	.+376    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
     d2a:	2c 81       	ldd	r18, Y+4	; 0x04
     d2c:	3d 81       	ldd	r19, Y+5	; 0x05
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <GPIO_setupPinDirection+0x5a>
     d34:	5f c0       	rjmp	.+190    	; 0xdf4 <GPIO_setupPinDirection+0x118>
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <GPIO_setupPinDirection+0x66>
     d40:	85 c0       	rjmp	.+266    	; 0xe4c <GPIO_setupPinDirection+0x170>
     d42:	af c0       	rjmp	.+350    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	a1 f4       	brne	.+40     	; 0xd72 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     d4a:	aa e3       	ldi	r26, 0x3A	; 58
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e3       	ldi	r30, 0x3A	; 58
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <GPIO_setupPinDirection+0x8c>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <GPIO_setupPinDirection+0x88>
     d6c:	84 2b       	or	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	98 c0       	rjmp	.+304    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     d72:	aa e3       	ldi	r26, 0x3A	; 58
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_setupPinDirection+0xb4>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_setupPinDirection+0xb0>
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	83 c0       	rjmp	.+262    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	a1 f4       	brne	.+40     	; 0xdca <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     da2:	a7 e3       	ldi	r26, 0x37	; 55
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_setupPinDirection+0xe4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_setupPinDirection+0xe0>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	6c c0       	rjmp	.+216    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     dca:	a7 e3       	ldi	r26, 0x37	; 55
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e3       	ldi	r30, 0x37	; 55
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <GPIO_setupPinDirection+0x10c>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <GPIO_setupPinDirection+0x108>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	57 c0       	rjmp	.+174    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	a1 f4       	brne	.+40     	; 0xe22 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     dfa:	a4 e3       	ldi	r26, 0x34	; 52
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e3       	ldi	r30, 0x34	; 52
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_setupPinDirection+0x13c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_setupPinDirection+0x138>
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	40 c0       	rjmp	.+128    	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <GPIO_setupPinDirection+0x164>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <GPIO_setupPinDirection+0x160>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	2b c0       	rjmp	.+86     	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	a1 f4       	brne	.+40     	; 0xe7a <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     e52:	a1 e3       	ldi	r26, 0x31	; 49
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e3       	ldi	r30, 0x31	; 49
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_setupPinDirection+0x194>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_setupPinDirection+0x190>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     e7a:	a1 e3       	ldi	r26, 0x31	; 49
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e1 e3       	ldi	r30, 0x31	; 49
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_setupPinDirection+0x1bc>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_setupPinDirection+0x1b8>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_writePin+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <GPIO_writePin+0x8>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	6a 83       	std	Y+2, r22	; 0x02
     ec4:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	88 30       	cpi	r24, 0x08	; 8
     eca:	08 f0       	brcs	.+2      	; 0xece <GPIO_writePin+0x1c>
     ecc:	d5 c0       	rjmp	.+426    	; 0x1078 <GPIO_writePin+0x1c6>
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	84 30       	cpi	r24, 0x04	; 4
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <GPIO_writePin+0x24>
     ed4:	d1 c0       	rjmp	.+418    	; 0x1078 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <GPIO_writePin+0x3a>
     eea:	43 c0       	rjmp	.+134    	; 0xf72 <GPIO_writePin+0xc0>
     eec:	2c 81       	ldd	r18, Y+4	; 0x04
     eee:	3d 81       	ldd	r19, Y+5	; 0x05
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <GPIO_writePin+0x4e>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	71 f0       	breq	.+28     	; 0xf1a <GPIO_writePin+0x68>
     efe:	bc c0       	rjmp	.+376    	; 0x1078 <GPIO_writePin+0x1c6>
     f00:	2c 81       	ldd	r18, Y+4	; 0x04
     f02:	3d 81       	ldd	r19, Y+5	; 0x05
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <GPIO_writePin+0x5a>
     f0a:	5f c0       	rjmp	.+190    	; 0xfca <GPIO_writePin+0x118>
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <GPIO_writePin+0x66>
     f16:	85 c0       	rjmp	.+266    	; 0x1022 <GPIO_writePin+0x170>
     f18:	af c0       	rjmp	.+350    	; 0x1078 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     f20:	ab e3       	ldi	r26, 0x3B	; 59
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e3       	ldi	r30, 0x3B	; 59
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_writePin+0x8c>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_writePin+0x88>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	98 c0       	rjmp	.+304    	; 0x1078 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_writePin+0xb4>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_writePin+0xb0>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	83 c0       	rjmp	.+262    	; 0x1078 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	a1 f4       	brne	.+40     	; 0xfa0 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_writePin+0xe4>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_writePin+0xe0>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	6c c0       	rjmp	.+216    	; 0x1078 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_writePin+0x10c>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_writePin+0x108>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	57 c0       	rjmp	.+174    	; 0x1078 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	a1 f4       	brne	.+40     	; 0xff8 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_writePin+0x13c>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_writePin+0x138>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	40 c0       	rjmp	.+128    	; 0x1078 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_writePin+0x164>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_writePin+0x160>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	2b c0       	rjmp	.+86     	; 0x1078 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	a1 f4       	brne	.+40     	; 0x1050 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_writePin+0x194>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_writePin+0x190>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_writePin+0x1bc>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_writePin+0x1b8>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	29 97       	sbiw	r28, 0x09	; 9
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <GPIO_readPin+0x20>
    10a6:	8d c0       	rjmp	.+282    	; 0x11c2 <GPIO_readPin+0x13a>
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <GPIO_readPin+0x28>
    10ae:	89 c0       	rjmp	.+274    	; 0x11c2 <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	39 87       	std	Y+9, r19	; 0x09
    10b8:	28 87       	std	Y+8, r18	; 0x08
    10ba:	48 85       	ldd	r20, Y+8	; 0x08
    10bc:	59 85       	ldd	r21, Y+9	; 0x09
    10be:	41 30       	cpi	r20, 0x01	; 1
    10c0:	51 05       	cpc	r21, r1
    10c2:	89 f1       	breq	.+98     	; 0x1126 <GPIO_readPin+0x9e>
    10c4:	88 85       	ldd	r24, Y+8	; 0x08
    10c6:	99 85       	ldd	r25, Y+9	; 0x09
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	91 05       	cpc	r25, r1
    10cc:	34 f4       	brge	.+12     	; 0x10da <GPIO_readPin+0x52>
    10ce:	28 85       	ldd	r18, Y+8	; 0x08
    10d0:	39 85       	ldd	r19, Y+9	; 0x09
    10d2:	21 15       	cp	r18, r1
    10d4:	31 05       	cpc	r19, r1
    10d6:	69 f0       	breq	.+26     	; 0x10f2 <GPIO_readPin+0x6a>
    10d8:	74 c0       	rjmp	.+232    	; 0x11c2 <GPIO_readPin+0x13a>
    10da:	48 85       	ldd	r20, Y+8	; 0x08
    10dc:	59 85       	ldd	r21, Y+9	; 0x09
    10de:	42 30       	cpi	r20, 0x02	; 2
    10e0:	51 05       	cpc	r21, r1
    10e2:	d9 f1       	breq	.+118    	; 0x115a <GPIO_readPin+0xd2>
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	99 85       	ldd	r25, Y+9	; 0x09
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <GPIO_readPin+0x68>
    10ee:	4f c0       	rjmp	.+158    	; 0x118e <GPIO_readPin+0x106>
    10f0:	68 c0       	rjmp	.+208    	; 0x11c2 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    10f2:	e9 e3       	ldi	r30, 0x39	; 57
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_readPin+0x82>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_readPin+0x7e>
    110e:	ca 01       	movw	r24, r20
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	90 70       	andi	r25, 0x00	; 0
    1114:	88 23       	and	r24, r24
    1116:	19 f0       	breq	.+6      	; 0x111e <GPIO_readPin+0x96>
    1118:	51 e0       	ldi	r21, 0x01	; 1
    111a:	5e 83       	std	Y+6, r21	; 0x06
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <GPIO_readPin+0x98>
    111e:	1e 82       	std	Y+6, r1	; 0x06
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	4f c0       	rjmp	.+158    	; 0x11c4 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    1126:	e6 e3       	ldi	r30, 0x36	; 54
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_readPin+0xb6>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_readPin+0xb2>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	90 70       	andi	r25, 0x00	; 0
    1148:	88 23       	and	r24, r24
    114a:	19 f0       	breq	.+6      	; 0x1152 <GPIO_readPin+0xca>
    114c:	51 e0       	ldi	r21, 0x01	; 1
    114e:	5d 83       	std	Y+5, r21	; 0x05
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <GPIO_readPin+0xcc>
    1152:	1d 82       	std	Y+5, r1	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	8f 83       	std	Y+7, r24	; 0x07
    1158:	35 c0       	rjmp	.+106    	; 0x11c4 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    115a:	e3 e3       	ldi	r30, 0x33	; 51
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_readPin+0xea>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_readPin+0xe6>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	88 23       	and	r24, r24
    117e:	19 f0       	breq	.+6      	; 0x1186 <GPIO_readPin+0xfe>
    1180:	51 e0       	ldi	r21, 0x01	; 1
    1182:	5c 83       	std	Y+4, r21	; 0x04
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <GPIO_readPin+0x100>
    1186:	1c 82       	std	Y+4, r1	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	8f 83       	std	Y+7, r24	; 0x07
    118c:	1b c0       	rjmp	.+54     	; 0x11c4 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    118e:	e0 e3       	ldi	r30, 0x30	; 48
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_readPin+0x11e>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_readPin+0x11a>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	90 70       	andi	r25, 0x00	; 0
    11b0:	88 23       	and	r24, r24
    11b2:	19 f0       	breq	.+6      	; 0x11ba <GPIO_readPin+0x132>
    11b4:	51 e0       	ldi	r21, 0x01	; 1
    11b6:	5b 83       	std	Y+3, r21	; 0x03
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <GPIO_readPin+0x134>
    11ba:	1b 82       	std	Y+3, r1	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	8f 83       	std	Y+7, r24	; 0x07
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <GPIO_readPin+0x13c>
			break;
		}

	}

	return 0;
    11c2:	1f 82       	std	Y+7, r1	; 0x07
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
}
    11c6:	29 96       	adiw	r28, 0x09	; 9
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_setupPortDirection+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_setupPortDirection+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	90 f5       	brcc	.+100    	; 0x1252 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3c 83       	std	Y+4, r19	; 0x04
    11f6:	2b 83       	std	Y+3, r18	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	d1 f0       	breq	.+52     	; 0x1236 <GPIO_setupPortDirection+0x5e>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <GPIO_setupPortDirection+0x3e>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <GPIO_setupPortDirection+0x54>
    1214:	1e c0       	rjmp	.+60     	; 0x1252 <GPIO_setupPortDirection+0x7a>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	81 f0       	breq	.+32     	; 0x1240 <GPIO_setupPortDirection+0x68>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	81 f0       	breq	.+32     	; 0x124a <GPIO_setupPortDirection+0x72>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1236:	e7 e3       	ldi	r30, 0x37	; 55
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1240:	e4 e3       	ldi	r30, 0x34	; 52
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    124a:	e1 e3       	ldi	r30, 0x31	; 49
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
			break;
		}
	}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_writePort+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <GPIO_writePort+0x8>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	90 f5       	brcc	.+100    	; 0x12da <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3c 83       	std	Y+4, r19	; 0x04
    127e:	2b 83       	std	Y+3, r18	; 0x03
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	d1 f0       	breq	.+52     	; 0x12be <GPIO_writePort+0x5e>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	2c f4       	brge	.+10     	; 0x129e <GPIO_writePort+0x3e>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	61 f0       	breq	.+24     	; 0x12b4 <GPIO_writePort+0x54>
    129c:	1e c0       	rjmp	.+60     	; 0x12da <GPIO_writePort+0x7a>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	81 f0       	breq	.+32     	; 0x12c8 <GPIO_writePort+0x68>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <GPIO_writePort+0x72>
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    12b4:	eb e3       	ldi	r30, 0x3B	; 59
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	0e c0       	rjmp	.+28     	; 0x12da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <GPIO_readPort+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_readPort+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	98 f5       	brcc	.+102    	; 0x1362 <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3c 83       	std	Y+4, r19	; 0x04
    1304:	2b 83       	std	Y+3, r18	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	d1 f0       	breq	.+52     	; 0x1344 <GPIO_readPort+0x5c>
    1310:	2b 81       	ldd	r18, Y+3	; 0x03
    1312:	3c 81       	ldd	r19, Y+4	; 0x04
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	2c f4       	brge	.+10     	; 0x1324 <GPIO_readPort+0x3c>
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	61 f0       	breq	.+24     	; 0x133a <GPIO_readPort+0x52>
    1322:	1f c0       	rjmp	.+62     	; 0x1362 <GPIO_readPort+0x7a>
    1324:	2b 81       	ldd	r18, Y+3	; 0x03
    1326:	3c 81       	ldd	r19, Y+4	; 0x04
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	81 f0       	breq	.+32     	; 0x134e <GPIO_readPort+0x66>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <GPIO_readPort+0x70>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    133a:	e9 e3       	ldi	r30, 0x39	; 57
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	90 81       	ld	r25, Z
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    1344:	e6 e3       	ldi	r30, 0x36	; 54
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	20 81       	ld	r18, Z
    134a:	2a 83       	std	Y+2, r18	; 0x02
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    134e:	e3 e3       	ldi	r30, 0x33	; 51
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	30 81       	ld	r19, Z
    1354:	3a 83       	std	Y+2, r19	; 0x02
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    1358:	e0 e3       	ldi	r30, 0x30	; 48
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    1362:	1a 82       	std	Y+2, r1	; 0x02
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <LEDS_init>:
#include "led.h"
/*
 * Initializes all Leds (red, green, blue) pins direction.
 * Turn off all the Leds
 */
void LEDS_init(void){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62

	/* SETUP LEDs  Direction as Output */
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_pin,PIN_OUTPUT);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT,GREEN_LED_pin,PIN_OUTPUT);
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT,BLUE_LED_pin,PIN_OUTPUT);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>

	/* Turn off All pins on Startup*/
#if(LED_MODE == POSITIVE_LOGIC)

	GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);

#endif

}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <LED_on>:
/*
 * Turns on the specified LED.
 */
void LED_on(uint8 id){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <LED_on+0x6>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	89 83       	std	Y+1, r24	; 0x01

#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3b 83       	std	Y+3, r19	; 0x03
    13d4:	2a 83       	std	Y+2, r18	; 0x02
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	a9 f0       	breq	.+42     	; 0x140a <LED_on+0x4c>
    13e0:	2a 81       	ldd	r18, Y+2	; 0x02
    13e2:	3b 81       	ldd	r19, Y+3	; 0x03
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	51 f0       	breq	.+20     	; 0x13fe <LED_on+0x40>
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	89 f4       	brne	.+34     	; 0x1414 <LED_on+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,HIGH);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <LED_on+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <LED_on+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
		break;
	}

#endif

}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <LED_off>:

/*
 * Turns off the specified LED.
 */
void LED_off(uint8 id){
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <LED_off+0x6>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01


#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3b 83       	std	Y+3, r19	; 0x03
    1436:	2a 83       	std	Y+2, r18	; 0x02
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	a9 f0       	breq	.+42     	; 0x146c <LED_off+0x4c>
    1442:	2a 81       	ldd	r18, Y+2	; 0x02
    1444:	3b 81       	ldd	r19, Y+3	; 0x03
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	51 f0       	breq	.+20     	; 0x1460 <LED_off+0x40>
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	89 f4       	brne	.+34     	; 0x1476 <LED_off+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <LED_off+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <LED_off+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
		break;
	}

#endif

}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2e 97       	sbiw	r28, 0x0e	; 14
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 ea       	ldi	r26, 0xA0	; 160
    14b0:	b1 e4       	ldi	r27, 0x41	; 65
    14b2:	8b 87       	std	Y+11, r24	; 0x0b
    14b4:	9c 87       	std	Y+12, r25	; 0x0c
    14b6:	ad 87       	std	Y+13, r26	; 0x0d
    14b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a e7       	ldi	r20, 0x7A	; 122
    14c8:	53 e4       	ldi	r21, 0x43	; 67
    14ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	a9 87       	std	Y+9, r26	; 0x09
    14d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14da:	6f 81       	ldd	r22, Y+7	; 0x07
    14dc:	78 85       	ldd	r23, Y+8	; 0x08
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <LCD_init+0x7a>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <LCD_init+0xf8>
	else if (__tmp > 65535)
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6b 85       	ldd	r22, Y+11	; 0x0b
    1516:	7c 85       	ldd	r23, Y+12	; 0x0c
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	0f c0       	rjmp	.+30     	; 0x155c <LCD_init+0xda>
    153e:	89 e1       	ldi	r24, 0x19	; 25
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_init+0xc8>
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <LCD_init+0xbc>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_init+0x104>
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	63 e0       	ldi	r22, 0x03	; 3
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	64 e0       	ldi	r22, 0x04	; 4
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	65 e0       	ldi	r22, 0x05	; 5
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	66 e0       	ldi	r22, 0x06	; 6
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
    15b6:	83 e3       	ldi	r24, 0x33	; 51
    15b8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
    15bc:	82 e3       	ldi	r24, 0x32	; 50
    15be:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
    15c2:	88 e2       	ldi	r24, 0x28	; 40
    15c4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    15c8:	8c e0       	ldi	r24, 0x0C	; 12
    15ca:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>

}
    15d4:	2e 96       	adiw	r28, 0x0e	; 14
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	c3 56       	subi	r28, 0x63	; 99
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	fe 01       	movw	r30, r28
    1602:	ed 59       	subi	r30, 0x9D	; 157
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1612:	fe 01       	movw	r30, r28
    1614:	e1 5a       	subi	r30, 0xA1	; 161
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e8       	ldi	r26, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	8e 01       	movw	r16, r28
    162a:	05 5a       	subi	r16, 0xA5	; 165
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	fe 01       	movw	r30, r28
    1630:	e1 5a       	subi	r30, 0xA1	; 161
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a e7       	ldi	r20, 0x7A	; 122
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	f8 01       	movw	r30, r16
    164e:	80 83       	st	Z, r24
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1656:	fe 01       	movw	r30, r28
    1658:	e5 5a       	subi	r30, 0xA5	; 165
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	5f e3       	ldi	r21, 0x3F	; 63
    166c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1670:	88 23       	and	r24, r24
    1672:	44 f4       	brge	.+16     	; 0x1684 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1674:	fe 01       	movw	r30, r28
    1676:	e7 5a       	subi	r30, 0xA7	; 167
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	64 c0       	rjmp	.+200    	; 0x174c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1684:	fe 01       	movw	r30, r28
    1686:	e5 5a       	subi	r30, 0xA5	; 165
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	0c f0       	brlt	.+2      	; 0x16a4 <LCD_sendCommand+0xbe>
    16a2:	43 c0       	rjmp	.+134    	; 0x172a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	fe 01       	movw	r30, r28
    16a6:	e1 5a       	subi	r30, 0xA1	; 161
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8e 01       	movw	r16, r28
    16c4:	07 5a       	subi	r16, 0xA7	; 167
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	1f c0       	rjmp	.+62     	; 0x171a <LCD_sendCommand+0x134>
    16dc:	fe 01       	movw	r30, r28
    16de:	e9 5a       	subi	r30, 0xA9	; 169
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	89 e1       	ldi	r24, 0x19	; 25
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	80 83       	st	Z, r24
    16ea:	fe 01       	movw	r30, r28
    16ec:	e9 5a       	subi	r30, 0xA9	; 169
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_sendCommand+0x10e>
    16f8:	fe 01       	movw	r30, r28
    16fa:	e9 5a       	subi	r30, 0xA9	; 169
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	de 01       	movw	r26, r28
    1704:	a7 5a       	subi	r26, 0xA7	; 167
    1706:	bf 4f       	sbci	r27, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e7 5a       	subi	r30, 0xA7	; 167
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	11 96       	adiw	r26, 0x01	; 1
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	fe 01       	movw	r30, r28
    171c:	e7 5a       	subi	r30, 0xA7	; 167
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	d1 f6       	brne	.-76     	; 0x16dc <LCD_sendCommand+0xf6>
    1728:	27 c0       	rjmp	.+78     	; 0x1778 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	8e 01       	movw	r16, r28
    172c:	07 5a       	subi	r16, 0xA7	; 167
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	fe 01       	movw	r30, r28
    1732:	e5 5a       	subi	r30, 0xA5	; 165
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	f8 01       	movw	r30, r16
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    174c:	de 01       	movw	r26, r28
    174e:	ab 5a       	subi	r26, 0xAB	; 171
    1750:	bf 4f       	sbci	r27, 0xFF	; 255
    1752:	fe 01       	movw	r30, r28
    1754:	e7 5a       	subi	r30, 0xA7	; 167
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	8d 93       	st	X+, r24
    175e:	9c 93       	st	X, r25
    1760:	fe 01       	movw	r30, r28
    1762:	eb 5a       	subi	r30, 0xAB	; 171
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_sendCommand+0x184>
    176e:	fe 01       	movw	r30, r28
    1770:	eb 5a       	subi	r30, 0xAB	; 171
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1782:	fe 01       	movw	r30, r28
    1784:	ef 5a       	subi	r30, 0xAF	; 175
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e8       	ldi	r26, 0x80	; 128
    178e:	bf e3       	ldi	r27, 0x3F	; 63
    1790:	80 83       	st	Z, r24
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	a2 83       	std	Z+2, r26	; 0x02
    1796:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	8e 01       	movw	r16, r28
    179a:	03 5b       	subi	r16, 0xB3	; 179
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	ef 5a       	subi	r30, 0xAF	; 175
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	53 e4       	ldi	r21, 0x43	; 67
    17b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	f8 01       	movw	r30, r16
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c6:	fe 01       	movw	r30, r28
    17c8:	e3 5b       	subi	r30, 0xB3	; 179
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	44 f4       	brge	.+16     	; 0x17f4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    17e4:	fe 01       	movw	r30, r28
    17e6:	e5 5b       	subi	r30, 0xB5	; 181
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	64 c0       	rjmp	.+200    	; 0x18bc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e3 5b       	subi	r30, 0xB3	; 179
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	0c f0       	brlt	.+2      	; 0x1814 <LCD_sendCommand+0x22e>
    1812:	43 c0       	rjmp	.+134    	; 0x189a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	fe 01       	movw	r30, r28
    1816:	ef 5a       	subi	r30, 0xAF	; 175
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8e 01       	movw	r16, r28
    1834:	05 5b       	subi	r16, 0xB5	; 181
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	f8 01       	movw	r30, r16
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	1f c0       	rjmp	.+62     	; 0x188a <LCD_sendCommand+0x2a4>
    184c:	fe 01       	movw	r30, r28
    184e:	e7 5b       	subi	r30, 0xB7	; 183
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	89 e1       	ldi	r24, 0x19	; 25
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	fe 01       	movw	r30, r28
    185c:	e7 5b       	subi	r30, 0xB7	; 183
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_sendCommand+0x27e>
    1868:	fe 01       	movw	r30, r28
    186a:	e7 5b       	subi	r30, 0xB7	; 183
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	de 01       	movw	r26, r28
    1874:	a5 5b       	subi	r26, 0xB5	; 181
    1876:	bf 4f       	sbci	r27, 0xFF	; 255
    1878:	fe 01       	movw	r30, r28
    187a:	e5 5b       	subi	r30, 0xB5	; 181
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	9c 93       	st	X, r25
    1888:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	fe 01       	movw	r30, r28
    188c:	e5 5b       	subi	r30, 0xB5	; 181
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	d1 f6       	brne	.-76     	; 0x184c <LCD_sendCommand+0x266>
    1898:	27 c0       	rjmp	.+78     	; 0x18e8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	8e 01       	movw	r16, r28
    189c:	05 5b       	subi	r16, 0xB5	; 181
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e3 5b       	subi	r30, 0xB3	; 179
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	f8 01       	movw	r30, r16
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	de 01       	movw	r26, r28
    18be:	a9 5b       	subi	r26, 0xB9	; 185
    18c0:	bf 4f       	sbci	r27, 0xFF	; 255
    18c2:	fe 01       	movw	r30, r28
    18c4:	e5 5b       	subi	r30, 0xB5	; 181
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	8d 93       	st	X+, r24
    18ce:	9c 93       	st	X, r25
    18d0:	fe 01       	movw	r30, r28
    18d2:	e9 5b       	subi	r30, 0xB9	; 185
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_sendCommand+0x2f4>
    18de:	fe 01       	movw	r30, r28
    18e0:	e9 5b       	subi	r30, 0xB9	; 185
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
    18e8:	fe 01       	movw	r30, r28
    18ea:	ed 59       	subi	r30, 0x9D	; 157
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	80 71       	andi	r24, 0x10	; 16
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	95 95       	asr	r25
    18fa:	87 95       	ror	r24
    18fc:	95 95       	asr	r25
    18fe:	87 95       	ror	r24
    1900:	95 95       	asr	r25
    1902:	87 95       	ror	r24
    1904:	95 95       	asr	r25
    1906:	87 95       	ror	r24
    1908:	98 2f       	mov	r25, r24
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	49 2f       	mov	r20, r25
    1910:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1914:	fe 01       	movw	r30, r28
    1916:	ed 59       	subi	r30, 0x9D	; 157
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 72       	andi	r24, 0x20	; 32
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	95 95       	asr	r25
    1926:	87 95       	ror	r24
    1928:	95 95       	asr	r25
    192a:	87 95       	ror	r24
    192c:	95 95       	asr	r25
    192e:	87 95       	ror	r24
    1930:	95 95       	asr	r25
    1932:	87 95       	ror	r24
    1934:	95 95       	asr	r25
    1936:	87 95       	ror	r24
    1938:	98 2f       	mov	r25, r24
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	49 2f       	mov	r20, r25
    1940:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1944:	fe 01       	movw	r30, r28
    1946:	ed 59       	subi	r30, 0x9D	; 157
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	80 74       	andi	r24, 0x40	; 64
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	08 2e       	mov	r0, r24
    1956:	89 2f       	mov	r24, r25
    1958:	00 0c       	add	r0, r0
    195a:	88 1f       	adc	r24, r24
    195c:	99 0b       	sbc	r25, r25
    195e:	00 0c       	add	r0, r0
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	98 2f       	mov	r25, r24
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	65 e0       	ldi	r22, 0x05	; 5
    196a:	49 2f       	mov	r20, r25
    196c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1970:	fe 01       	movw	r30, r28
    1972:	ed 59       	subi	r30, 0x9D	; 157
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	98 2f       	mov	r25, r24
    197a:	99 1f       	adc	r25, r25
    197c:	99 27       	eor	r25, r25
    197e:	99 1f       	adc	r25, r25
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	66 e0       	ldi	r22, 0x06	; 6
    1984:	49 2f       	mov	r20, r25
    1986:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    198a:	fe 01       	movw	r30, r28
    198c:	ed 5b       	subi	r30, 0xBD	; 189
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	80 83       	st	Z, r24
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	a2 83       	std	Z+2, r26	; 0x02
    199e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	8e 01       	movw	r16, r28
    19a2:	01 5c       	subi	r16, 0xC1	; 193
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 5b       	subi	r30, 0xBD	; 189
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	53 e4       	ldi	r21, 0x43	; 67
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ce:	fe 01       	movw	r30, r28
    19d0:	ff 96       	adiw	r30, 0x3f	; 63
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9e af       	std	Y+62, r25	; 0x3e
    19f0:	8d af       	std	Y+61, r24	; 0x3d
    19f2:	46 c0       	rjmp	.+140    	; 0x1a80 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    19f4:	fe 01       	movw	r30, r28
    19f6:	ff 96       	adiw	r30, 0x3f	; 63
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	64 f5       	brge	.+88     	; 0x1a68 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 5b       	subi	r30, 0xBD	; 189
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e af       	std	Y+62, r25	; 0x3e
    1a3c:	8d af       	std	Y+61, r24	; 0x3d
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <LCD_sendCommand+0x478>
    1a40:	89 e1       	ldi	r24, 0x19	; 25
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c af       	std	Y+60, r25	; 0x3c
    1a46:	8b af       	std	Y+59, r24	; 0x3b
    1a48:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_sendCommand+0x466>
    1a50:	9c af       	std	Y+60, r25	; 0x3c
    1a52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9e af       	std	Y+62, r25	; 0x3e
    1a5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <LCD_sendCommand+0x45a>
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ff 96       	adiw	r30, 0x3f	; 63
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e af       	std	Y+62, r25	; 0x3e
    1a7e:	8d af       	std	Y+61, r24	; 0x3d
    1a80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a84:	9a af       	std	Y+58, r25	; 0x3a
    1a86:	89 af       	std	Y+57, r24	; 0x39
    1a88:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x4a6>
    1a90:	9a af       	std	Y+58, r25	; 0x3a
    1a92:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8d ab       	std	Y+53, r24	; 0x35
    1aa8:	9e ab       	std	Y+54, r25	; 0x36
    1aaa:	af ab       	std	Y+55, r26	; 0x37
    1aac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	89 ab       	std	Y+49, r24	; 0x31
    1ac8:	9a ab       	std	Y+50, r25	; 0x32
    1aca:	ab ab       	std	Y+51, r26	; 0x33
    1acc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	98 ab       	std	Y+48, r25	; 0x30
    1aec:	8f a7       	std	Y+47, r24	; 0x2f
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1af0:	69 a9       	ldd	r22, Y+49	; 0x31
    1af2:	7a a9       	ldd	r23, Y+50	; 0x32
    1af4:	8b a9       	ldd	r24, Y+51	; 0x33
    1af6:	9c a9       	ldd	r25, Y+52	; 0x34
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_sendCommand+0x56a>
    1b32:	89 e1       	ldi	r24, 0x19	; 25
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9e a7       	std	Y+46, r25	; 0x2e
    1b38:	8d a7       	std	Y+45, r24	; 0x2d
    1b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_sendCommand+0x558>
    1b42:	9e a7       	std	Y+46, r25	; 0x2e
    1b44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_sendCommand+0x54c>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b70:	98 a9       	ldd	r25, Y+48	; 0x30
    1b72:	9c a7       	std	Y+44, r25	; 0x2c
    1b74:	8b a7       	std	Y+43, r24	; 0x2b
    1b76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x594>
    1b7e:	9c a7       	std	Y+44, r25	; 0x2c
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bf e3       	ldi	r27, 0x3F	; 63
    1b94:	8f a3       	std	Y+39, r24	; 0x27
    1b96:	98 a7       	std	Y+40, r25	; 0x28
    1b98:	a9 a7       	std	Y+41, r26	; 0x29
    1b9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	53 e4       	ldi	r21, 0x43	; 67
    1bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8b a3       	std	Y+35, r24	; 0x23
    1bb6:	9c a3       	std	Y+36, r25	; 0x24
    1bb8:	ad a3       	std	Y+37, r26	; 0x25
    1bba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9a a3       	std	Y+34, r25	; 0x22
    1bda:	89 a3       	std	Y+33, r24	; 0x21
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a3       	std	Y+34, r25	; 0x22
    1c1c:	89 a3       	std	Y+33, r24	; 0x21
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <LCD_sendCommand+0x658>
    1c20:	89 e1       	ldi	r24, 0x19	; 25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	98 a3       	std	Y+32, r25	; 0x20
    1c26:	8f 8f       	std	Y+31, r24	; 0x1f
    1c28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_sendCommand+0x646>
    1c30:	98 a3       	std	Y+32, r25	; 0x20
    1c32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	9a a1       	ldd	r25, Y+34	; 0x22
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c40:	9a a1       	ldd	r25, Y+34	; 0x22
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <LCD_sendCommand+0x63a>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c60:	9e 8f       	std	Y+30, r25	; 0x1e
    1c62:	8d 8f       	std	Y+29, r24	; 0x1d
    1c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_sendCommand+0x682>
    1c6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1c70:	fe 01       	movw	r30, r28
    1c72:	ed 59       	subi	r30, 0x9D	; 157
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	98 2f       	mov	r25, r24
    1c7a:	91 70       	andi	r25, 0x01	; 1
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	63 e0       	ldi	r22, 0x03	; 3
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 59       	subi	r30, 0x9D	; 157
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	82 70       	andi	r24, 0x02	; 2
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	95 95       	asr	r25
    1c98:	87 95       	ror	r24
    1c9a:	98 2f       	mov	r25, r24
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	49 2f       	mov	r20, r25
    1ca2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ed 59       	subi	r30, 0x9D	; 157
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	84 70       	andi	r24, 0x04	; 4
    1cb4:	90 70       	andi	r25, 0x00	; 0
    1cb6:	95 95       	asr	r25
    1cb8:	87 95       	ror	r24
    1cba:	95 95       	asr	r25
    1cbc:	87 95       	ror	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	49 2f       	mov	r20, r25
    1cc6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 59       	subi	r30, 0x9D	; 157
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	88 70       	andi	r24, 0x08	; 8
    1cd8:	90 70       	andi	r25, 0x00	; 0
    1cda:	95 95       	asr	r25
    1cdc:	87 95       	ror	r24
    1cde:	95 95       	asr	r25
    1ce0:	87 95       	ror	r24
    1ce2:	95 95       	asr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	66 e0       	ldi	r22, 0x06	; 6
    1cec:	49 2f       	mov	r20, r25
    1cee:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	89 8f       	std	Y+25, r24	; 0x19
    1cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	69 8d       	ldd	r22, Y+25	; 0x19
    1d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a e7       	ldi	r20, 0x7A	; 122
    1d10:	53 e4       	ldi	r21, 0x43	; 67
    1d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9c 8b       	std	Y+20, r25	; 0x14
    1d82:	8b 8b       	std	Y+19, r24	; 0x13
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <LCD_sendCommand+0x7be>
    1d86:	89 e1       	ldi	r24, 0x19	; 25
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	89 8b       	std	Y+17, r24	; 0x11
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	9a 89       	ldd	r25, Y+18	; 0x12
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x7ac>
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <LCD_sendCommand+0x7a0>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	98 89       	ldd	r25, Y+16	; 0x10
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_sendCommand+0x7e8>
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e8       	ldi	r26, 0x80	; 128
    1de6:	bf e3       	ldi	r27, 0x3F	; 63
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a e7       	ldi	r20, 0x7A	; 122
    1dfe:	53 e4       	ldi	r21, 0x43	; 67
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_sendCommand+0x8ac>
    1e74:	89 e1       	ldi	r24, 0x19	; 25
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0x89a>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_sendCommand+0x88e>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_sendCommand+0x8d6>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ec4:	cd 59       	subi	r28, 0x9D	; 157
    1ec6:	df 4f       	sbci	r29, 0xFF	; 255
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	c3 56       	subi	r28, 0x63	; 99
    1eea:	d0 40       	sbci	r29, 0x00	; 0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ed 59       	subi	r30, 0x9D	; 157
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e1 5a       	subi	r30, 0xA1	; 161
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e8       	ldi	r26, 0x80	; 128
    1f14:	bf e3       	ldi	r27, 0x3F	; 63
    1f16:	80 83       	st	Z, r24
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	a2 83       	std	Z+2, r26	; 0x02
    1f1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	8e 01       	movw	r16, r28
    1f20:	05 5a       	subi	r16, 0xA5	; 165
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	fe 01       	movw	r30, r28
    1f26:	e1 5a       	subi	r30, 0xA1	; 161
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	f8 01       	movw	r30, r16
    1f44:	80 83       	st	Z, r24
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	a2 83       	std	Z+2, r26	; 0x02
    1f4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e5 5a       	subi	r30, 0xA5	; 165
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	44 f4       	brge	.+16     	; 0x1f7a <LCD_displayChar+0x9e>
		__ticks = 1;
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e7 5a       	subi	r30, 0xA7	; 167
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
    1f78:	64 c0       	rjmp	.+200    	; 0x2042 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e5 5a       	subi	r30, 0xA5	; 165
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <LCD_displayChar+0xbe>
    1f98:	43 c0       	rjmp	.+134    	; 0x2020 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e1 5a       	subi	r30, 0xA1	; 161
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e2       	ldi	r20, 0x20	; 32
    1fae:	51 e4       	ldi	r21, 0x41	; 65
    1fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	8e 01       	movw	r16, r28
    1fba:	07 5a       	subi	r16, 0xA7	; 167
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	f8 01       	movw	r30, r16
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
    1fd0:	1f c0       	rjmp	.+62     	; 0x2010 <LCD_displayChar+0x134>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 5a       	subi	r30, 0xA9	; 169
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	89 e1       	ldi	r24, 0x19	; 25
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e9 5a       	subi	r30, 0xA9	; 169
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_displayChar+0x10e>
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e9 5a       	subi	r30, 0xA9	; 169
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	de 01       	movw	r26, r28
    1ffa:	a7 5a       	subi	r26, 0xA7	; 167
    1ffc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffe:	fe 01       	movw	r30, r28
    2000:	e7 5a       	subi	r30, 0xA7	; 167
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	11 96       	adiw	r26, 0x01	; 1
    200c:	9c 93       	st	X, r25
    200e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5a       	subi	r30, 0xA7	; 167
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	d1 f6       	brne	.-76     	; 0x1fd2 <LCD_displayChar+0xf6>
    201e:	27 c0       	rjmp	.+78     	; 0x206e <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	8e 01       	movw	r16, r28
    2022:	07 5a       	subi	r16, 0xA7	; 167
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	fe 01       	movw	r30, r28
    2028:	e5 5a       	subi	r30, 0xA5	; 165
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	f8 01       	movw	r30, r16
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	80 83       	st	Z, r24
    2042:	de 01       	movw	r26, r28
    2044:	ab 5a       	subi	r26, 0xAB	; 171
    2046:	bf 4f       	sbci	r27, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	e7 5a       	subi	r30, 0xA7	; 167
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	8d 93       	st	X+, r24
    2054:	9c 93       	st	X, r25
    2056:	fe 01       	movw	r30, r28
    2058:	eb 5a       	subi	r30, 0xAB	; 171
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_displayChar+0x184>
    2064:	fe 01       	movw	r30, r28
    2066:	eb 5a       	subi	r30, 0xAB	; 171
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	62 e0       	ldi	r22, 0x02	; 2
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    2078:	fe 01       	movw	r30, r28
    207a:	ef 5a       	subi	r30, 0xAF	; 175
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e8       	ldi	r26, 0x80	; 128
    2084:	bf e3       	ldi	r27, 0x3F	; 63
    2086:	80 83       	st	Z, r24
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	a2 83       	std	Z+2, r26	; 0x02
    208c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	8e 01       	movw	r16, r28
    2090:	03 5b       	subi	r16, 0xB3	; 179
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	fe 01       	movw	r30, r28
    2096:	ef 5a       	subi	r30, 0xAF	; 175
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a e7       	ldi	r20, 0x7A	; 122
    20a8:	53 e4       	ldi	r21, 0x43	; 67
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	80 83       	st	Z, r24
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	a2 83       	std	Z+2, r26	; 0x02
    20ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20bc:	fe 01       	movw	r30, r28
    20be:	e3 5b       	subi	r30, 0xB3	; 179
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	44 f4       	brge	.+16     	; 0x20ea <LCD_displayChar+0x20e>
		__ticks = 1;
    20da:	fe 01       	movw	r30, r28
    20dc:	e5 5b       	subi	r30, 0xB5	; 181
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	64 c0       	rjmp	.+200    	; 0x21b2 <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    20ea:	fe 01       	movw	r30, r28
    20ec:	e3 5b       	subi	r30, 0xB3	; 179
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	0c f0       	brlt	.+2      	; 0x210a <LCD_displayChar+0x22e>
    2108:	43 c0       	rjmp	.+134    	; 0x2190 <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	fe 01       	movw	r30, r28
    210c:	ef 5a       	subi	r30, 0xAF	; 175
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	8e 01       	movw	r16, r28
    212a:	05 5b       	subi	r16, 0xB5	; 181
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	f8 01       	movw	r30, r16
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	1f c0       	rjmp	.+62     	; 0x2180 <LCD_displayChar+0x2a4>
    2142:	fe 01       	movw	r30, r28
    2144:	e7 5b       	subi	r30, 0xB7	; 183
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	89 e1       	ldi	r24, 0x19	; 25
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	fe 01       	movw	r30, r28
    2152:	e7 5b       	subi	r30, 0xB7	; 183
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayChar+0x27e>
    215e:	fe 01       	movw	r30, r28
    2160:	e7 5b       	subi	r30, 0xB7	; 183
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	de 01       	movw	r26, r28
    216a:	a5 5b       	subi	r26, 0xB5	; 181
    216c:	bf 4f       	sbci	r27, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	e5 5b       	subi	r30, 0xB5	; 181
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	9c 93       	st	X, r25
    217e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	fe 01       	movw	r30, r28
    2182:	e5 5b       	subi	r30, 0xB5	; 181
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	d1 f6       	brne	.-76     	; 0x2142 <LCD_displayChar+0x266>
    218e:	27 c0       	rjmp	.+78     	; 0x21de <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	8e 01       	movw	r16, r28
    2192:	05 5b       	subi	r16, 0xB5	; 181
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
    2196:	fe 01       	movw	r30, r28
    2198:	e3 5b       	subi	r30, 0xB3	; 179
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	de 01       	movw	r26, r28
    21b4:	a9 5b       	subi	r26, 0xB9	; 185
    21b6:	bf 4f       	sbci	r27, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	e5 5b       	subi	r30, 0xB5	; 181
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	8d 93       	st	X+, r24
    21c4:	9c 93       	st	X, r25
    21c6:	fe 01       	movw	r30, r28
    21c8:	e9 5b       	subi	r30, 0xB9	; 185
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_displayChar+0x2f4>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e9 5b       	subi	r30, 0xB9	; 185
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    21de:	fe 01       	movw	r30, r28
    21e0:	ed 59       	subi	r30, 0x9D	; 157
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	80 71       	andi	r24, 0x10	; 16
    21ec:	90 70       	andi	r25, 0x00	; 0
    21ee:	95 95       	asr	r25
    21f0:	87 95       	ror	r24
    21f2:	95 95       	asr	r25
    21f4:	87 95       	ror	r24
    21f6:	95 95       	asr	r25
    21f8:	87 95       	ror	r24
    21fa:	95 95       	asr	r25
    21fc:	87 95       	ror	r24
    21fe:	98 2f       	mov	r25, r24
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	63 e0       	ldi	r22, 0x03	; 3
    2204:	49 2f       	mov	r20, r25
    2206:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    220a:	fe 01       	movw	r30, r28
    220c:	ed 59       	subi	r30, 0x9D	; 157
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	80 72       	andi	r24, 0x20	; 32
    2218:	90 70       	andi	r25, 0x00	; 0
    221a:	95 95       	asr	r25
    221c:	87 95       	ror	r24
    221e:	95 95       	asr	r25
    2220:	87 95       	ror	r24
    2222:	95 95       	asr	r25
    2224:	87 95       	ror	r24
    2226:	95 95       	asr	r25
    2228:	87 95       	ror	r24
    222a:	95 95       	asr	r25
    222c:	87 95       	ror	r24
    222e:	98 2f       	mov	r25, r24
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	64 e0       	ldi	r22, 0x04	; 4
    2234:	49 2f       	mov	r20, r25
    2236:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    223a:	fe 01       	movw	r30, r28
    223c:	ed 59       	subi	r30, 0x9D	; 157
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	80 74       	andi	r24, 0x40	; 64
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	08 2e       	mov	r0, r24
    224c:	89 2f       	mov	r24, r25
    224e:	00 0c       	add	r0, r0
    2250:	88 1f       	adc	r24, r24
    2252:	99 0b       	sbc	r25, r25
    2254:	00 0c       	add	r0, r0
    2256:	88 1f       	adc	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	98 2f       	mov	r25, r24
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	65 e0       	ldi	r22, 0x05	; 5
    2260:	49 2f       	mov	r20, r25
    2262:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    2266:	fe 01       	movw	r30, r28
    2268:	ed 59       	subi	r30, 0x9D	; 157
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	98 2f       	mov	r25, r24
    2270:	99 1f       	adc	r25, r25
    2272:	99 27       	eor	r25, r25
    2274:	99 1f       	adc	r25, r25
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	66 e0       	ldi	r22, 0x06	; 6
    227a:	49 2f       	mov	r20, r25
    227c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    2280:	fe 01       	movw	r30, r28
    2282:	ed 5b       	subi	r30, 0xBD	; 189
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e8       	ldi	r26, 0x80	; 128
    228c:	bf e3       	ldi	r27, 0x3F	; 63
    228e:	80 83       	st	Z, r24
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	a2 83       	std	Z+2, r26	; 0x02
    2294:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	8e 01       	movw	r16, r28
    2298:	01 5c       	subi	r16, 0xC1	; 193
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	fe 01       	movw	r30, r28
    229e:	ed 5b       	subi	r30, 0xBD	; 189
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a e7       	ldi	r20, 0x7A	; 122
    22b0:	53 e4       	ldi	r21, 0x43	; 67
    22b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	80 83       	st	Z, r24
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	a2 83       	std	Z+2, r26	; 0x02
    22c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22c4:	fe 01       	movw	r30, r28
    22c6:	ff 96       	adiw	r30, 0x3f	; 63
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <LCD_displayChar+0x40e>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9e af       	std	Y+62, r25	; 0x3e
    22e6:	8d af       	std	Y+61, r24	; 0x3d
    22e8:	46 c0       	rjmp	.+140    	; 0x2376 <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    22ea:	fe 01       	movw	r30, r28
    22ec:	ff 96       	adiw	r30, 0x3f	; 63
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	64 f5       	brge	.+88     	; 0x235e <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	fe 01       	movw	r30, r28
    2308:	ed 5b       	subi	r30, 0xBD	; 189
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e af       	std	Y+62, r25	; 0x3e
    2332:	8d af       	std	Y+61, r24	; 0x3d
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <LCD_displayChar+0x478>
    2336:	89 e1       	ldi	r24, 0x19	; 25
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c af       	std	Y+60, r25	; 0x3c
    233c:	8b af       	std	Y+59, r24	; 0x3b
    233e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2340:	9c ad       	ldd	r25, Y+60	; 0x3c
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_displayChar+0x466>
    2346:	9c af       	std	Y+60, r25	; 0x3c
    2348:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8d ad       	ldd	r24, Y+61	; 0x3d
    234c:	9e ad       	ldd	r25, Y+62	; 0x3e
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9e af       	std	Y+62, r25	; 0x3e
    2352:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8d ad       	ldd	r24, Y+61	; 0x3d
    2356:	9e ad       	ldd	r25, Y+62	; 0x3e
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <LCD_displayChar+0x45a>
    235c:	16 c0       	rjmp	.+44     	; 0x238a <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	fe 01       	movw	r30, r28
    2360:	ff 96       	adiw	r30, 0x3f	; 63
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e af       	std	Y+62, r25	; 0x3e
    2374:	8d af       	std	Y+61, r24	; 0x3d
    2376:	8d ad       	ldd	r24, Y+61	; 0x3d
    2378:	9e ad       	ldd	r25, Y+62	; 0x3e
    237a:	9a af       	std	Y+58, r25	; 0x3a
    237c:	89 af       	std	Y+57, r24	; 0x39
    237e:	89 ad       	ldd	r24, Y+57	; 0x39
    2380:	9a ad       	ldd	r25, Y+58	; 0x3a
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayChar+0x4a6>
    2386:	9a af       	std	Y+58, r25	; 0x3a
    2388:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	8d ab       	std	Y+53, r24	; 0x35
    239e:	9e ab       	std	Y+54, r25	; 0x36
    23a0:	af ab       	std	Y+55, r26	; 0x37
    23a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6d a9       	ldd	r22, Y+53	; 0x35
    23a6:	7e a9       	ldd	r23, Y+54	; 0x36
    23a8:	8f a9       	ldd	r24, Y+55	; 0x37
    23aa:	98 ad       	ldd	r25, Y+56	; 0x38
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a e7       	ldi	r20, 0x7A	; 122
    23b2:	53 e4       	ldi	r21, 0x43	; 67
    23b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	89 ab       	std	Y+49, r24	; 0x31
    23be:	9a ab       	std	Y+50, r25	; 0x32
    23c0:	ab ab       	std	Y+51, r26	; 0x33
    23c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c4:	69 a9       	ldd	r22, Y+49	; 0x31
    23c6:	7a a9       	ldd	r23, Y+50	; 0x32
    23c8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ca:	9c a9       	ldd	r25, Y+52	; 0x34
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <LCD_displayChar+0x50a>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	98 ab       	std	Y+48, r25	; 0x30
    23e2:	8f a7       	std	Y+47, r24	; 0x2f
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    23e6:	69 a9       	ldd	r22, Y+49	; 0x31
    23e8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ea:	8b a9       	ldd	r24, Y+51	; 0x33
    23ec:	9c a9       	ldd	r25, Y+52	; 0x34
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2400:	7e a9       	ldd	r23, Y+54	; 0x36
    2402:	8f a9       	ldd	r24, Y+55	; 0x37
    2404:	98 ad       	ldd	r25, Y+56	; 0x38
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	98 ab       	std	Y+48, r25	; 0x30
    2424:	8f a7       	std	Y+47, r24	; 0x2f
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_displayChar+0x56a>
    2428:	89 e1       	ldi	r24, 0x19	; 25
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9e a7       	std	Y+46, r25	; 0x2e
    242e:	8d a7       	std	Y+45, r24	; 0x2d
    2430:	8d a5       	ldd	r24, Y+45	; 0x2d
    2432:	9e a5       	ldd	r25, Y+46	; 0x2e
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_displayChar+0x558>
    2438:	9e a7       	std	Y+46, r25	; 0x2e
    243a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	98 ab       	std	Y+48, r25	; 0x30
    2444:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8f a5       	ldd	r24, Y+47	; 0x2f
    2448:	98 a9       	ldd	r25, Y+48	; 0x30
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_displayChar+0x54c>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	69 a9       	ldd	r22, Y+49	; 0x31
    2452:	7a a9       	ldd	r23, Y+50	; 0x32
    2454:	8b a9       	ldd	r24, Y+51	; 0x33
    2456:	9c a9       	ldd	r25, Y+52	; 0x34
    2458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	98 ab       	std	Y+48, r25	; 0x30
    2462:	8f a7       	std	Y+47, r24	; 0x2f
    2464:	8f a5       	ldd	r24, Y+47	; 0x2f
    2466:	98 a9       	ldd	r25, Y+48	; 0x30
    2468:	9c a7       	std	Y+44, r25	; 0x2c
    246a:	8b a7       	std	Y+43, r24	; 0x2b
    246c:	8b a5       	ldd	r24, Y+43	; 0x2b
    246e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_displayChar+0x594>
    2474:	9c a7       	std	Y+44, r25	; 0x2c
    2476:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	8f a3       	std	Y+39, r24	; 0x27
    248c:	98 a7       	std	Y+40, r25	; 0x28
    248e:	a9 a7       	std	Y+41, r26	; 0x29
    2490:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6f a1       	ldd	r22, Y+39	; 0x27
    2494:	78 a5       	ldd	r23, Y+40	; 0x28
    2496:	89 a5       	ldd	r24, Y+41	; 0x29
    2498:	9a a5       	ldd	r25, Y+42	; 0x2a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a e7       	ldi	r20, 0x7A	; 122
    24a0:	53 e4       	ldi	r21, 0x43	; 67
    24a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8b a3       	std	Y+35, r24	; 0x23
    24ac:	9c a3       	std	Y+36, r25	; 0x24
    24ae:	ad a3       	std	Y+37, r26	; 0x25
    24b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_displayChar+0x5f8>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    24d4:	6b a1       	ldd	r22, Y+35	; 0x23
    24d6:	7c a1       	ldd	r23, Y+36	; 0x24
    24d8:	8d a1       	ldd	r24, Y+37	; 0x25
    24da:	9e a1       	ldd	r25, Y+38	; 0x26
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6f a1       	ldd	r22, Y+39	; 0x27
    24ee:	78 a5       	ldd	r23, Y+40	; 0x28
    24f0:	89 a5       	ldd	r24, Y+41	; 0x29
    24f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_displayChar+0x658>
    2516:	89 e1       	ldi	r24, 0x19	; 25
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	98 a3       	std	Y+32, r25	; 0x20
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
    251e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2520:	98 a1       	ldd	r25, Y+32	; 0x20
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_displayChar+0x646>
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_displayChar+0x63a>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9a a3       	std	Y+34, r25	; 0x22
    2550:	89 a3       	std	Y+33, r24	; 0x21
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	9a a1       	ldd	r25, Y+34	; 0x22
    2556:	9e 8f       	std	Y+30, r25	; 0x1e
    2558:	8d 8f       	std	Y+29, r24	; 0x1d
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_displayChar+0x682>
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    2566:	fe 01       	movw	r30, r28
    2568:	ed 59       	subi	r30, 0x9D	; 157
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	63 e0       	ldi	r22, 0x03	; 3
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	82 70       	andi	r24, 0x02	; 2
    258a:	90 70       	andi	r25, 0x00	; 0
    258c:	95 95       	asr	r25
    258e:	87 95       	ror	r24
    2590:	98 2f       	mov	r25, r24
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	64 e0       	ldi	r22, 0x04	; 4
    2596:	49 2f       	mov	r20, r25
    2598:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    259c:	fe 01       	movw	r30, r28
    259e:	ed 59       	subi	r30, 0x9D	; 157
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	84 70       	andi	r24, 0x04	; 4
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	98 2f       	mov	r25, r24
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	65 e0       	ldi	r22, 0x05	; 5
    25ba:	49 2f       	mov	r20, r25
    25bc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 59       	subi	r30, 0x9D	; 157
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	88 70       	andi	r24, 0x08	; 8
    25ce:	90 70       	andi	r25, 0x00	; 0
    25d0:	95 95       	asr	r25
    25d2:	87 95       	ror	r24
    25d4:	95 95       	asr	r25
    25d6:	87 95       	ror	r24
    25d8:	95 95       	asr	r25
    25da:	87 95       	ror	r24
    25dc:	98 2f       	mov	r25, r24
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	66 e0       	ldi	r22, 0x06	; 6
    25e2:	49 2f       	mov	r20, r25
    25e4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e8       	ldi	r26, 0x80	; 128
    25ee:	bf e3       	ldi	r27, 0x3F	; 63
    25f0:	89 8f       	std	Y+25, r24	; 0x19
    25f2:	9a 8f       	std	Y+26, r25	; 0x1a
    25f4:	ab 8f       	std	Y+27, r26	; 0x1b
    25f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	69 8d       	ldd	r22, Y+25	; 0x19
    25fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8d 8b       	std	Y+21, r24	; 0x15
    2612:	9e 8b       	std	Y+22, r25	; 0x16
    2614:	af 8b       	std	Y+23, r26	; 0x17
    2616:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <LCD_displayChar+0x75e>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	69 8d       	ldd	r22, Y+25	; 0x19
    2654:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	0f c0       	rjmp	.+30     	; 0x269a <LCD_displayChar+0x7be>
    267c:	89 e1       	ldi	r24, 0x19	; 25
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
    2684:	89 89       	ldd	r24, Y+17	; 0x11
    2686:	9a 89       	ldd	r25, Y+18	; 0x12
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayChar+0x7ac>
    268c:	9a 8b       	std	Y+18, r25	; 0x12
    268e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8b 89       	ldd	r24, Y+19	; 0x13
    2692:	9c 89       	ldd	r25, Y+20	; 0x14
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <LCD_displayChar+0x7a0>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	98 89       	ldd	r25, Y+16	; 0x10
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayChar+0x7e8>
    26c8:	98 8b       	std	Y+16, r25	; 0x10
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 e8       	ldi	r26, 0x80	; 128
    26dc:	bf e3       	ldi	r27, 0x3F	; 63
    26de:	8b 87       	std	Y+11, r24	; 0x0b
    26e0:	9c 87       	std	Y+12, r25	; 0x0c
    26e2:	ad 87       	std	Y+13, r26	; 0x0d
    26e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	53 e4       	ldi	r21, 0x43	; 67
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
    2702:	a9 87       	std	Y+9, r26	; 0x09
    2704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_displayChar+0x84c>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_displayChar+0x8ac>
    276a:	89 e1       	ldi	r24, 0x19	; 25
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_displayChar+0x89a>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_displayChar+0x88e>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_displayChar+0x8d6>
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27ba:	cd 59       	subi	r28, 0x9D	; 157
    27bc:	df 4f       	sbci	r29, 0xFF	; 255
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <LCD_displayString+0x6>
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	9b 83       	std	Y+3, r25	; 0x03
    27e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27e2:	19 82       	std	Y+1, r1	; 0x01
    27e4:	0e c0       	rjmp	.+28     	; 0x2802 <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	9b 81       	ldd	r25, Y+3	; 0x03
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 0f       	add	r30, r18
    27f4:	f3 1f       	adc	r31, r19
    27f6:	80 81       	ld	r24, Z
    27f8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayChar>
		i++;
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	8f 5f       	subi	r24, 0xFF	; 255
    2800:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	9b 81       	ldd	r25, Y+3	; 0x03
    280c:	fc 01       	movw	r30, r24
    280e:	e2 0f       	add	r30, r18
    2810:	f3 1f       	adc	r31, r19
    2812:	80 81       	ld	r24, Z
    2814:	88 23       	and	r24, r24
    2816:	39 f7       	brne	.-50     	; 0x27e6 <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <LCD_moveCursor+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <LCD_moveCursor+0x8>
    282c:	0f 92       	push	r0
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	8a 83       	std	Y+2, r24	; 0x02
    2834:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	3d 83       	std	Y+5, r19	; 0x05
    283e:	2c 83       	std	Y+4, r18	; 0x04
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	9d 81       	ldd	r25, Y+5	; 0x05
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	91 05       	cpc	r25, r1
    2848:	c1 f0       	breq	.+48     	; 0x287a <LCD_moveCursor+0x56>
    284a:	2c 81       	ldd	r18, Y+4	; 0x04
    284c:	3d 81       	ldd	r19, Y+5	; 0x05
    284e:	22 30       	cpi	r18, 0x02	; 2
    2850:	31 05       	cpc	r19, r1
    2852:	2c f4       	brge	.+10     	; 0x285e <LCD_moveCursor+0x3a>
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	61 f0       	breq	.+24     	; 0x2874 <LCD_moveCursor+0x50>
    285c:	19 c0       	rjmp	.+50     	; 0x2890 <LCD_moveCursor+0x6c>
    285e:	2c 81       	ldd	r18, Y+4	; 0x04
    2860:	3d 81       	ldd	r19, Y+5	; 0x05
    2862:	22 30       	cpi	r18, 0x02	; 2
    2864:	31 05       	cpc	r19, r1
    2866:	69 f0       	breq	.+26     	; 0x2882 <LCD_moveCursor+0x5e>
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	9d 81       	ldd	r25, Y+5	; 0x05
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	91 05       	cpc	r25, r1
    2870:	61 f0       	breq	.+24     	; 0x288a <LCD_moveCursor+0x66>
    2872:	0e c0       	rjmp	.+28     	; 0x2890 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	0b c0       	rjmp	.+22     	; 0x2890 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	80 5c       	subi	r24, 0xC0	; 192
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	80 5f       	subi	r24, 0xF0	; 240
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	80 5b       	subi	r24, 0xB0	; 176
    288e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	80 68       	ori	r24, 0x80	; 128
    2894:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <LCD_displayStringRowColumn+0x6>
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <LCD_displayStringRowColumn+0x8>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	6a 83       	std	Y+2, r22	; 0x02
    28b8:	5c 83       	std	Y+4, r21	; 0x04
    28ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	6a 81       	ldd	r22, Y+2	; 0x02
    28c0:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_moveCursor>
	LCD_displayString(str);
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LCD_displayString>
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint16 data){
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	62 97       	sbiw	r28, 0x12	; 18
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	9a 8b       	std	Y+18, r25	; 0x12
    28f0:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    28f2:	89 89       	ldd	r24, Y+17	; 0x11
    28f4:	9a 89       	ldd	r25, Y+18	; 0x12
    28f6:	9e 01       	movw	r18, r28
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	b9 01       	movw	r22, r18
    28fe:	4a e0       	ldi	r20, 0x0A	; 10
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	0e 94 19 15 	call	0x2a32	; 0x2a32 <itoa>
	LCD_displayString(buff);
    2906:	ce 01       	movw	r24, r28
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <LCD_displayString>
}
    290e:	62 96       	adiw	r28, 0x12	; 18
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
}
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <Buzzer_init>:
#include "buzzer.h"

/*
 * Initializes the buzzer pin direction and turn off the buzzer
 */
void Buzzer_init(void){
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62

	/* set buzzer pin direction to be output */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	65 e0       	ldi	r22, 0x05	; 5
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>

}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <Buzzer_on>:

/*
 * Activates the buzzer.
 */
void Buzzer_on(void){
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62

	/* activate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,HIGH);
    2954:	82 e0       	ldi	r24, 0x02	; 2
    2956:	65 e0       	ldi	r22, 0x05	; 5
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>

}
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <Buzzer_off>:

/*
 * Deactivates the buzzer.
 */
void Buzzer_off(void){
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62

	/* deactivate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOW);
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	65 e0       	ldi	r22, 0x05	; 5
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>

}
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <main>:
/* LED Positive Logic configuration */
#define LED_ON             HIGH
#define LED_OFF            LOW

int main(void)
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	uint8 data_received;

	/* Initialize the SPI driver as Slave */
	SPI_initSlave();
    2986:	0e 94 c1 05 	call	0xb82	; 0xb82 <SPI_initSlave>

	GPIO_setupPinDirection(PORTC_ID,PIN3_ID,PIN_OUTPUT); /* Configure PC3 as output pin */
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 6e 06 	call	0xcdc	; 0xcdc <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN3_ID,LED_OFF); /* Turn OFF the LED */
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	63 e0       	ldi	r22, 0x03	; 3
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    {
    	/*
    	 * Receive button status from the MC1 using SPI,
    	 * and send SPI_DEFAULT_DATA_VALUE as no need to send data to other device.
    	 */
		data_received = SPI_sendReceive(SPI_DEFAULT_VALUE);
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	0e 94 e7 05 	call	0xbce	; 0xbce <SPI_sendReceive>
    29a4:	89 83       	std	Y+1, r24	; 0x01

		if(data_received == BUTTON_PRESSED)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	31 f4       	brne	.+12     	; 0x29b8 <main+0x3c>
		{
			GPIO_writePin(PORTC_ID,PIN3_ID,LED_ON); /* Turn ON the LED */
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	63 e0       	ldi	r22, 0x03	; 3
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    29b6:	f3 cf       	rjmp	.-26     	; 0x299e <main+0x22>
		}
		else
		{
			GPIO_writePin(PORTC_ID,PIN3_ID,LED_OFF); /* Turn OFF the LED */
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	63 e0       	ldi	r22, 0x03	; 3
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_writePin>
    29c2:	ed cf       	rjmp	.-38     	; 0x299e <main+0x22>

000029c4 <__prologue_saves__>:
    29c4:	2f 92       	push	r2
    29c6:	3f 92       	push	r3
    29c8:	4f 92       	push	r4
    29ca:	5f 92       	push	r5
    29cc:	6f 92       	push	r6
    29ce:	7f 92       	push	r7
    29d0:	8f 92       	push	r8
    29d2:	9f 92       	push	r9
    29d4:	af 92       	push	r10
    29d6:	bf 92       	push	r11
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	ca 1b       	sub	r28, r26
    29ee:	db 0b       	sbc	r29, r27
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	09 94       	ijmp

000029fc <__epilogue_restores__>:
    29fc:	2a 88       	ldd	r2, Y+18	; 0x12
    29fe:	39 88       	ldd	r3, Y+17	; 0x11
    2a00:	48 88       	ldd	r4, Y+16	; 0x10
    2a02:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a04:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a06:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a08:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a10:	c8 84       	ldd	r12, Y+8	; 0x08
    2a12:	df 80       	ldd	r13, Y+7	; 0x07
    2a14:	ee 80       	ldd	r14, Y+6	; 0x06
    2a16:	fd 80       	ldd	r15, Y+5	; 0x05
    2a18:	0c 81       	ldd	r16, Y+4	; 0x04
    2a1a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a20:	ce 0f       	add	r28, r30
    2a22:	d1 1d       	adc	r29, r1
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	ed 01       	movw	r28, r26
    2a30:	08 95       	ret

00002a32 <itoa>:
    2a32:	fb 01       	movw	r30, r22
    2a34:	9f 01       	movw	r18, r30
    2a36:	e8 94       	clt
    2a38:	42 30       	cpi	r20, 0x02	; 2
    2a3a:	c4 f0       	brlt	.+48     	; 0x2a6c <itoa+0x3a>
    2a3c:	45 32       	cpi	r20, 0x25	; 37
    2a3e:	b4 f4       	brge	.+44     	; 0x2a6c <itoa+0x3a>
    2a40:	4a 30       	cpi	r20, 0x0A	; 10
    2a42:	29 f4       	brne	.+10     	; 0x2a4e <itoa+0x1c>
    2a44:	97 fb       	bst	r25, 7
    2a46:	1e f4       	brtc	.+6      	; 0x2a4e <itoa+0x1c>
    2a48:	90 95       	com	r25
    2a4a:	81 95       	neg	r24
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	64 2f       	mov	r22, r20
    2a50:	77 27       	eor	r23, r23
    2a52:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <__udivmodhi4>
    2a56:	80 5d       	subi	r24, 0xD0	; 208
    2a58:	8a 33       	cpi	r24, 0x3A	; 58
    2a5a:	0c f0       	brlt	.+2      	; 0x2a5e <itoa+0x2c>
    2a5c:	89 5d       	subi	r24, 0xD9	; 217
    2a5e:	81 93       	st	Z+, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	a1 f7       	brne	.-24     	; 0x2a4e <itoa+0x1c>
    2a66:	16 f4       	brtc	.+4      	; 0x2a6c <itoa+0x3a>
    2a68:	5d e2       	ldi	r21, 0x2D	; 45
    2a6a:	51 93       	st	Z+, r21
    2a6c:	10 82       	st	Z, r1
    2a6e:	c9 01       	movw	r24, r18
    2a70:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <strrev>

00002a74 <strrev>:
    2a74:	dc 01       	movw	r26, r24
    2a76:	fc 01       	movw	r30, r24
    2a78:	67 2f       	mov	r22, r23
    2a7a:	71 91       	ld	r23, Z+
    2a7c:	77 23       	and	r23, r23
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <strrev+0x4>
    2a80:	32 97       	sbiw	r30, 0x02	; 2
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <strrev+0x18>
    2a84:	7c 91       	ld	r23, X
    2a86:	6d 93       	st	X+, r22
    2a88:	70 83       	st	Z, r23
    2a8a:	62 91       	ld	r22, -Z
    2a8c:	ae 17       	cp	r26, r30
    2a8e:	bf 07       	cpc	r27, r31
    2a90:	c8 f3       	brcs	.-14     	; 0x2a84 <strrev+0x10>
    2a92:	08 95       	ret

00002a94 <__udivmodhi4>:
    2a94:	aa 1b       	sub	r26, r26
    2a96:	bb 1b       	sub	r27, r27
    2a98:	51 e1       	ldi	r21, 0x11	; 17
    2a9a:	07 c0       	rjmp	.+14     	; 0x2aaa <__udivmodhi4_ep>

00002a9c <__udivmodhi4_loop>:
    2a9c:	aa 1f       	adc	r26, r26
    2a9e:	bb 1f       	adc	r27, r27
    2aa0:	a6 17       	cp	r26, r22
    2aa2:	b7 07       	cpc	r27, r23
    2aa4:	10 f0       	brcs	.+4      	; 0x2aaa <__udivmodhi4_ep>
    2aa6:	a6 1b       	sub	r26, r22
    2aa8:	b7 0b       	sbc	r27, r23

00002aaa <__udivmodhi4_ep>:
    2aaa:	88 1f       	adc	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	5a 95       	dec	r21
    2ab0:	a9 f7       	brne	.-22     	; 0x2a9c <__udivmodhi4_loop>
    2ab2:	80 95       	com	r24
    2ab4:	90 95       	com	r25
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	08 95       	ret

00002abc <_exit>:
    2abc:	f8 94       	cli

00002abe <__stop_program>:
    2abe:	ff cf       	rjmp	.-2      	; 0x2abe <__stop_program>
