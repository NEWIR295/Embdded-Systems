
ADC_EX1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000284e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000284e  000028c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d34  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d27  00000000  00000000  00004610  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005477  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000055e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000811b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 25 14 	jmp	0x284a	; 0x284a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
/* used libraries */
#include "../LCD_DRIVER/lcd.h"
#include "../ADC_DRIVER/adc.h"

/* main function */
int main(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <main+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint16 potValue;
	LCD_init();
     b40:	0e 94 c5 05 	call	0xb8a	; 0xb8a <LCD_init>
	ADC_init();
     b44:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <ADC_init>
	LCD_displayString("ADC value = ");
     b48:	80 e6       	ldi	r24, 0x60	; 96
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
	while(1){
		potValue = ADC_readChannel(0);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 79 13 	call	0x26f2	; 0x26f2 <ADC_readChannel>
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0,12);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	6c e0       	ldi	r22, 0x0C	; 12
     b5e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <LCD_moveCursor>

		if(potValue >=1000){
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	23 e0       	ldi	r18, 0x03	; 3
     b68:	88 3e       	cpi	r24, 0xE8	; 232
     b6a:	92 07       	cpc	r25, r18
     b6c:	28 f0       	brcs	.+10     	; 0xb78 <main+0x42>
			LCD_integerToString(potValue);
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <LCD_integerToString>
     b76:	ec cf       	rjmp	.-40     	; 0xb50 <main+0x1a>
		}
		else{
			LCD_integerToString(potValue);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <LCD_integerToString>
			LCD_displayString(" ");
     b80:	8d e6       	ldi	r24, 0x6D	; 109
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
     b88:	e3 cf       	rjmp	.-58     	; 0xb50 <main+0x1a>

00000b8a <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2e 97       	sbiw	r28, 0x0e	; 14
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	62 e0       	ldi	r22, 0x02	; 2
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 ea       	ldi	r26, 0xA0	; 160
     bb8:	b1 e4       	ldi	r27, 0x41	; 65
     bba:	8b 87       	std	Y+11, r24	; 0x0b
     bbc:	9c 87       	std	Y+12, r25	; 0x0c
     bbe:	ad 87       	std	Y+13, r26	; 0x0d
     bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4a e7       	ldi	r20, 0x7A	; 122
     bd0:	55 e4       	ldi	r21, 0x45	; 69
     bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	8f 83       	std	Y+7, r24	; 0x07
     bdc:	98 87       	std	Y+8, r25	; 0x08
     bde:	a9 87       	std	Y+9, r26	; 0x09
     be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be2:	6f 81       	ldd	r22, Y+7	; 0x07
     be4:	78 85       	ldd	r23, Y+8	; 0x08
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e8       	ldi	r20, 0x80	; 128
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bf6:	88 23       	and	r24, r24
     bf8:	2c f4       	brge	.+10     	; 0xc04 <LCD_init+0x7a>
		__ticks = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9e 83       	std	Y+6, r25	; 0x06
     c00:	8d 83       	std	Y+5, r24	; 0x05
     c02:	3f c0       	rjmp	.+126    	; 0xc82 <LCD_init+0xf8>
	else if (__tmp > 65535)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	57 e4       	ldi	r21, 0x47	; 71
     c14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c18:	18 16       	cp	r1, r24
     c1a:	4c f5       	brge	.+82     	; 0xc6e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c20:	8d 85       	ldd	r24, Y+13	; 0x0d
     c22:	9e 85       	ldd	r25, Y+14	; 0x0e
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e2       	ldi	r20, 0x20	; 32
     c2a:	51 e4       	ldi	r21, 0x41	; 65
     c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <LCD_init+0xda>
     c46:	80 e9       	ldi	r24, 0x90	; 144
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9c 83       	std	Y+4, r25	; 0x04
     c4c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <LCD_init+0xc8>
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	69 f7       	brne	.-38     	; 0xc46 <LCD_init+0xbc>
     c6c:	14 c0       	rjmp	.+40     	; 0xc96 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	9e 83       	std	Y+6, r25	; 0x06
     c80:	8d 83       	std	Y+5, r24	; 0x05
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <LCD_init+0x104>
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	63 e0       	ldi	r22, 0x03	; 3
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	64 e0       	ldi	r22, 0x04	; 4
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	65 e0       	ldi	r22, 0x05	; 5
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	66 e0       	ldi	r22, 0x06	; 6
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
     cbe:	83 e3       	ldi	r24, 0x33	; 51
     cc0:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
     cc4:	82 e3       	ldi	r24, 0x32	; 50
     cc6:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
     cca:	88 e2       	ldi	r24, 0x28	; 40
     ccc:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
     cd0:	8c e0       	ldi	r24, 0x0C	; 12
     cd2:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>

}
     cdc:	2e 96       	adiw	r28, 0x0e	; 14
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	c3 56       	subi	r28, 0x63	; 99
     cfc:	d0 40       	sbci	r29, 0x00	; 0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	fe 01       	movw	r30, r28
     d0a:	ed 59       	subi	r30, 0x9D	; 157
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
     d1a:	fe 01       	movw	r30, r28
     d1c:	e1 5a       	subi	r30, 0xA1	; 161
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e8       	ldi	r26, 0x80	; 128
     d26:	bf e3       	ldi	r27, 0x3F	; 63
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d30:	8e 01       	movw	r16, r28
     d32:	05 5a       	subi	r16, 0xA5	; 165
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	e1 5a       	subi	r30, 0xA1	; 161
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a e7       	ldi	r20, 0x7A	; 122
     d4a:	55 e4       	ldi	r21, 0x45	; 69
     d4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	f8 01       	movw	r30, r16
     d56:	80 83       	st	Z, r24
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	a2 83       	std	Z+2, r26	; 0x02
     d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d5e:	fe 01       	movw	r30, r28
     d60:	e5 5a       	subi	r30, 0xA5	; 165
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	44 f4       	brge	.+16     	; 0xd8c <LCD_sendCommand+0x9e>
		__ticks = 1;
     d7c:	fe 01       	movw	r30, r28
     d7e:	e7 5a       	subi	r30, 0xA7	; 167
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	64 c0       	rjmp	.+200    	; 0xe54 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
     d8c:	fe 01       	movw	r30, r28
     d8e:	e5 5a       	subi	r30, 0xA5	; 165
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	0c f0       	brlt	.+2      	; 0xdac <LCD_sendCommand+0xbe>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	fe 01       	movw	r30, r28
     dae:	e1 5a       	subi	r30, 0xA1	; 161
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	8e 01       	movw	r16, r28
     dcc:	07 5a       	subi	r16, 0xA7	; 167
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	f8 01       	movw	r30, r16
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
     de2:	1f c0       	rjmp	.+62     	; 0xe22 <LCD_sendCommand+0x134>
     de4:	fe 01       	movw	r30, r28
     de6:	e9 5a       	subi	r30, 0xA9	; 169
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 e9       	ldi	r24, 0x90	; 144
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	fe 01       	movw	r30, r28
     df4:	e9 5a       	subi	r30, 0xA9	; 169
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <LCD_sendCommand+0x10e>
     e00:	fe 01       	movw	r30, r28
     e02:	e9 5a       	subi	r30, 0xA9	; 169
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	de 01       	movw	r26, r28
     e0c:	a7 5a       	subi	r26, 0xA7	; 167
     e0e:	bf 4f       	sbci	r27, 0xFF	; 255
     e10:	fe 01       	movw	r30, r28
     e12:	e7 5a       	subi	r30, 0xA7	; 167
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	11 96       	adiw	r26, 0x01	; 1
     e1e:	9c 93       	st	X, r25
     e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	fe 01       	movw	r30, r28
     e24:	e7 5a       	subi	r30, 0xA7	; 167
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	d1 f6       	brne	.-76     	; 0xde4 <LCD_sendCommand+0xf6>
     e30:	27 c0       	rjmp	.+78     	; 0xe80 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	8e 01       	movw	r16, r28
     e34:	07 5a       	subi	r16, 0xA7	; 167
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	fe 01       	movw	r30, r28
     e3a:	e5 5a       	subi	r30, 0xA5	; 165
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	f8 01       	movw	r30, r16
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
     e54:	de 01       	movw	r26, r28
     e56:	ab 5a       	subi	r26, 0xAB	; 171
     e58:	bf 4f       	sbci	r27, 0xFF	; 255
     e5a:	fe 01       	movw	r30, r28
     e5c:	e7 5a       	subi	r30, 0xA7	; 167
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	8d 93       	st	X+, r24
     e66:	9c 93       	st	X, r25
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 5a       	subi	r30, 0xAB	; 171
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	80 81       	ld	r24, Z
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <LCD_sendCommand+0x184>
     e76:	fe 01       	movw	r30, r28
     e78:	eb 5a       	subi	r30, 0xAB	; 171
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
     e8a:	fe 01       	movw	r30, r28
     e8c:	ef 5a       	subi	r30, 0xAF	; 175
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a0 e8       	ldi	r26, 0x80	; 128
     e96:	bf e3       	ldi	r27, 0x3F	; 63
     e98:	80 83       	st	Z, r24
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	a2 83       	std	Z+2, r26	; 0x02
     e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	8e 01       	movw	r16, r28
     ea2:	03 5b       	subi	r16, 0xB3	; 179
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	fe 01       	movw	r30, r28
     ea8:	ef 5a       	subi	r30, 0xAF	; 175
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a e7       	ldi	r20, 0x7A	; 122
     eba:	55 e4       	ldi	r21, 0x45	; 69
     ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	f8 01       	movw	r30, r16
     ec6:	80 83       	st	Z, r24
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	a2 83       	std	Z+2, r26	; 0x02
     ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ece:	fe 01       	movw	r30, r28
     ed0:	e3 5b       	subi	r30, 0xB3	; 179
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	44 f4       	brge	.+16     	; 0xefc <LCD_sendCommand+0x20e>
		__ticks = 1;
     eec:	fe 01       	movw	r30, r28
     eee:	e5 5b       	subi	r30, 0xB5	; 181
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	64 c0       	rjmp	.+200    	; 0xfc4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     efc:	fe 01       	movw	r30, r28
     efe:	e3 5b       	subi	r30, 0xB3	; 179
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f16:	18 16       	cp	r1, r24
     f18:	0c f0       	brlt	.+2      	; 0xf1c <LCD_sendCommand+0x22e>
     f1a:	43 c0       	rjmp	.+134    	; 0xfa2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1c:	fe 01       	movw	r30, r28
     f1e:	ef 5a       	subi	r30, 0xAF	; 175
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	60 81       	ld	r22, Z
     f24:	71 81       	ldd	r23, Z+1	; 0x01
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	93 81       	ldd	r25, Z+3	; 0x03
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	8e 01       	movw	r16, r28
     f3c:	05 5b       	subi	r16, 0xB5	; 181
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	f8 01       	movw	r30, r16
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <LCD_sendCommand+0x2a4>
     f54:	fe 01       	movw	r30, r28
     f56:	e7 5b       	subi	r30, 0xB7	; 183
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 e9       	ldi	r24, 0x90	; 144
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
     f62:	fe 01       	movw	r30, r28
     f64:	e7 5b       	subi	r30, 0xB7	; 183
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <LCD_sendCommand+0x27e>
     f70:	fe 01       	movw	r30, r28
     f72:	e7 5b       	subi	r30, 0xB7	; 183
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	de 01       	movw	r26, r28
     f7c:	a5 5b       	subi	r26, 0xB5	; 181
     f7e:	bf 4f       	sbci	r27, 0xFF	; 255
     f80:	fe 01       	movw	r30, r28
     f82:	e5 5b       	subi	r30, 0xB5	; 181
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	11 96       	adiw	r26, 0x01	; 1
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f92:	fe 01       	movw	r30, r28
     f94:	e5 5b       	subi	r30, 0xB5	; 181
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	d1 f6       	brne	.-76     	; 0xf54 <LCD_sendCommand+0x266>
     fa0:	27 c0       	rjmp	.+78     	; 0xff0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa2:	8e 01       	movw	r16, r28
     fa4:	05 5b       	subi	r16, 0xB5	; 181
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	fe 01       	movw	r30, r28
     faa:	e3 5b       	subi	r30, 0xB3	; 179
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	f8 01       	movw	r30, r16
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
     fc4:	de 01       	movw	r26, r28
     fc6:	a9 5b       	subi	r26, 0xB9	; 185
     fc8:	bf 4f       	sbci	r27, 0xFF	; 255
     fca:	fe 01       	movw	r30, r28
     fcc:	e5 5b       	subi	r30, 0xB5	; 181
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	8d 93       	st	X+, r24
     fd6:	9c 93       	st	X, r25
     fd8:	fe 01       	movw	r30, r28
     fda:	e9 5b       	subi	r30, 0xB9	; 185
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <LCD_sendCommand+0x2f4>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e9 5b       	subi	r30, 0xB9	; 185
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
     ff0:	fe 01       	movw	r30, r28
     ff2:	ed 59       	subi	r30, 0x9D	; 157
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 71       	andi	r24, 0x10	; 16
     ffe:	90 70       	andi	r25, 0x00	; 0
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	95 95       	asr	r25
    1006:	87 95       	ror	r24
    1008:	95 95       	asr	r25
    100a:	87 95       	ror	r24
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	98 2f       	mov	r25, r24
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	63 e0       	ldi	r22, 0x03	; 3
    1016:	49 2f       	mov	r20, r25
    1018:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
    101c:	fe 01       	movw	r30, r28
    101e:	ed 59       	subi	r30, 0x9D	; 157
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 81       	ld	r24, Z
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	80 72       	andi	r24, 0x20	; 32
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	95 95       	asr	r25
    102e:	87 95       	ror	r24
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	95 95       	asr	r25
    1036:	87 95       	ror	r24
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	98 2f       	mov	r25, r24
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	64 e0       	ldi	r22, 0x04	; 4
    1046:	49 2f       	mov	r20, r25
    1048:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    104c:	fe 01       	movw	r30, r28
    104e:	ed 59       	subi	r30, 0x9D	; 157
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 74       	andi	r24, 0x40	; 64
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	08 2e       	mov	r0, r24
    105e:	89 2f       	mov	r24, r25
    1060:	00 0c       	add	r0, r0
    1062:	88 1f       	adc	r24, r24
    1064:	99 0b       	sbc	r25, r25
    1066:	00 0c       	add	r0, r0
    1068:	88 1f       	adc	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	98 2f       	mov	r25, r24
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	65 e0       	ldi	r22, 0x05	; 5
    1072:	49 2f       	mov	r20, r25
    1074:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1078:	fe 01       	movw	r30, r28
    107a:	ed 59       	subi	r30, 0x9D	; 157
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	80 81       	ld	r24, Z
    1080:	98 2f       	mov	r25, r24
    1082:	99 1f       	adc	r25, r25
    1084:	99 27       	eor	r25, r25
    1086:	99 1f       	adc	r25, r25
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	66 e0       	ldi	r22, 0x06	; 6
    108c:	49 2f       	mov	r20, r25
    108e:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1092:	fe 01       	movw	r30, r28
    1094:	ed 5b       	subi	r30, 0xBD	; 189
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e8       	ldi	r26, 0x80	; 128
    109e:	bf e3       	ldi	r27, 0x3F	; 63
    10a0:	80 83       	st	Z, r24
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	a2 83       	std	Z+2, r26	; 0x02
    10a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	8e 01       	movw	r16, r28
    10aa:	01 5c       	subi	r16, 0xC1	; 193
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	fe 01       	movw	r30, r28
    10b0:	ed 5b       	subi	r30, 0xBD	; 189
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4a e7       	ldi	r20, 0x7A	; 122
    10c2:	55 e4       	ldi	r21, 0x45	; 69
    10c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d6:	fe 01       	movw	r30, r28
    10d8:	ff 96       	adiw	r30, 0x3f	; 63
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <LCD_sendCommand+0x40e>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e af       	std	Y+62, r25	; 0x3e
    10f8:	8d af       	std	Y+61, r24	; 0x3d
    10fa:	46 c0       	rjmp	.+140    	; 0x1188 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    10fc:	fe 01       	movw	r30, r28
    10fe:	ff 96       	adiw	r30, 0x3f	; 63
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	64 f5       	brge	.+88     	; 0x1170 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	fe 01       	movw	r30, r28
    111a:	ed 5b       	subi	r30, 0xBD	; 189
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e af       	std	Y+62, r25	; 0x3e
    1144:	8d af       	std	Y+61, r24	; 0x3d
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <LCD_sendCommand+0x478>
    1148:	80 e9       	ldi	r24, 0x90	; 144
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c af       	std	Y+60, r25	; 0x3c
    114e:	8b af       	std	Y+59, r24	; 0x3b
    1150:	8b ad       	ldd	r24, Y+59	; 0x3b
    1152:	9c ad       	ldd	r25, Y+60	; 0x3c
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <LCD_sendCommand+0x466>
    1158:	9c af       	std	Y+60, r25	; 0x3c
    115a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d ad       	ldd	r24, Y+61	; 0x3d
    115e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e af       	std	Y+62, r25	; 0x3e
    1164:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d ad       	ldd	r24, Y+61	; 0x3d
    1168:	9e ad       	ldd	r25, Y+62	; 0x3e
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <LCD_sendCommand+0x45a>
    116e:	16 c0       	rjmp	.+44     	; 0x119c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	fe 01       	movw	r30, r28
    1172:	ff 96       	adiw	r30, 0x3f	; 63
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9e af       	std	Y+62, r25	; 0x3e
    1186:	8d af       	std	Y+61, r24	; 0x3d
    1188:	8d ad       	ldd	r24, Y+61	; 0x3d
    118a:	9e ad       	ldd	r25, Y+62	; 0x3e
    118c:	9a af       	std	Y+58, r25	; 0x3a
    118e:	89 af       	std	Y+57, r24	; 0x39
    1190:	89 ad       	ldd	r24, Y+57	; 0x39
    1192:	9a ad       	ldd	r25, Y+58	; 0x3a
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <LCD_sendCommand+0x4a6>
    1198:	9a af       	std	Y+58, r25	; 0x3a
    119a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e8       	ldi	r26, 0x80	; 128
    11ac:	bf e3       	ldi	r27, 0x3F	; 63
    11ae:	8d ab       	std	Y+53, r24	; 0x35
    11b0:	9e ab       	std	Y+54, r25	; 0x36
    11b2:	af ab       	std	Y+55, r26	; 0x37
    11b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6d a9       	ldd	r22, Y+53	; 0x35
    11b8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ba:	8f a9       	ldd	r24, Y+55	; 0x37
    11bc:	98 ad       	ldd	r25, Y+56	; 0x38
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	55 e4       	ldi	r21, 0x45	; 69
    11c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	89 ab       	std	Y+49, r24	; 0x31
    11d0:	9a ab       	std	Y+50, r25	; 0x32
    11d2:	ab ab       	std	Y+51, r26	; 0x33
    11d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <LCD_sendCommand+0x50a>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	98 ab       	std	Y+48, r25	; 0x30
    11f4:	8f a7       	std	Y+47, r24	; 0x2f
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    11f8:	69 a9       	ldd	r22, Y+49	; 0x31
    11fa:	7a a9       	ldd	r23, Y+50	; 0x32
    11fc:	8b a9       	ldd	r24, Y+51	; 0x33
    11fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6d a9       	ldd	r22, Y+53	; 0x35
    1212:	7e a9       	ldd	r23, Y+54	; 0x36
    1214:	8f a9       	ldd	r24, Y+55	; 0x37
    1216:	98 ad       	ldd	r25, Y+56	; 0x38
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	98 ab       	std	Y+48, r25	; 0x30
    1236:	8f a7       	std	Y+47, r24	; 0x2f
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <LCD_sendCommand+0x56a>
    123a:	80 e9       	ldi	r24, 0x90	; 144
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	9e a7       	std	Y+46, r25	; 0x2e
    1240:	8d a7       	std	Y+45, r24	; 0x2d
    1242:	8d a5       	ldd	r24, Y+45	; 0x2d
    1244:	9e a5       	ldd	r25, Y+46	; 0x2e
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_sendCommand+0x558>
    124a:	9e a7       	std	Y+46, r25	; 0x2e
    124c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1250:	98 a9       	ldd	r25, Y+48	; 0x30
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	98 ab       	std	Y+48, r25	; 0x30
    1256:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8f a5       	ldd	r24, Y+47	; 0x2f
    125a:	98 a9       	ldd	r25, Y+48	; 0x30
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <LCD_sendCommand+0x54c>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	69 a9       	ldd	r22, Y+49	; 0x31
    1264:	7a a9       	ldd	r23, Y+50	; 0x32
    1266:	8b a9       	ldd	r24, Y+51	; 0x33
    1268:	9c a9       	ldd	r25, Y+52	; 0x34
    126a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	98 ab       	std	Y+48, r25	; 0x30
    1274:	8f a7       	std	Y+47, r24	; 0x2f
    1276:	8f a5       	ldd	r24, Y+47	; 0x2f
    1278:	98 a9       	ldd	r25, Y+48	; 0x30
    127a:	9c a7       	std	Y+44, r25	; 0x2c
    127c:	8b a7       	std	Y+43, r24	; 0x2b
    127e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1280:	9c a5       	ldd	r25, Y+44	; 0x2c
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <LCD_sendCommand+0x594>
    1286:	9c a7       	std	Y+44, r25	; 0x2c
    1288:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	62 e0       	ldi	r22, 0x02	; 2
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a e7       	ldi	r20, 0x7A	; 122
    12b2:	55 e4       	ldi	r21, 0x45	; 69
    12b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_sendCommand+0x658>
    1328:	80 e9       	ldi	r24, 0x90	; 144
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_sendCommand+0x646>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_sendCommand+0x63a>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_sendCommand+0x682>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1378:	fe 01       	movw	r30, r28
    137a:	ed 59       	subi	r30, 0x9D	; 157
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	98 2f       	mov	r25, r24
    1382:	91 70       	andi	r25, 0x01	; 1
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	63 e0       	ldi	r22, 0x03	; 3
    1388:	49 2f       	mov	r20, r25
    138a:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    138e:	fe 01       	movw	r30, r28
    1390:	ed 59       	subi	r30, 0x9D	; 157
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	82 70       	andi	r24, 0x02	; 2
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	95 95       	asr	r25
    13a0:	87 95       	ror	r24
    13a2:	98 2f       	mov	r25, r24
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	49 2f       	mov	r20, r25
    13aa:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    13ae:	fe 01       	movw	r30, r28
    13b0:	ed 59       	subi	r30, 0x9D	; 157
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	84 70       	andi	r24, 0x04	; 4
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	95 95       	asr	r25
    13c0:	87 95       	ror	r24
    13c2:	95 95       	asr	r25
    13c4:	87 95       	ror	r24
    13c6:	98 2f       	mov	r25, r24
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	49 2f       	mov	r20, r25
    13ce:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    13d2:	fe 01       	movw	r30, r28
    13d4:	ed 59       	subi	r30, 0x9D	; 157
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	88 70       	andi	r24, 0x08	; 8
    13e0:	90 70       	andi	r25, 0x00	; 0
    13e2:	95 95       	asr	r25
    13e4:	87 95       	ror	r24
    13e6:	95 95       	asr	r25
    13e8:	87 95       	ror	r24
    13ea:	95 95       	asr	r25
    13ec:	87 95       	ror	r24
    13ee:	98 2f       	mov	r25, r24
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	66 e0       	ldi	r22, 0x06	; 6
    13f4:	49 2f       	mov	r20, r25
    13f6:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e8       	ldi	r26, 0x80	; 128
    1400:	bf e3       	ldi	r27, 0x3F	; 63
    1402:	89 8f       	std	Y+25, r24	; 0x19
    1404:	9a 8f       	std	Y+26, r25	; 0x1a
    1406:	ab 8f       	std	Y+27, r26	; 0x1b
    1408:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a e7       	ldi	r20, 0x7A	; 122
    1418:	55 e4       	ldi	r21, 0x45	; 69
    141a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8d 8b       	std	Y+21, r24	; 0x15
    1424:	9e 8b       	std	Y+22, r25	; 0x16
    1426:	af 8b       	std	Y+23, r26	; 0x17
    1428:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142a:	6d 89       	ldd	r22, Y+21	; 0x15
    142c:	7e 89       	ldd	r23, Y+22	; 0x16
    142e:	8f 89       	ldd	r24, Y+23	; 0x17
    1430:	98 8d       	ldd	r25, Y+24	; 0x18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <LCD_sendCommand+0x75e>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	69 8d       	ldd	r22, Y+25	; 0x19
    1466:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9c 8b       	std	Y+20, r25	; 0x14
    148a:	8b 8b       	std	Y+19, r24	; 0x13
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_sendCommand+0x7be>
    148e:	80 e9       	ldi	r24, 0x90	; 144
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	9a 8b       	std	Y+18, r25	; 0x12
    1494:	89 8b       	std	Y+17, r24	; 0x11
    1496:	89 89       	ldd	r24, Y+17	; 0x11
    1498:	9a 89       	ldd	r25, Y+18	; 0x12
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_sendCommand+0x7ac>
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9c 8b       	std	Y+20, r25	; 0x14
    14aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <LCD_sendCommand+0x7a0>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6d 89       	ldd	r22, Y+21	; 0x15
    14b8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ba:	8f 89       	ldd	r24, Y+23	; 0x17
    14bc:	98 8d       	ldd	r25, Y+24	; 0x18
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	98 8b       	std	Y+16, r25	; 0x10
    14d0:	8f 87       	std	Y+15, r24	; 0x0f
    14d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d4:	98 89       	ldd	r25, Y+16	; 0x10
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_sendCommand+0x7e8>
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e8       	ldi	r26, 0x80	; 128
    14ee:	bf e3       	ldi	r27, 0x3F	; 63
    14f0:	8b 87       	std	Y+11, r24	; 0x0b
    14f2:	9c 87       	std	Y+12, r25	; 0x0c
    14f4:	ad 87       	std	Y+13, r26	; 0x0d
    14f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4a e7       	ldi	r20, 0x7A	; 122
    1506:	55 e4       	ldi	r21, 0x45	; 69
    1508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	a9 87       	std	Y+9, r26	; 0x09
    1516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    152c:	88 23       	and	r24, r24
    152e:	2c f4       	brge	.+10     	; 0x153a <LCD_sendCommand+0x84c>
		__ticks = 1;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	4c f5       	brge	.+82     	; 0x15a4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1552:	6b 85       	ldd	r22, Y+11	; 0x0b
    1554:	7c 85       	ldd	r23, Y+12	; 0x0c
    1556:	8d 85       	ldd	r24, Y+13	; 0x0d
    1558:	9e 85       	ldd	r25, Y+14	; 0x0e
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	0f c0       	rjmp	.+30     	; 0x159a <LCD_sendCommand+0x8ac>
    157c:	80 e9       	ldi	r24, 0x90	; 144
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCD_sendCommand+0x89a>
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <LCD_sendCommand+0x88e>
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <LCD_sendCommand+0x8d6>
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    15cc:	cd 59       	subi	r28, 0x9D	; 157
    15ce:	df 4f       	sbci	r29, 0xFF	; 255
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	c3 56       	subi	r28, 0x63	; 99
    15f2:	d0 40       	sbci	r29, 0x00	; 0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	fe 01       	movw	r30, r28
    1600:	ed 59       	subi	r30, 0x9D	; 157
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1610:	fe 01       	movw	r30, r28
    1612:	e1 5a       	subi	r30, 0xA1	; 161
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e8       	ldi	r26, 0x80	; 128
    161c:	bf e3       	ldi	r27, 0x3F	; 63
    161e:	80 83       	st	Z, r24
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	a2 83       	std	Z+2, r26	; 0x02
    1624:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	8e 01       	movw	r16, r28
    1628:	05 5a       	subi	r16, 0xA5	; 165
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	fe 01       	movw	r30, r28
    162e:	e1 5a       	subi	r30, 0xA1	; 161
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	f8 01       	movw	r30, r16
    164c:	80 83       	st	Z, r24
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	a2 83       	std	Z+2, r26	; 0x02
    1652:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1654:	fe 01       	movw	r30, r28
    1656:	e5 5a       	subi	r30, 0xA5	; 165
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e8       	ldi	r20, 0x80	; 128
    1668:	5f e3       	ldi	r21, 0x3F	; 63
    166a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    166e:	88 23       	and	r24, r24
    1670:	44 f4       	brge	.+16     	; 0x1682 <LCD_displayChar+0x9e>
		__ticks = 1;
    1672:	fe 01       	movw	r30, r28
    1674:	e7 5a       	subi	r30, 0xA7	; 167
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	80 83       	st	Z, r24
    1680:	64 c0       	rjmp	.+200    	; 0x174a <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    1682:	fe 01       	movw	r30, r28
    1684:	e5 5a       	subi	r30, 0xA5	; 165
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	0c f0       	brlt	.+2      	; 0x16a2 <LCD_displayChar+0xbe>
    16a0:	43 c0       	rjmp	.+134    	; 0x1728 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	fe 01       	movw	r30, r28
    16a4:	e1 5a       	subi	r30, 0xA1	; 161
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8e 01       	movw	r16, r28
    16c2:	07 5a       	subi	r16, 0xA7	; 167
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	f8 01       	movw	r30, r16
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <LCD_displayChar+0x134>
    16da:	fe 01       	movw	r30, r28
    16dc:	e9 5a       	subi	r30, 0xA9	; 169
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 e9       	ldi	r24, 0x90	; 144
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
    16e8:	fe 01       	movw	r30, r28
    16ea:	e9 5a       	subi	r30, 0xA9	; 169
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <LCD_displayChar+0x10e>
    16f6:	fe 01       	movw	r30, r28
    16f8:	e9 5a       	subi	r30, 0xA9	; 169
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	de 01       	movw	r26, r28
    1702:	a7 5a       	subi	r26, 0xA7	; 167
    1704:	bf 4f       	sbci	r27, 0xFF	; 255
    1706:	fe 01       	movw	r30, r28
    1708:	e7 5a       	subi	r30, 0xA7	; 167
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	11 96       	adiw	r26, 0x01	; 1
    1714:	9c 93       	st	X, r25
    1716:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	fe 01       	movw	r30, r28
    171a:	e7 5a       	subi	r30, 0xA7	; 167
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	d1 f6       	brne	.-76     	; 0x16da <LCD_displayChar+0xf6>
    1726:	27 c0       	rjmp	.+78     	; 0x1776 <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	8e 01       	movw	r16, r28
    172a:	07 5a       	subi	r16, 0xA7	; 167
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e5 5a       	subi	r30, 0xA5	; 165
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
    174a:	de 01       	movw	r26, r28
    174c:	ab 5a       	subi	r26, 0xAB	; 171
    174e:	bf 4f       	sbci	r27, 0xFF	; 255
    1750:	fe 01       	movw	r30, r28
    1752:	e7 5a       	subi	r30, 0xA7	; 167
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	8d 93       	st	X+, r24
    175c:	9c 93       	st	X, r25
    175e:	fe 01       	movw	r30, r28
    1760:	eb 5a       	subi	r30, 0xAB	; 171
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_displayChar+0x184>
    176c:	fe 01       	movw	r30, r28
    176e:	eb 5a       	subi	r30, 0xAB	; 171
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1780:	fe 01       	movw	r30, r28
    1782:	ef 5a       	subi	r30, 0xAF	; 175
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a0 e8       	ldi	r26, 0x80	; 128
    178c:	bf e3       	ldi	r27, 0x3F	; 63
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1796:	8e 01       	movw	r16, r28
    1798:	03 5b       	subi	r16, 0xB3	; 179
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	fe 01       	movw	r30, r28
    179e:	ef 5a       	subi	r30, 0xAF	; 175
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a e7       	ldi	r20, 0x7A	; 122
    17b0:	55 e4       	ldi	r21, 0x45	; 69
    17b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 83       	st	Z, r24
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	a2 83       	std	Z+2, r26	; 0x02
    17c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e3 5b       	subi	r30, 0xB3	; 179
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	44 f4       	brge	.+16     	; 0x17f2 <LCD_displayChar+0x20e>
		__ticks = 1;
    17e2:	fe 01       	movw	r30, r28
    17e4:	e5 5b       	subi	r30, 0xB5	; 181
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	64 c0       	rjmp	.+200    	; 0x18ba <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    17f2:	fe 01       	movw	r30, r28
    17f4:	e3 5b       	subi	r30, 0xB3	; 179
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	0c f0       	brlt	.+2      	; 0x1812 <LCD_displayChar+0x22e>
    1810:	43 c0       	rjmp	.+134    	; 0x1898 <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	fe 01       	movw	r30, r28
    1814:	ef 5a       	subi	r30, 0xAF	; 175
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8e 01       	movw	r16, r28
    1832:	05 5b       	subi	r16, 0xB5	; 181
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <LCD_displayChar+0x2a4>
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 e9       	ldi	r24, 0x90	; 144
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	fe 01       	movw	r30, r28
    185a:	e7 5b       	subi	r30, 0xB7	; 183
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_displayChar+0x27e>
    1866:	fe 01       	movw	r30, r28
    1868:	e7 5b       	subi	r30, 0xB7	; 183
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	de 01       	movw	r26, r28
    1872:	a5 5b       	subi	r26, 0xB5	; 181
    1874:	bf 4f       	sbci	r27, 0xFF	; 255
    1876:	fe 01       	movw	r30, r28
    1878:	e5 5b       	subi	r30, 0xB5	; 181
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	9c 93       	st	X, r25
    1886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	fe 01       	movw	r30, r28
    188a:	e5 5b       	subi	r30, 0xB5	; 181
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	d1 f6       	brne	.-76     	; 0x184a <LCD_displayChar+0x266>
    1896:	27 c0       	rjmp	.+78     	; 0x18e6 <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	8e 01       	movw	r16, r28
    189a:	05 5b       	subi	r16, 0xB5	; 181
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	e3 5b       	subi	r30, 0xB3	; 179
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	de 01       	movw	r26, r28
    18bc:	a9 5b       	subi	r26, 0xB9	; 185
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e5 5b       	subi	r30, 0xB5	; 181
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	8d 93       	st	X+, r24
    18cc:	9c 93       	st	X, r25
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5b       	subi	r30, 0xB9	; 185
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_displayChar+0x2f4>
    18dc:	fe 01       	movw	r30, r28
    18de:	e9 5b       	subi	r30, 0xB9	; 185
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    18e6:	fe 01       	movw	r30, r28
    18e8:	ed 59       	subi	r30, 0x9D	; 157
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	80 71       	andi	r24, 0x10	; 16
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	95 95       	asr	r25
    18f8:	87 95       	ror	r24
    18fa:	95 95       	asr	r25
    18fc:	87 95       	ror	r24
    18fe:	95 95       	asr	r25
    1900:	87 95       	ror	r24
    1902:	95 95       	asr	r25
    1904:	87 95       	ror	r24
    1906:	98 2f       	mov	r25, r24
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	63 e0       	ldi	r22, 0x03	; 3
    190c:	49 2f       	mov	r20, r25
    190e:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    1912:	fe 01       	movw	r30, r28
    1914:	ed 59       	subi	r30, 0x9D	; 157
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	80 72       	andi	r24, 0x20	; 32
    1920:	90 70       	andi	r25, 0x00	; 0
    1922:	95 95       	asr	r25
    1924:	87 95       	ror	r24
    1926:	95 95       	asr	r25
    1928:	87 95       	ror	r24
    192a:	95 95       	asr	r25
    192c:	87 95       	ror	r24
    192e:	95 95       	asr	r25
    1930:	87 95       	ror	r24
    1932:	95 95       	asr	r25
    1934:	87 95       	ror	r24
    1936:	98 2f       	mov	r25, r24
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    1942:	fe 01       	movw	r30, r28
    1944:	ed 59       	subi	r30, 0x9D	; 157
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 74       	andi	r24, 0x40	; 64
    1950:	90 70       	andi	r25, 0x00	; 0
    1952:	08 2e       	mov	r0, r24
    1954:	89 2f       	mov	r24, r25
    1956:	00 0c       	add	r0, r0
    1958:	88 1f       	adc	r24, r24
    195a:	99 0b       	sbc	r25, r25
    195c:	00 0c       	add	r0, r0
    195e:	88 1f       	adc	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	98 2f       	mov	r25, r24
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	65 e0       	ldi	r22, 0x05	; 5
    1968:	49 2f       	mov	r20, r25
    196a:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    196e:	fe 01       	movw	r30, r28
    1970:	ed 59       	subi	r30, 0x9D	; 157
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	98 2f       	mov	r25, r24
    1978:	99 1f       	adc	r25, r25
    197a:	99 27       	eor	r25, r25
    197c:	99 1f       	adc	r25, r25
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	66 e0       	ldi	r22, 0x06	; 6
    1982:	49 2f       	mov	r20, r25
    1984:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1988:	fe 01       	movw	r30, r28
    198a:	ed 5b       	subi	r30, 0xBD	; 189
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e8       	ldi	r26, 0x80	; 128
    1994:	bf e3       	ldi	r27, 0x3F	; 63
    1996:	80 83       	st	Z, r24
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	a2 83       	std	Z+2, r26	; 0x02
    199c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	8e 01       	movw	r16, r28
    19a0:	01 5c       	subi	r16, 0xC1	; 193
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	ed 5b       	subi	r30, 0xBD	; 189
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a e7       	ldi	r20, 0x7A	; 122
    19b8:	55 e4       	ldi	r21, 0x45	; 69
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 83       	st	Z, r24
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	a2 83       	std	Z+2, r26	; 0x02
    19ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19cc:	fe 01       	movw	r30, r28
    19ce:	ff 96       	adiw	r30, 0x3f	; 63
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <LCD_displayChar+0x40e>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9e af       	std	Y+62, r25	; 0x3e
    19ee:	8d af       	std	Y+61, r24	; 0x3d
    19f0:	46 c0       	rjmp	.+140    	; 0x1a7e <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    19f2:	fe 01       	movw	r30, r28
    19f4:	ff 96       	adiw	r30, 0x3f	; 63
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	64 f5       	brge	.+88     	; 0x1a66 <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ed 5b       	subi	r30, 0xBD	; 189
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e af       	std	Y+62, r25	; 0x3e
    1a3a:	8d af       	std	Y+61, r24	; 0x3d
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_displayChar+0x478>
    1a3e:	80 e9       	ldi	r24, 0x90	; 144
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	9c af       	std	Y+60, r25	; 0x3c
    1a44:	8b af       	std	Y+59, r24	; 0x3b
    1a46:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a48:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_displayChar+0x466>
    1a4e:	9c af       	std	Y+60, r25	; 0x3c
    1a50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e af       	std	Y+62, r25	; 0x3e
    1a5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_displayChar+0x45a>
    1a64:	16 c0       	rjmp	.+44     	; 0x1a92 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	fe 01       	movw	r30, r28
    1a68:	ff 96       	adiw	r30, 0x3f	; 63
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e af       	std	Y+62, r25	; 0x3e
    1a7c:	8d af       	std	Y+61, r24	; 0x3d
    1a7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a82:	9a af       	std	Y+58, r25	; 0x3a
    1a84:	89 af       	std	Y+57, r24	; 0x39
    1a86:	89 ad       	ldd	r24, Y+57	; 0x39
    1a88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_displayChar+0x4a6>
    1a8e:	9a af       	std	Y+58, r25	; 0x3a
    1a90:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e8       	ldi	r26, 0x80	; 128
    1aa2:	bf e3       	ldi	r27, 0x3F	; 63
    1aa4:	8d ab       	std	Y+53, r24	; 0x35
    1aa6:	9e ab       	std	Y+54, r25	; 0x36
    1aa8:	af ab       	std	Y+55, r26	; 0x37
    1aaa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6d a9       	ldd	r22, Y+53	; 0x35
    1aae:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	55 e4       	ldi	r21, 0x45	; 69
    1abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	89 ab       	std	Y+49, r24	; 0x31
    1ac6:	9a ab       	std	Y+50, r25	; 0x32
    1ac8:	ab ab       	std	Y+51, r26	; 0x33
    1aca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1acc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ace:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <LCD_displayChar+0x50a>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	98 ab       	std	Y+48, r25	; 0x30
    1aea:	8f a7       	std	Y+47, r24	; 0x2f
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    1aee:	69 a9       	ldd	r22, Y+49	; 0x31
    1af0:	7a a9       	ldd	r23, Y+50	; 0x32
    1af2:	8b a9       	ldd	r24, Y+51	; 0x33
    1af4:	9c a9       	ldd	r25, Y+52	; 0x34
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6d a9       	ldd	r22, Y+53	; 0x35
    1b08:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	8f a7       	std	Y+47, r24	; 0x2f
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <LCD_displayChar+0x56a>
    1b30:	80 e9       	ldi	r24, 0x90	; 144
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	9e a7       	std	Y+46, r25	; 0x2e
    1b36:	8d a7       	std	Y+45, r24	; 0x2d
    1b38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_displayChar+0x558>
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b46:	98 a9       	ldd	r25, Y+48	; 0x30
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	98 ab       	std	Y+48, r25	; 0x30
    1b4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b50:	98 a9       	ldd	r25, Y+48	; 0x30
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <LCD_displayChar+0x54c>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b70:	9c a7       	std	Y+44, r25	; 0x2c
    1b72:	8b a7       	std	Y+43, r24	; 0x2b
    1b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_displayChar+0x594>
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	8f a3       	std	Y+39, r24	; 0x27
    1b94:	98 a7       	std	Y+40, r25	; 0x28
    1b96:	a9 a7       	std	Y+41, r26	; 0x29
    1b98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	55 e4       	ldi	r21, 0x45	; 69
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8b a3       	std	Y+35, r24	; 0x23
    1bb4:	9c a3       	std	Y+36, r25	; 0x24
    1bb6:	ad a3       	std	Y+37, r26	; 0x25
    1bb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bba:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_displayChar+0x5f8>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9a a3       	std	Y+34, r25	; 0x22
    1bd8:	89 a3       	std	Y+33, r24	; 0x21
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    1bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bde:	7c a1       	ldd	r23, Y+36	; 0x24
    1be0:	8d a1       	ldd	r24, Y+37	; 0x25
    1be2:	9e a1       	ldd	r25, Y+38	; 0x26
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9a a3       	std	Y+34, r25	; 0x22
    1c1a:	89 a3       	std	Y+33, r24	; 0x21
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_displayChar+0x658>
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	98 a3       	std	Y+32, r25	; 0x20
    1c24:	8f 8f       	std	Y+31, r24	; 0x1f
    1c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c28:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayChar+0x646>
    1c2e:	98 a3       	std	Y+32, r25	; 0x20
    1c30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	9a a1       	ldd	r25, Y+34	; 0x22
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9a a3       	std	Y+34, r25	; 0x22
    1c3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_displayChar+0x63a>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6b a1       	ldd	r22, Y+35	; 0x23
    1c48:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c60:	8d 8f       	std	Y+29, r24	; 0x1d
    1c62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_displayChar+0x682>
    1c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ed 59       	subi	r30, 0x9D	; 157
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	98 2f       	mov	r25, r24
    1c78:	91 70       	andi	r25, 0x01	; 1
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	63 e0       	ldi	r22, 0x03	; 3
    1c7e:	49 2f       	mov	r20, r25
    1c80:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1c84:	fe 01       	movw	r30, r28
    1c86:	ed 59       	subi	r30, 0x9D	; 157
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	82 70       	andi	r24, 0x02	; 2
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	95 95       	asr	r25
    1c96:	87 95       	ror	r24
    1c98:	98 2f       	mov	r25, r24
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	64 e0       	ldi	r22, 0x04	; 4
    1c9e:	49 2f       	mov	r20, r25
    1ca0:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ed 59       	subi	r30, 0x9D	; 157
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	84 70       	andi	r24, 0x04	; 4
    1cb2:	90 70       	andi	r25, 0x00	; 0
    1cb4:	95 95       	asr	r25
    1cb6:	87 95       	ror	r24
    1cb8:	95 95       	asr	r25
    1cba:	87 95       	ror	r24
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	65 e0       	ldi	r22, 0x05	; 5
    1cc2:	49 2f       	mov	r20, r25
    1cc4:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ed 59       	subi	r30, 0x9D	; 157
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	88 70       	andi	r24, 0x08	; 8
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	95 95       	asr	r25
    1cda:	87 95       	ror	r24
    1cdc:	95 95       	asr	r25
    1cde:	87 95       	ror	r24
    1ce0:	95 95       	asr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	66 e0       	ldi	r22, 0x06	; 6
    1cea:	49 2f       	mov	r20, r25
    1cec:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e8       	ldi	r26, 0x80	; 128
    1cf6:	bf e3       	ldi	r27, 0x3F	; 63
    1cf8:	89 8f       	std	Y+25, r24	; 0x19
    1cfa:	9a 8f       	std	Y+26, r25	; 0x1a
    1cfc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	69 8d       	ldd	r22, Y+25	; 0x19
    1d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a e7       	ldi	r20, 0x7A	; 122
    1d0e:	55 e4       	ldi	r21, 0x45	; 69
    1d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	8d 8b       	std	Y+21, r24	; 0x15
    1d1a:	9e 8b       	std	Y+22, r25	; 0x16
    1d1c:	af 8b       	std	Y+23, r26	; 0x17
    1d1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e8       	ldi	r20, 0x80	; 128
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <LCD_displayChar+0x75e>
		__ticks = 1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9c 8b       	std	Y+20, r25	; 0x14
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	3f c0       	rjmp	.+126    	; 0x1dc0 <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    1d42:	6d 89       	ldd	r22, Y+21	; 0x15
    1d44:	7e 89       	ldd	r23, Y+22	; 0x16
    1d46:	8f 89       	ldd	r24, Y+23	; 0x17
    1d48:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	4c f5       	brge	.+82     	; 0x1dac <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <LCD_displayChar+0x7be>
    1d84:	80 e9       	ldi	r24, 0x90	; 144
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
    1d8c:	89 89       	ldd	r24, Y+17	; 0x11
    1d8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_displayChar+0x7ac>
    1d94:	9a 8b       	std	Y+18, r25	; 0x12
    1d96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	9c 89       	ldd	r25, Y+20	; 0x14
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	69 f7       	brne	.-38     	; 0x1d84 <LCD_displayChar+0x7a0>
    1daa:	14 c0       	rjmp	.+40     	; 0x1dd4 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	6d 89       	ldd	r22, Y+21	; 0x15
    1dae:	7e 89       	ldd	r23, Y+22	; 0x16
    1db0:	8f 89       	ldd	r24, Y+23	; 0x17
    1db2:	98 8d       	ldd	r25, Y+24	; 0x18
    1db4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9c 8b       	std	Y+20, r25	; 0x14
    1dbe:	8b 8b       	std	Y+19, r24	; 0x13
    1dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc4:	98 8b       	std	Y+16, r25	; 0x10
    1dc6:	8f 87       	std	Y+15, r24	; 0x0f
    1dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dca:	98 89       	ldd	r25, Y+16	; 0x10
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_displayChar+0x7e8>
    1dd0:	98 8b       	std	Y+16, r25	; 0x10
    1dd2:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 09 11 	call	0x2212	; 0x2212 <GPIO_writePin>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e8       	ldi	r26, 0x80	; 128
    1de4:	bf e3       	ldi	r27, 0x3F	; 63
    1de6:	8b 87       	std	Y+11, r24	; 0x0b
    1de8:	9c 87       	std	Y+12, r25	; 0x0c
    1dea:	ad 87       	std	Y+13, r26	; 0x0d
    1dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a e7       	ldi	r20, 0x7A	; 122
    1dfc:	55 e4       	ldi	r21, 0x45	; 69
    1dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	8f 83       	std	Y+7, r24	; 0x07
    1e08:	98 87       	std	Y+8, r25	; 0x08
    1e0a:	a9 87       	std	Y+9, r26	; 0x09
    1e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <LCD_displayChar+0x84c>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    1e30:	6f 81       	ldd	r22, Y+7	; 0x07
    1e32:	78 85       	ldd	r23, Y+8	; 0x08
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <LCD_displayChar+0x8ac>
    1e72:	80 e9       	ldi	r24, 0x90	; 144
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_displayChar+0x89a>
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <LCD_displayChar+0x88e>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_displayChar+0x8d6>
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ec2:	cd 59       	subi	r28, 0x9D	; 157
    1ec4:	df 4f       	sbci	r29, 0xFF	; 255
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <LCD_displayString+0x6>
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9b 83       	std	Y+3, r25	; 0x03
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eea:	19 82       	std	Y+1, r1	; 0x01
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	80 81       	ld	r24, Z
    1f00:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_displayChar>
		i++;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	39 f7       	brne	.-50     	; 0x1eee <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <LCD_moveCursor+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <LCD_moveCursor+0x8>
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3d 83       	std	Y+5, r19	; 0x05
    1f46:	2c 83       	std	Y+4, r18	; 0x04
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	c1 f0       	breq	.+48     	; 0x1f82 <LCD_moveCursor+0x56>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_moveCursor+0x3a>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <LCD_moveCursor+0x50>
    1f64:	19 c0       	rjmp	.+50     	; 0x1f98 <LCD_moveCursor+0x6c>
    1f66:	2c 81       	ldd	r18, Y+4	; 0x04
    1f68:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	69 f0       	breq	.+26     	; 0x1f8a <LCD_moveCursor+0x5e>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <LCD_moveCursor+0x66>
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	0b c0       	rjmp	.+22     	; 0x1f98 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	80 5c       	subi	r24, 0xC0	; 192
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	80 5f       	subi	r24, 0xF0	; 240
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 5b       	subi	r24, 0xB0	; 176
    1f96:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCD_displayStringRowColumn+0x6>
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_displayStringRowColumn+0x8>
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	6a 83       	std	Y+2, r22	; 0x02
    1fc0:	5c 83       	std	Y+4, r21	; 0x04
    1fc2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <LCD_moveCursor>
	LCD_displayString(str);
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint16 data){
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	62 97       	sbiw	r28, 0x12	; 18
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    1ffa:	89 89       	ldd	r24, Y+17	; 0x11
    1ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffe:	9e 01       	movw	r18, r28
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	b9 01       	movw	r22, r18
    2006:	4a e0       	ldi	r20, 0x0A	; 10
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <itoa>
	LCD_displayString(buff);
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_displayString>
}
    2016:	62 96       	adiw	r28, 0x12	; 18
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 77 06 	call	0xcee	; 0xcee <LCD_sendCommand>
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <GPIO_setupPinDirection+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <GPIO_setupPinDirection+0x8>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	6a 83       	std	Y+2, r22	; 0x02
    204e:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	88 30       	cpi	r24, 0x08	; 8
    2054:	08 f0       	brcs	.+2      	; 0x2058 <GPIO_setupPinDirection+0x1c>
    2056:	d5 c0       	rjmp	.+426    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	08 f0       	brcs	.+2      	; 0x2060 <GPIO_setupPinDirection+0x24>
    205e:	d1 c0       	rjmp	.+418    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	3d 83       	std	Y+5, r19	; 0x05
    2068:	2c 83       	std	Y+4, r18	; 0x04
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	91 05       	cpc	r25, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <GPIO_setupPinDirection+0x3a>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <GPIO_setupPinDirection+0xc0>
    2076:	2c 81       	ldd	r18, Y+4	; 0x04
    2078:	3d 81       	ldd	r19, Y+5	; 0x05
    207a:	22 30       	cpi	r18, 0x02	; 2
    207c:	31 05       	cpc	r19, r1
    207e:	2c f4       	brge	.+10     	; 0x208a <GPIO_setupPinDirection+0x4e>
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	9d 81       	ldd	r25, Y+5	; 0x05
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	71 f0       	breq	.+28     	; 0x20a4 <GPIO_setupPinDirection+0x68>
    2088:	bc c0       	rjmp	.+376    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
    208a:	2c 81       	ldd	r18, Y+4	; 0x04
    208c:	3d 81       	ldd	r19, Y+5	; 0x05
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	31 05       	cpc	r19, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <GPIO_setupPinDirection+0x5a>
    2094:	5f c0       	rjmp	.+190    	; 0x2154 <GPIO_setupPinDirection+0x118>
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <GPIO_setupPinDirection+0x66>
    20a0:	85 c0       	rjmp	.+266    	; 0x21ac <GPIO_setupPinDirection+0x170>
    20a2:	af c0       	rjmp	.+350    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	a1 f4       	brne	.+40     	; 0x20d2 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    20aa:	aa e3       	ldi	r26, 0x3A	; 58
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ea e3       	ldi	r30, 0x3A	; 58
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <GPIO_setupPinDirection+0x8c>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <GPIO_setupPinDirection+0x88>
    20cc:	84 2b       	or	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	98 c0       	rjmp	.+304    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    20d2:	aa e3       	ldi	r26, 0x3A	; 58
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ea e3       	ldi	r30, 0x3A	; 58
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <GPIO_setupPinDirection+0xb4>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <GPIO_setupPinDirection+0xb0>
    20f4:	80 95       	com	r24
    20f6:	84 23       	and	r24, r20
    20f8:	8c 93       	st	X, r24
    20fa:	83 c0       	rjmp	.+262    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	a1 f4       	brne	.+40     	; 0x212a <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    2102:	a7 e3       	ldi	r26, 0x37	; 55
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e7 e3       	ldi	r30, 0x37	; 55
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <GPIO_setupPinDirection+0xe4>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <GPIO_setupPinDirection+0xe0>
    2124:	84 2b       	or	r24, r20
    2126:	8c 93       	st	X, r24
    2128:	6c c0       	rjmp	.+216    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    212a:	a7 e3       	ldi	r26, 0x37	; 55
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e7 e3       	ldi	r30, 0x37	; 55
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	48 2f       	mov	r20, r24
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <GPIO_setupPinDirection+0x10c>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <GPIO_setupPinDirection+0x108>
    214c:	80 95       	com	r24
    214e:	84 23       	and	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	57 c0       	rjmp	.+174    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	a1 f4       	brne	.+40     	; 0x2182 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    215a:	a4 e3       	ldi	r26, 0x34	; 52
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e4 e3       	ldi	r30, 0x34	; 52
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 2e       	mov	r0, r18
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <GPIO_setupPinDirection+0x13c>
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	0a 94       	dec	r0
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <GPIO_setupPinDirection+0x138>
    217c:	84 2b       	or	r24, r20
    217e:	8c 93       	st	X, r24
    2180:	40 c0       	rjmp	.+128    	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    2182:	a4 e3       	ldi	r26, 0x34	; 52
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e4 e3       	ldi	r30, 0x34	; 52
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	48 2f       	mov	r20, r24
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	02 2e       	mov	r0, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <GPIO_setupPinDirection+0x164>
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	0a 94       	dec	r0
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <GPIO_setupPinDirection+0x160>
    21a4:	80 95       	com	r24
    21a6:	84 23       	and	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	2b c0       	rjmp	.+86     	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	a1 f4       	brne	.+40     	; 0x21da <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    21b2:	a1 e3       	ldi	r26, 0x31	; 49
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e1 e3       	ldi	r30, 0x31	; 49
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	48 2f       	mov	r20, r24
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 2e       	mov	r0, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <GPIO_setupPinDirection+0x194>
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	0a 94       	dec	r0
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <GPIO_setupPinDirection+0x190>
    21d4:	84 2b       	or	r24, r20
    21d6:	8c 93       	st	X, r24
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    21da:	a1 e3       	ldi	r26, 0x31	; 49
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e1 e3       	ldi	r30, 0x31	; 49
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 2e       	mov	r0, r18
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <GPIO_setupPinDirection+0x1bc>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <GPIO_setupPinDirection+0x1b8>
    21fc:	80 95       	com	r24
    21fe:	84 23       	and	r24, r20
    2200:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <GPIO_writePin+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <GPIO_writePin+0x8>
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	6a 83       	std	Y+2, r22	; 0x02
    2224:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	88 30       	cpi	r24, 0x08	; 8
    222a:	08 f0       	brcs	.+2      	; 0x222e <GPIO_writePin+0x1c>
    222c:	d5 c0       	rjmp	.+426    	; 0x23d8 <GPIO_writePin+0x1c6>
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	08 f0       	brcs	.+2      	; 0x2236 <GPIO_writePin+0x24>
    2234:	d1 c0       	rjmp	.+418    	; 0x23d8 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3d 83       	std	Y+5, r19	; 0x05
    223e:	2c 83       	std	Y+4, r18	; 0x04
    2240:	8c 81       	ldd	r24, Y+4	; 0x04
    2242:	9d 81       	ldd	r25, Y+5	; 0x05
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <GPIO_writePin+0x3a>
    224a:	43 c0       	rjmp	.+134    	; 0x22d2 <GPIO_writePin+0xc0>
    224c:	2c 81       	ldd	r18, Y+4	; 0x04
    224e:	3d 81       	ldd	r19, Y+5	; 0x05
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	2c f4       	brge	.+10     	; 0x2260 <GPIO_writePin+0x4e>
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9d 81       	ldd	r25, Y+5	; 0x05
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	71 f0       	breq	.+28     	; 0x227a <GPIO_writePin+0x68>
    225e:	bc c0       	rjmp	.+376    	; 0x23d8 <GPIO_writePin+0x1c6>
    2260:	2c 81       	ldd	r18, Y+4	; 0x04
    2262:	3d 81       	ldd	r19, Y+5	; 0x05
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	31 05       	cpc	r19, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <GPIO_writePin+0x5a>
    226a:	5f c0       	rjmp	.+190    	; 0x232a <GPIO_writePin+0x118>
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	9d 81       	ldd	r25, Y+5	; 0x05
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	91 05       	cpc	r25, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <GPIO_writePin+0x66>
    2276:	85 c0       	rjmp	.+266    	; 0x2382 <GPIO_writePin+0x170>
    2278:	af c0       	rjmp	.+350    	; 0x23d8 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	a1 f4       	brne	.+40     	; 0x22a8 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    2280:	ab e3       	ldi	r26, 0x3B	; 59
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	eb e3       	ldi	r30, 0x3B	; 59
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <GPIO_writePin+0x8c>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <GPIO_writePin+0x88>
    22a2:	84 2b       	or	r24, r20
    22a4:	8c 93       	st	X, r24
    22a6:	98 c0       	rjmp	.+304    	; 0x23d8 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    22a8:	ab e3       	ldi	r26, 0x3B	; 59
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	eb e3       	ldi	r30, 0x3B	; 59
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 2e       	mov	r0, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <GPIO_writePin+0xb4>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <GPIO_writePin+0xb0>
    22ca:	80 95       	com	r24
    22cc:	84 23       	and	r24, r20
    22ce:	8c 93       	st	X, r24
    22d0:	83 c0       	rjmp	.+262    	; 0x23d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	a1 f4       	brne	.+40     	; 0x2300 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    22d8:	a8 e3       	ldi	r26, 0x38	; 56
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e8 e3       	ldi	r30, 0x38	; 56
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	48 2f       	mov	r20, r24
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	02 2e       	mov	r0, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <GPIO_writePin+0xe4>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <GPIO_writePin+0xe0>
    22fa:	84 2b       	or	r24, r20
    22fc:	8c 93       	st	X, r24
    22fe:	6c c0       	rjmp	.+216    	; 0x23d8 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    2300:	a8 e3       	ldi	r26, 0x38	; 56
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e8 e3       	ldi	r30, 0x38	; 56
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	48 2f       	mov	r20, r24
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 2e       	mov	r0, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <GPIO_writePin+0x10c>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	0a 94       	dec	r0
    2320:	e2 f7       	brpl	.-8      	; 0x231a <GPIO_writePin+0x108>
    2322:	80 95       	com	r24
    2324:	84 23       	and	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	57 c0       	rjmp	.+174    	; 0x23d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	a1 f4       	brne	.+40     	; 0x2358 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    2330:	a5 e3       	ldi	r26, 0x35	; 53
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	48 2f       	mov	r20, r24
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <GPIO_writePin+0x13c>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <GPIO_writePin+0x138>
    2352:	84 2b       	or	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	40 c0       	rjmp	.+128    	; 0x23d8 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    2358:	a5 e3       	ldi	r26, 0x35	; 53
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e5 e3       	ldi	r30, 0x35	; 53
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <GPIO_writePin+0x164>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <GPIO_writePin+0x160>
    237a:	80 95       	com	r24
    237c:	84 23       	and	r24, r20
    237e:	8c 93       	st	X, r24
    2380:	2b c0       	rjmp	.+86     	; 0x23d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	a1 f4       	brne	.+40     	; 0x23b0 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    2388:	a2 e3       	ldi	r26, 0x32	; 50
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e2 e3       	ldi	r30, 0x32	; 50
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <GPIO_writePin+0x194>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <GPIO_writePin+0x190>
    23aa:	84 2b       	or	r24, r20
    23ac:	8c 93       	st	X, r24
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    23b0:	a2 e3       	ldi	r26, 0x32	; 50
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e2 e3       	ldi	r30, 0x32	; 50
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	48 2f       	mov	r20, r24
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	02 2e       	mov	r0, r18
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <GPIO_writePin+0x1bc>
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	0a 94       	dec	r0
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <GPIO_writePin+0x1b8>
    23d2:	80 95       	com	r24
    23d4:	84 23       	and	r24, r20
    23d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	29 97       	sbiw	r28, 0x09	; 9
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	88 30       	cpi	r24, 0x08	; 8
    2404:	08 f0       	brcs	.+2      	; 0x2408 <GPIO_readPin+0x20>
    2406:	8d c0       	rjmp	.+282    	; 0x2522 <GPIO_readPin+0x13a>
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	84 30       	cpi	r24, 0x04	; 4
    240c:	08 f0       	brcs	.+2      	; 0x2410 <GPIO_readPin+0x28>
    240e:	89 c0       	rjmp	.+274    	; 0x2522 <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	39 87       	std	Y+9, r19	; 0x09
    2418:	28 87       	std	Y+8, r18	; 0x08
    241a:	48 85       	ldd	r20, Y+8	; 0x08
    241c:	59 85       	ldd	r21, Y+9	; 0x09
    241e:	41 30       	cpi	r20, 0x01	; 1
    2420:	51 05       	cpc	r21, r1
    2422:	89 f1       	breq	.+98     	; 0x2486 <GPIO_readPin+0x9e>
    2424:	88 85       	ldd	r24, Y+8	; 0x08
    2426:	99 85       	ldd	r25, Y+9	; 0x09
    2428:	82 30       	cpi	r24, 0x02	; 2
    242a:	91 05       	cpc	r25, r1
    242c:	34 f4       	brge	.+12     	; 0x243a <GPIO_readPin+0x52>
    242e:	28 85       	ldd	r18, Y+8	; 0x08
    2430:	39 85       	ldd	r19, Y+9	; 0x09
    2432:	21 15       	cp	r18, r1
    2434:	31 05       	cpc	r19, r1
    2436:	69 f0       	breq	.+26     	; 0x2452 <GPIO_readPin+0x6a>
    2438:	74 c0       	rjmp	.+232    	; 0x2522 <GPIO_readPin+0x13a>
    243a:	48 85       	ldd	r20, Y+8	; 0x08
    243c:	59 85       	ldd	r21, Y+9	; 0x09
    243e:	42 30       	cpi	r20, 0x02	; 2
    2440:	51 05       	cpc	r21, r1
    2442:	d9 f1       	breq	.+118    	; 0x24ba <GPIO_readPin+0xd2>
    2444:	88 85       	ldd	r24, Y+8	; 0x08
    2446:	99 85       	ldd	r25, Y+9	; 0x09
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	91 05       	cpc	r25, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <GPIO_readPin+0x68>
    244e:	4f c0       	rjmp	.+158    	; 0x24ee <GPIO_readPin+0x106>
    2450:	68 c0       	rjmp	.+208    	; 0x2522 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    2452:	e9 e3       	ldi	r30, 0x39	; 57
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a9 01       	movw	r20, r18
    2464:	02 c0       	rjmp	.+4      	; 0x246a <GPIO_readPin+0x82>
    2466:	55 95       	asr	r21
    2468:	47 95       	ror	r20
    246a:	8a 95       	dec	r24
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <GPIO_readPin+0x7e>
    246e:	ca 01       	movw	r24, r20
    2470:	81 70       	andi	r24, 0x01	; 1
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	88 23       	and	r24, r24
    2476:	19 f0       	breq	.+6      	; 0x247e <GPIO_readPin+0x96>
    2478:	51 e0       	ldi	r21, 0x01	; 1
    247a:	5e 83       	std	Y+6, r21	; 0x06
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <GPIO_readPin+0x98>
    247e:	1e 82       	std	Y+6, r1	; 0x06
    2480:	8e 81       	ldd	r24, Y+6	; 0x06
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	4f c0       	rjmp	.+158    	; 0x2524 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    2486:	e6 e3       	ldi	r30, 0x36	; 54
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a9 01       	movw	r20, r18
    2498:	02 c0       	rjmp	.+4      	; 0x249e <GPIO_readPin+0xb6>
    249a:	55 95       	asr	r21
    249c:	47 95       	ror	r20
    249e:	8a 95       	dec	r24
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <GPIO_readPin+0xb2>
    24a2:	ca 01       	movw	r24, r20
    24a4:	81 70       	andi	r24, 0x01	; 1
    24a6:	90 70       	andi	r25, 0x00	; 0
    24a8:	88 23       	and	r24, r24
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <GPIO_readPin+0xca>
    24ac:	51 e0       	ldi	r21, 0x01	; 1
    24ae:	5d 83       	std	Y+5, r21	; 0x05
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <GPIO_readPin+0xcc>
    24b2:	1d 82       	std	Y+5, r1	; 0x05
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	8f 83       	std	Y+7, r24	; 0x07
    24b8:	35 c0       	rjmp	.+106    	; 0x2524 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    24ba:	e3 e3       	ldi	r30, 0x33	; 51
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a9 01       	movw	r20, r18
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <GPIO_readPin+0xea>
    24ce:	55 95       	asr	r21
    24d0:	47 95       	ror	r20
    24d2:	8a 95       	dec	r24
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <GPIO_readPin+0xe6>
    24d6:	ca 01       	movw	r24, r20
    24d8:	81 70       	andi	r24, 0x01	; 1
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	88 23       	and	r24, r24
    24de:	19 f0       	breq	.+6      	; 0x24e6 <GPIO_readPin+0xfe>
    24e0:	51 e0       	ldi	r21, 0x01	; 1
    24e2:	5c 83       	std	Y+4, r21	; 0x04
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <GPIO_readPin+0x100>
    24e6:	1c 82       	std	Y+4, r1	; 0x04
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	8f 83       	std	Y+7, r24	; 0x07
    24ec:	1b c0       	rjmp	.+54     	; 0x2524 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    24ee:	e0 e3       	ldi	r30, 0x30	; 48
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a9 01       	movw	r20, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <GPIO_readPin+0x11e>
    2502:	55 95       	asr	r21
    2504:	47 95       	ror	r20
    2506:	8a 95       	dec	r24
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <GPIO_readPin+0x11a>
    250a:	ca 01       	movw	r24, r20
    250c:	81 70       	andi	r24, 0x01	; 1
    250e:	90 70       	andi	r25, 0x00	; 0
    2510:	88 23       	and	r24, r24
    2512:	19 f0       	breq	.+6      	; 0x251a <GPIO_readPin+0x132>
    2514:	51 e0       	ldi	r21, 0x01	; 1
    2516:	5b 83       	std	Y+3, r21	; 0x03
    2518:	01 c0       	rjmp	.+2      	; 0x251c <GPIO_readPin+0x134>
    251a:	1b 82       	std	Y+3, r1	; 0x03
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <GPIO_readPin+0x13c>
					break;
				}*/

	}

	return 0;
    2522:	1f 82       	std	Y+7, r1	; 0x07
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2526:	29 96       	adiw	r28, 0x09	; 9
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <GPIO_setupPortDirection+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <GPIO_setupPortDirection+0x8>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	90 f5       	brcc	.+100    	; 0x25b2 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	3c 83       	std	Y+4, r19	; 0x04
    2556:	2b 83       	std	Y+3, r18	; 0x03
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	91 05       	cpc	r25, r1
    2560:	d1 f0       	breq	.+52     	; 0x2596 <GPIO_setupPortDirection+0x5e>
    2562:	2b 81       	ldd	r18, Y+3	; 0x03
    2564:	3c 81       	ldd	r19, Y+4	; 0x04
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	2c f4       	brge	.+10     	; 0x2576 <GPIO_setupPortDirection+0x3e>
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	61 f0       	breq	.+24     	; 0x258c <GPIO_setupPortDirection+0x54>
    2574:	1e c0       	rjmp	.+60     	; 0x25b2 <GPIO_setupPortDirection+0x7a>
    2576:	2b 81       	ldd	r18, Y+3	; 0x03
    2578:	3c 81       	ldd	r19, Y+4	; 0x04
    257a:	22 30       	cpi	r18, 0x02	; 2
    257c:	31 05       	cpc	r19, r1
    257e:	81 f0       	breq	.+32     	; 0x25a0 <GPIO_setupPortDirection+0x68>
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	81 f0       	breq	.+32     	; 0x25aa <GPIO_setupPortDirection+0x72>
    258a:	13 c0       	rjmp	.+38     	; 0x25b2 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    258c:	ea e3       	ldi	r30, 0x3A	; 58
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	80 83       	st	Z, r24
    2594:	0e c0       	rjmp	.+28     	; 0x25b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2596:	e7 e3       	ldi	r30, 0x37	; 55
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	80 83       	st	Z, r24
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25a0:	e4 e3       	ldi	r30, 0x34	; 52
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	80 83       	st	Z, r24
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25aa:	e1 e3       	ldi	r30, 0x31	; 49
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <GPIO_writePort+0x6>
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <GPIO_writePort+0x8>
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	84 30       	cpi	r24, 0x04	; 4
    25d4:	90 f5       	brcc	.+100    	; 0x263a <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	3c 83       	std	Y+4, r19	; 0x04
    25de:	2b 83       	std	Y+3, r18	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	91 05       	cpc	r25, r1
    25e8:	d1 f0       	breq	.+52     	; 0x261e <GPIO_writePort+0x5e>
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	31 05       	cpc	r19, r1
    25f2:	2c f4       	brge	.+10     	; 0x25fe <GPIO_writePort+0x3e>
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	61 f0       	breq	.+24     	; 0x2614 <GPIO_writePort+0x54>
    25fc:	1e c0       	rjmp	.+60     	; 0x263a <GPIO_writePort+0x7a>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	3c 81       	ldd	r19, Y+4	; 0x04
    2602:	22 30       	cpi	r18, 0x02	; 2
    2604:	31 05       	cpc	r19, r1
    2606:	81 f0       	breq	.+32     	; 0x2628 <GPIO_writePort+0x68>
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	83 30       	cpi	r24, 0x03	; 3
    260e:	91 05       	cpc	r25, r1
    2610:	81 f0       	breq	.+32     	; 0x2632 <GPIO_writePort+0x72>
    2612:	13 c0       	rjmp	.+38     	; 0x263a <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    2614:	eb e3       	ldi	r30, 0x3B	; 59
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	80 83       	st	Z, r24
    261c:	0e c0       	rjmp	.+28     	; 0x263a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    261e:	e8 e3       	ldi	r30, 0x38	; 56
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	80 83       	st	Z, r24
    2626:	09 c0       	rjmp	.+18     	; 0x263a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2628:	e5 e3       	ldi	r30, 0x35	; 53
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	80 83       	st	Z, r24
    2630:	04 c0       	rjmp	.+8      	; 0x263a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2632:	e2 e3       	ldi	r30, 0x32	; 50
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	80 83       	st	Z, r24
			break;
		}
	}
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <GPIO_readPort+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <GPIO_readPort+0x8>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	84 30       	cpi	r24, 0x04	; 4
    265a:	98 f5       	brcc	.+102    	; 0x26c2 <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3c 83       	std	Y+4, r19	; 0x04
    2664:	2b 83       	std	Y+3, r18	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	d1 f0       	breq	.+52     	; 0x26a4 <GPIO_readPort+0x5c>
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	2c f4       	brge	.+10     	; 0x2684 <GPIO_readPort+0x3c>
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	61 f0       	breq	.+24     	; 0x269a <GPIO_readPort+0x52>
    2682:	1f c0       	rjmp	.+62     	; 0x26c2 <GPIO_readPort+0x7a>
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	3c 81       	ldd	r19, Y+4	; 0x04
    2688:	22 30       	cpi	r18, 0x02	; 2
    268a:	31 05       	cpc	r19, r1
    268c:	81 f0       	breq	.+32     	; 0x26ae <GPIO_readPort+0x66>
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	81 f0       	breq	.+32     	; 0x26b8 <GPIO_readPort+0x70>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    269a:	e9 e3       	ldi	r30, 0x39	; 57
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	90 81       	ld	r25, Z
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	10 c0       	rjmp	.+32     	; 0x26c4 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    26a4:	e6 e3       	ldi	r30, 0x36	; 54
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	20 81       	ld	r18, Z
    26aa:	2a 83       	std	Y+2, r18	; 0x02
    26ac:	0b c0       	rjmp	.+22     	; 0x26c4 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    26ae:	e3 e3       	ldi	r30, 0x33	; 51
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	30 81       	ld	r19, Z
    26b4:	3a 83       	std	Y+2, r19	; 0x02
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    26b8:	e0 e3       	ldi	r30, 0x30	; 48
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	8a 83       	std	Y+2, r24	; 0x02
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    26c2:	1a 82       	std	Y+2, r1	; 0x02
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <ADC_init>:
#include <avr/io.h>
#include "adc.h"
#include "../macros/macros.h"

/* function responsible to init ADC */
void ADC_init(void){
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	/* CHOOSe 5v as reference voltage */
	ADMUX = (1<<REFS0) ;
    26dc:	e7 e2       	ldi	r30, 0x27	; 39
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 e4       	ldi	r24, 0x40	; 64
    26e2:	80 83       	st	Z, r24
	/* ADEN -> enable ADC
	 * ADPS0:2 choose ADC clock */
	ADCSRA = (1<<ADEN) |  (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    26e4:	e6 e2       	ldi	r30, 0x26	; 38
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	87 e8       	ldi	r24, 0x87	; 135
    26ea:	80 83       	st	Z, r24
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <ADC_readChannel>:
/* function responsible to read ADC channel */
uint16 ADC_readChannel(uint8 channel_num){
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX&0xE0) | (channel_num & 0x07) ;
    26fe:	a7 e2       	ldi	r26, 0x27	; 39
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e7 e2       	ldi	r30, 0x27	; 39
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	98 2f       	mov	r25, r24
    270a:	90 7e       	andi	r25, 0xE0	; 224
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	87 70       	andi	r24, 0x07	; 7
    2710:	89 2b       	or	r24, r25
    2712:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
    2714:	a6 e2       	ldi	r26, 0x26	; 38
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e6 e2       	ldi	r30, 0x26	; 38
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 64       	ori	r24, 0x40	; 64
    2720:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
    2722:	e6 e2       	ldi	r30, 0x26	; 38
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	80 71       	andi	r24, 0x10	; 16
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	b9 f3       	breq	.-18     	; 0x2722 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF);
    2734:	a6 e2       	ldi	r26, 0x26	; 38
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e6 e2       	ldi	r30, 0x26	; 38
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 61       	ori	r24, 0x10	; 16
    2740:	8c 93       	st	X, r24
	return ADC;
    2742:	e4 e2       	ldi	r30, 0x24	; 36
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <__prologue_saves__>:
    2752:	2f 92       	push	r2
    2754:	3f 92       	push	r3
    2756:	4f 92       	push	r4
    2758:	5f 92       	push	r5
    275a:	6f 92       	push	r6
    275c:	7f 92       	push	r7
    275e:	8f 92       	push	r8
    2760:	9f 92       	push	r9
    2762:	af 92       	push	r10
    2764:	bf 92       	push	r11
    2766:	cf 92       	push	r12
    2768:	df 92       	push	r13
    276a:	ef 92       	push	r14
    276c:	ff 92       	push	r15
    276e:	0f 93       	push	r16
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	ca 1b       	sub	r28, r26
    277c:	db 0b       	sbc	r29, r27
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	09 94       	ijmp

0000278a <__epilogue_restores__>:
    278a:	2a 88       	ldd	r2, Y+18	; 0x12
    278c:	39 88       	ldd	r3, Y+17	; 0x11
    278e:	48 88       	ldd	r4, Y+16	; 0x10
    2790:	5f 84       	ldd	r5, Y+15	; 0x0f
    2792:	6e 84       	ldd	r6, Y+14	; 0x0e
    2794:	7d 84       	ldd	r7, Y+13	; 0x0d
    2796:	8c 84       	ldd	r8, Y+12	; 0x0c
    2798:	9b 84       	ldd	r9, Y+11	; 0x0b
    279a:	aa 84       	ldd	r10, Y+10	; 0x0a
    279c:	b9 84       	ldd	r11, Y+9	; 0x09
    279e:	c8 84       	ldd	r12, Y+8	; 0x08
    27a0:	df 80       	ldd	r13, Y+7	; 0x07
    27a2:	ee 80       	ldd	r14, Y+6	; 0x06
    27a4:	fd 80       	ldd	r15, Y+5	; 0x05
    27a6:	0c 81       	ldd	r16, Y+4	; 0x04
    27a8:	1b 81       	ldd	r17, Y+3	; 0x03
    27aa:	aa 81       	ldd	r26, Y+2	; 0x02
    27ac:	b9 81       	ldd	r27, Y+1	; 0x01
    27ae:	ce 0f       	add	r28, r30
    27b0:	d1 1d       	adc	r29, r1
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	ed 01       	movw	r28, r26
    27be:	08 95       	ret

000027c0 <itoa>:
    27c0:	fb 01       	movw	r30, r22
    27c2:	9f 01       	movw	r18, r30
    27c4:	e8 94       	clt
    27c6:	42 30       	cpi	r20, 0x02	; 2
    27c8:	c4 f0       	brlt	.+48     	; 0x27fa <itoa+0x3a>
    27ca:	45 32       	cpi	r20, 0x25	; 37
    27cc:	b4 f4       	brge	.+44     	; 0x27fa <itoa+0x3a>
    27ce:	4a 30       	cpi	r20, 0x0A	; 10
    27d0:	29 f4       	brne	.+10     	; 0x27dc <itoa+0x1c>
    27d2:	97 fb       	bst	r25, 7
    27d4:	1e f4       	brtc	.+6      	; 0x27dc <itoa+0x1c>
    27d6:	90 95       	com	r25
    27d8:	81 95       	neg	r24
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	64 2f       	mov	r22, r20
    27de:	77 27       	eor	r23, r23
    27e0:	0e 94 11 14 	call	0x2822	; 0x2822 <__udivmodhi4>
    27e4:	80 5d       	subi	r24, 0xD0	; 208
    27e6:	8a 33       	cpi	r24, 0x3A	; 58
    27e8:	0c f0       	brlt	.+2      	; 0x27ec <itoa+0x2c>
    27ea:	89 5d       	subi	r24, 0xD9	; 217
    27ec:	81 93       	st	Z+, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	a1 f7       	brne	.-24     	; 0x27dc <itoa+0x1c>
    27f4:	16 f4       	brtc	.+4      	; 0x27fa <itoa+0x3a>
    27f6:	5d e2       	ldi	r21, 0x2D	; 45
    27f8:	51 93       	st	Z+, r21
    27fa:	10 82       	st	Z, r1
    27fc:	c9 01       	movw	r24, r18
    27fe:	0c 94 01 14 	jmp	0x2802	; 0x2802 <strrev>

00002802 <strrev>:
    2802:	dc 01       	movw	r26, r24
    2804:	fc 01       	movw	r30, r24
    2806:	67 2f       	mov	r22, r23
    2808:	71 91       	ld	r23, Z+
    280a:	77 23       	and	r23, r23
    280c:	e1 f7       	brne	.-8      	; 0x2806 <strrev+0x4>
    280e:	32 97       	sbiw	r30, 0x02	; 2
    2810:	04 c0       	rjmp	.+8      	; 0x281a <strrev+0x18>
    2812:	7c 91       	ld	r23, X
    2814:	6d 93       	st	X+, r22
    2816:	70 83       	st	Z, r23
    2818:	62 91       	ld	r22, -Z
    281a:	ae 17       	cp	r26, r30
    281c:	bf 07       	cpc	r27, r31
    281e:	c8 f3       	brcs	.-14     	; 0x2812 <strrev+0x10>
    2820:	08 95       	ret

00002822 <__udivmodhi4>:
    2822:	aa 1b       	sub	r26, r26
    2824:	bb 1b       	sub	r27, r27
    2826:	51 e1       	ldi	r21, 0x11	; 17
    2828:	07 c0       	rjmp	.+14     	; 0x2838 <__udivmodhi4_ep>

0000282a <__udivmodhi4_loop>:
    282a:	aa 1f       	adc	r26, r26
    282c:	bb 1f       	adc	r27, r27
    282e:	a6 17       	cp	r26, r22
    2830:	b7 07       	cpc	r27, r23
    2832:	10 f0       	brcs	.+4      	; 0x2838 <__udivmodhi4_ep>
    2834:	a6 1b       	sub	r26, r22
    2836:	b7 0b       	sbc	r27, r23

00002838 <__udivmodhi4_ep>:
    2838:	88 1f       	adc	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	5a 95       	dec	r21
    283e:	a9 f7       	brne	.-22     	; 0x282a <__udivmodhi4_loop>
    2840:	80 95       	com	r24
    2842:	90 95       	com	r25
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	08 95       	ret

0000284a <_exit>:
    284a:	f8 94       	cli

0000284c <__stop_program>:
    284c:	ff cf       	rjmp	.-2      	; 0x284c <__stop_program>
