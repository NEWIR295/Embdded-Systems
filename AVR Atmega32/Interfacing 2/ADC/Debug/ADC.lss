
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000285a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000285a  000028ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d40  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d28  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000724d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

#include "../ADC_DRIVER/adc.h"
#include "../LCD_DRIVER/lcd.h"

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <main+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	uint16 res_value;
	LCD_init(); /* initialize LCD driver */
     b40:	0e 94 cb 05 	call	0xb96	; 0xb96 <LCD_init>
	ADC_init(); /* initialize ADC driver */
     b44:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_init>

	/* Display this string "ADC Value = " only once on LCD at the first row */

	LCD_displayString("ADC value = ");
     b48:	80 e6       	ldi	r24, 0x60	; 96
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayString>
	LCD_displayStringRowColumn(1,0," so sad ");
     b50:	2d e6       	ldi	r18, 0x6D	; 109
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	a9 01       	movw	r20, r18
     b5a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_displayStringRowColumn>
    while(1)
    {
    	/* Read ADC channel 0 where the potentiometer is connected */
		res_value = ADC_readChannel(0);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 7f 13 	call	0x26fe	; 0x26fe <ADC_readChannel>
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01

		/* Display the ADC digital value every time at same position */
		LCD_moveCursor(0,12);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	6c e0       	ldi	r22, 0x0C	; 12
     b6c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_moveCursor>
		if(res_value >= 1000)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	23 e0       	ldi	r18, 0x03	; 3
     b76:	88 3e       	cpi	r24, 0xE8	; 232
     b78:	92 07       	cpc	r25, r18
     b7a:	28 f0       	brcs	.+10     	; 0xb86 <main+0x50>
		{
			LCD_integerToString(res_value);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_integerToString>
     b84:	ec cf       	rjmp	.-40     	; 0xb5e <main+0x28>
		}
		else
		{
			LCD_integerToString(res_value);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_integerToString>
			/* In case the digital value is three or two or one digits print space in the next digit place */
			LCD_displayChar(' ');
     b8e:	80 e2       	ldi	r24, 0x20	; 32
     b90:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LCD_displayChar>
     b94:	e4 cf       	rjmp	.-56     	; 0xb5e <main+0x28>

00000b96 <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 ea       	ldi	r26, 0xA0	; 160
     bc4:	b1 e4       	ldi	r27, 0x41	; 65
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a e7       	ldi	r20, 0x7A	; 122
     bdc:	53 e4       	ldi	r21, 0x43	; 67
     bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <LCD_init+0x7a>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <LCD_init+0xf8>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <LCD_init+0xda>
     c52:	89 e1       	ldi	r24, 0x19	; 25
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCD_init+0xc8>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <LCD_init+0xbc>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <LCD_init+0x104>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	64 e0       	ldi	r22, 0x04	; 4
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	65 e0       	ldi	r22, 0x05	; 5
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	66 e0       	ldi	r22, 0x06	; 6
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 24 10 	call	0x2048	; 0x2048 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
     cca:	83 e3       	ldi	r24, 0x33	; 51
     ccc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
     cd0:	82 e3       	ldi	r24, 0x32	; 50
     cd2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
     cd6:	88 e2       	ldi	r24, 0x28	; 40
     cd8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>

}
     ce8:	2e 96       	adiw	r28, 0x0e	; 14
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	c3 56       	subi	r28, 0x63	; 99
     d08:	d0 40       	sbci	r29, 0x00	; 0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	fe 01       	movw	r30, r28
     d16:	ed 59       	subi	r30, 0x9D	; 157
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
     d26:	fe 01       	movw	r30, r28
     d28:	e1 5a       	subi	r30, 0xA1	; 161
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a0 e8       	ldi	r26, 0x80	; 128
     d32:	bf e3       	ldi	r27, 0x3F	; 63
     d34:	80 83       	st	Z, r24
     d36:	91 83       	std	Z+1, r25	; 0x01
     d38:	a2 83       	std	Z+2, r26	; 0x02
     d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3c:	8e 01       	movw	r16, r28
     d3e:	05 5a       	subi	r16, 0xA5	; 165
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	fe 01       	movw	r30, r28
     d44:	e1 5a       	subi	r30, 0xA1	; 161
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	4a e7       	ldi	r20, 0x7A	; 122
     d56:	53 e4       	ldi	r21, 0x43	; 67
     d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	80 83       	st	Z, r24
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	a2 83       	std	Z+2, r26	; 0x02
     d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d6a:	fe 01       	movw	r30, r28
     d6c:	e5 5a       	subi	r30, 0xA5	; 165
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	44 f4       	brge	.+16     	; 0xd98 <LCD_sendCommand+0x9e>
		__ticks = 1;
     d88:	fe 01       	movw	r30, r28
     d8a:	e7 5a       	subi	r30, 0xA7	; 167
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	64 c0       	rjmp	.+200    	; 0xe60 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
     d98:	fe 01       	movw	r30, r28
     d9a:	e5 5a       	subi	r30, 0xA5	; 165
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	3f ef       	ldi	r19, 0xFF	; 255
     daa:	4f e7       	ldi	r20, 0x7F	; 127
     dac:	57 e4       	ldi	r21, 0x47	; 71
     dae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     db2:	18 16       	cp	r1, r24
     db4:	0c f0       	brlt	.+2      	; 0xdb8 <LCD_sendCommand+0xbe>
     db6:	43 c0       	rjmp	.+134    	; 0xe3e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	fe 01       	movw	r30, r28
     dba:	e1 5a       	subi	r30, 0xA1	; 161
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8e 01       	movw	r16, r28
     dd8:	07 5a       	subi	r16, 0xA7	; 167
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	f8 01       	movw	r30, r16
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
     dee:	1f c0       	rjmp	.+62     	; 0xe2e <LCD_sendCommand+0x134>
     df0:	fe 01       	movw	r30, r28
     df2:	e9 5a       	subi	r30, 0xA9	; 169
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	89 e1       	ldi	r24, 0x19	; 25
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	fe 01       	movw	r30, r28
     e00:	e9 5a       	subi	r30, 0xA9	; 169
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <LCD_sendCommand+0x10e>
     e0c:	fe 01       	movw	r30, r28
     e0e:	e9 5a       	subi	r30, 0xA9	; 169
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e16:	de 01       	movw	r26, r28
     e18:	a7 5a       	subi	r26, 0xA7	; 167
     e1a:	bf 4f       	sbci	r27, 0xFF	; 255
     e1c:	fe 01       	movw	r30, r28
     e1e:	e7 5a       	subi	r30, 0xA7	; 167
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2e:	fe 01       	movw	r30, r28
     e30:	e7 5a       	subi	r30, 0xA7	; 167
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	d1 f6       	brne	.-76     	; 0xdf0 <LCD_sendCommand+0xf6>
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3e:	8e 01       	movw	r16, r28
     e40:	07 5a       	subi	r16, 0xA7	; 167
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	fe 01       	movw	r30, r28
     e46:	e5 5a       	subi	r30, 0xA5	; 165
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	de 01       	movw	r26, r28
     e62:	ab 5a       	subi	r26, 0xAB	; 171
     e64:	bf 4f       	sbci	r27, 0xFF	; 255
     e66:	fe 01       	movw	r30, r28
     e68:	e7 5a       	subi	r30, 0xA7	; 167
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	8d 93       	st	X+, r24
     e72:	9c 93       	st	X, r25
     e74:	fe 01       	movw	r30, r28
     e76:	eb 5a       	subi	r30, 0xAB	; 171
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <LCD_sendCommand+0x184>
     e82:	fe 01       	movw	r30, r28
     e84:	eb 5a       	subi	r30, 0xAB	; 171
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	62 e0       	ldi	r22, 0x02	; 2
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
     e96:	fe 01       	movw	r30, r28
     e98:	ef 5a       	subi	r30, 0xAF	; 175
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	80 83       	st	Z, r24
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	a2 83       	std	Z+2, r26	; 0x02
     eaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	8e 01       	movw	r16, r28
     eae:	03 5b       	subi	r16, 0xB3	; 179
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	fe 01       	movw	r30, r28
     eb4:	ef 5a       	subi	r30, 0xAF	; 175
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	53 e4       	ldi	r21, 0x43	; 67
     ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eda:	fe 01       	movw	r30, r28
     edc:	e3 5b       	subi	r30, 0xB3	; 179
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	44 f4       	brge	.+16     	; 0xf08 <LCD_sendCommand+0x20e>
		__ticks = 1;
     ef8:	fe 01       	movw	r30, r28
     efa:	e5 5b       	subi	r30, 0xB5	; 181
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
     f06:	64 c0       	rjmp	.+200    	; 0xfd0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     f08:	fe 01       	movw	r30, r28
     f0a:	e3 5b       	subi	r30, 0xB3	; 179
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	0c f0       	brlt	.+2      	; 0xf28 <LCD_sendCommand+0x22e>
     f26:	43 c0       	rjmp	.+134    	; 0xfae <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	fe 01       	movw	r30, r28
     f2a:	ef 5a       	subi	r30, 0xAF	; 175
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	8e 01       	movw	r16, r28
     f48:	05 5b       	subi	r16, 0xB5	; 181
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	f8 01       	movw	r30, r16
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
     f5e:	1f c0       	rjmp	.+62     	; 0xf9e <LCD_sendCommand+0x2a4>
     f60:	fe 01       	movw	r30, r28
     f62:	e7 5b       	subi	r30, 0xB7	; 183
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	89 e1       	ldi	r24, 0x19	; 25
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	fe 01       	movw	r30, r28
     f70:	e7 5b       	subi	r30, 0xB7	; 183
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x27e>
     f7c:	fe 01       	movw	r30, r28
     f7e:	e7 5b       	subi	r30, 0xB7	; 183
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	de 01       	movw	r26, r28
     f88:	a5 5b       	subi	r26, 0xB5	; 181
     f8a:	bf 4f       	sbci	r27, 0xFF	; 255
     f8c:	fe 01       	movw	r30, r28
     f8e:	e5 5b       	subi	r30, 0xB5	; 181
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	11 96       	adiw	r26, 0x01	; 1
     f9a:	9c 93       	st	X, r25
     f9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	fe 01       	movw	r30, r28
     fa0:	e5 5b       	subi	r30, 0xB5	; 181
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	d1 f6       	brne	.-76     	; 0xf60 <LCD_sendCommand+0x266>
     fac:	27 c0       	rjmp	.+78     	; 0xffc <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	8e 01       	movw	r16, r28
     fb0:	05 5b       	subi	r16, 0xB5	; 181
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	fe 01       	movw	r30, r28
     fb6:	e3 5b       	subi	r30, 0xB3	; 179
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	60 81       	ld	r22, Z
     fbc:	71 81       	ldd	r23, Z+1	; 0x01
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	f8 01       	movw	r30, r16
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	de 01       	movw	r26, r28
     fd2:	a9 5b       	subi	r26, 0xB9	; 185
     fd4:	bf 4f       	sbci	r27, 0xFF	; 255
     fd6:	fe 01       	movw	r30, r28
     fd8:	e5 5b       	subi	r30, 0xB5	; 181
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	8d 93       	st	X+, r24
     fe2:	9c 93       	st	X, r25
     fe4:	fe 01       	movw	r30, r28
     fe6:	e9 5b       	subi	r30, 0xB9	; 185
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_sendCommand+0x2f4>
     ff2:	fe 01       	movw	r30, r28
     ff4:	e9 5b       	subi	r30, 0xB9	; 185
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
     ffc:	fe 01       	movw	r30, r28
     ffe:	ed 59       	subi	r30, 0x9D	; 157
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	80 71       	andi	r24, 0x10	; 16
    100a:	90 70       	andi	r25, 0x00	; 0
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	98 2f       	mov	r25, r24
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	63 e0       	ldi	r22, 0x03	; 3
    1022:	49 2f       	mov	r20, r25
    1024:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1028:	fe 01       	movw	r30, r28
    102a:	ed 59       	subi	r30, 0x9D	; 157
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	80 81       	ld	r24, Z
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	80 72       	andi	r24, 0x20	; 32
    1036:	90 70       	andi	r25, 0x00	; 0
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	95 95       	asr	r25
    1042:	87 95       	ror	r24
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	95 95       	asr	r25
    104a:	87 95       	ror	r24
    104c:	98 2f       	mov	r25, r24
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	64 e0       	ldi	r22, 0x04	; 4
    1052:	49 2f       	mov	r20, r25
    1054:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1058:	fe 01       	movw	r30, r28
    105a:	ed 59       	subi	r30, 0x9D	; 157
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	80 74       	andi	r24, 0x40	; 64
    1066:	90 70       	andi	r25, 0x00	; 0
    1068:	08 2e       	mov	r0, r24
    106a:	89 2f       	mov	r24, r25
    106c:	00 0c       	add	r0, r0
    106e:	88 1f       	adc	r24, r24
    1070:	99 0b       	sbc	r25, r25
    1072:	00 0c       	add	r0, r0
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	98 2f       	mov	r25, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	65 e0       	ldi	r22, 0x05	; 5
    107e:	49 2f       	mov	r20, r25
    1080:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1084:	fe 01       	movw	r30, r28
    1086:	ed 59       	subi	r30, 0x9D	; 157
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	98 2f       	mov	r25, r24
    108e:	99 1f       	adc	r25, r25
    1090:	99 27       	eor	r25, r25
    1092:	99 1f       	adc	r25, r25
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	66 e0       	ldi	r22, 0x06	; 6
    1098:	49 2f       	mov	r20, r25
    109a:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    109e:	fe 01       	movw	r30, r28
    10a0:	ed 5b       	subi	r30, 0xBD	; 189
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 e8       	ldi	r26, 0x80	; 128
    10aa:	bf e3       	ldi	r27, 0x3F	; 63
    10ac:	80 83       	st	Z, r24
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	a2 83       	std	Z+2, r26	; 0x02
    10b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b4:	8e 01       	movw	r16, r28
    10b6:	01 5c       	subi	r16, 0xC1	; 193
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	fe 01       	movw	r30, r28
    10bc:	ed 5b       	subi	r30, 0xBD	; 189
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4a e7       	ldi	r20, 0x7A	; 122
    10ce:	53 e4       	ldi	r21, 0x43	; 67
    10d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	f8 01       	movw	r30, r16
    10da:	80 83       	st	Z, r24
    10dc:	91 83       	std	Z+1, r25	; 0x01
    10de:	a2 83       	std	Z+2, r26	; 0x02
    10e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10e2:	fe 01       	movw	r30, r28
    10e4:	ff 96       	adiw	r30, 0x3f	; 63
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	2c f4       	brge	.+10     	; 0x1108 <LCD_sendCommand+0x40e>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9e af       	std	Y+62, r25	; 0x3e
    1104:	8d af       	std	Y+61, r24	; 0x3d
    1106:	46 c0       	rjmp	.+140    	; 0x1194 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1108:	fe 01       	movw	r30, r28
    110a:	ff 96       	adiw	r30, 0x3f	; 63
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	64 f5       	brge	.+88     	; 0x117c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1124:	fe 01       	movw	r30, r28
    1126:	ed 5b       	subi	r30, 0xBD	; 189
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e2       	ldi	r20, 0x20	; 32
    1138:	51 e4       	ldi	r21, 0x41	; 65
    113a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	9e af       	std	Y+62, r25	; 0x3e
    1150:	8d af       	std	Y+61, r24	; 0x3d
    1152:	0f c0       	rjmp	.+30     	; 0x1172 <LCD_sendCommand+0x478>
    1154:	89 e1       	ldi	r24, 0x19	; 25
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9c af       	std	Y+60, r25	; 0x3c
    115a:	8b af       	std	Y+59, r24	; 0x3b
    115c:	8b ad       	ldd	r24, Y+59	; 0x3b
    115e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <LCD_sendCommand+0x466>
    1164:	9c af       	std	Y+60, r25	; 0x3c
    1166:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1168:	8d ad       	ldd	r24, Y+61	; 0x3d
    116a:	9e ad       	ldd	r25, Y+62	; 0x3e
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	9e af       	std	Y+62, r25	; 0x3e
    1170:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	8d ad       	ldd	r24, Y+61	; 0x3d
    1174:	9e ad       	ldd	r25, Y+62	; 0x3e
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	69 f7       	brne	.-38     	; 0x1154 <LCD_sendCommand+0x45a>
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117c:	fe 01       	movw	r30, r28
    117e:	ff 96       	adiw	r30, 0x3f	; 63
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9e af       	std	Y+62, r25	; 0x3e
    1192:	8d af       	std	Y+61, r24	; 0x3d
    1194:	8d ad       	ldd	r24, Y+61	; 0x3d
    1196:	9e ad       	ldd	r25, Y+62	; 0x3e
    1198:	9a af       	std	Y+58, r25	; 0x3a
    119a:	89 af       	std	Y+57, r24	; 0x39
    119c:	89 ad       	ldd	r24, Y+57	; 0x39
    119e:	9a ad       	ldd	r25, Y+58	; 0x3a
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <LCD_sendCommand+0x4a6>
    11a4:	9a af       	std	Y+58, r25	; 0x3a
    11a6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e8       	ldi	r26, 0x80	; 128
    11b8:	bf e3       	ldi	r27, 0x3F	; 63
    11ba:	8d ab       	std	Y+53, r24	; 0x35
    11bc:	9e ab       	std	Y+54, r25	; 0x36
    11be:	af ab       	std	Y+55, r26	; 0x37
    11c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6d a9       	ldd	r22, Y+53	; 0x35
    11c4:	7e a9       	ldd	r23, Y+54	; 0x36
    11c6:	8f a9       	ldd	r24, Y+55	; 0x37
    11c8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a e7       	ldi	r20, 0x7A	; 122
    11d0:	53 e4       	ldi	r21, 0x43	; 67
    11d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	89 ab       	std	Y+49, r24	; 0x31
    11dc:	9a ab       	std	Y+50, r25	; 0x32
    11de:	ab ab       	std	Y+51, r26	; 0x33
    11e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11e2:	69 a9       	ldd	r22, Y+49	; 0x31
    11e4:	7a a9       	ldd	r23, Y+50	; 0x32
    11e6:	8b a9       	ldd	r24, Y+51	; 0x33
    11e8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_sendCommand+0x50a>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	98 ab       	std	Y+48, r25	; 0x30
    1200:	8f a7       	std	Y+47, r24	; 0x2f
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1204:	69 a9       	ldd	r22, Y+49	; 0x31
    1206:	7a a9       	ldd	r23, Y+50	; 0x32
    1208:	8b a9       	ldd	r24, Y+51	; 0x33
    120a:	9c a9       	ldd	r25, Y+52	; 0x34
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6d a9       	ldd	r22, Y+53	; 0x35
    121e:	7e a9       	ldd	r23, Y+54	; 0x36
    1220:	8f a9       	ldd	r24, Y+55	; 0x37
    1222:	98 ad       	ldd	r25, Y+56	; 0x38
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	98 ab       	std	Y+48, r25	; 0x30
    1242:	8f a7       	std	Y+47, r24	; 0x2f
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <LCD_sendCommand+0x56a>
    1246:	89 e1       	ldi	r24, 0x19	; 25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9e a7       	std	Y+46, r25	; 0x2e
    124c:	8d a7       	std	Y+45, r24	; 0x2d
    124e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1250:	9e a5       	ldd	r25, Y+46	; 0x2e
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCD_sendCommand+0x558>
    1256:	9e a7       	std	Y+46, r25	; 0x2e
    1258:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8f a5       	ldd	r24, Y+47	; 0x2f
    125c:	98 a9       	ldd	r25, Y+48	; 0x30
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	98 ab       	std	Y+48, r25	; 0x30
    1262:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8f a5       	ldd	r24, Y+47	; 0x2f
    1266:	98 a9       	ldd	r25, Y+48	; 0x30
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <LCD_sendCommand+0x54c>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	69 a9       	ldd	r22, Y+49	; 0x31
    1270:	7a a9       	ldd	r23, Y+50	; 0x32
    1272:	8b a9       	ldd	r24, Y+51	; 0x33
    1274:	9c a9       	ldd	r25, Y+52	; 0x34
    1276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	98 ab       	std	Y+48, r25	; 0x30
    1280:	8f a7       	std	Y+47, r24	; 0x2f
    1282:	8f a5       	ldd	r24, Y+47	; 0x2f
    1284:	98 a9       	ldd	r25, Y+48	; 0x30
    1286:	9c a7       	std	Y+44, r25	; 0x2c
    1288:	8b a7       	std	Y+43, r24	; 0x2b
    128a:	8b a5       	ldd	r24, Y+43	; 0x2b
    128c:	9c a5       	ldd	r25, Y+44	; 0x2c
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <LCD_sendCommand+0x594>
    1292:	9c a7       	std	Y+44, r25	; 0x2c
    1294:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e8       	ldi	r26, 0x80	; 128
    12a6:	bf e3       	ldi	r27, 0x3F	; 63
    12a8:	8f a3       	std	Y+39, r24	; 0x27
    12aa:	98 a7       	std	Y+40, r25	; 0x28
    12ac:	a9 a7       	std	Y+41, r26	; 0x29
    12ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b0:	6f a1       	ldd	r22, Y+39	; 0x27
    12b2:	78 a5       	ldd	r23, Y+40	; 0x28
    12b4:	89 a5       	ldd	r24, Y+41	; 0x29
    12b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	4a e7       	ldi	r20, 0x7A	; 122
    12be:	53 e4       	ldi	r21, 0x43	; 67
    12c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8b a3       	std	Y+35, r24	; 0x23
    12ca:	9c a3       	std	Y+36, r25	; 0x24
    12cc:	ad a3       	std	Y+37, r26	; 0x25
    12ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12d0:	6b a1       	ldd	r22, Y+35	; 0x23
    12d2:	7c a1       	ldd	r23, Y+36	; 0x24
    12d4:	8d a1       	ldd	r24, Y+37	; 0x25
    12d6:	9e a1       	ldd	r25, Y+38	; 0x26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9a a3       	std	Y+34, r25	; 0x22
    12ee:	89 a3       	std	Y+33, r24	; 0x21
    12f0:	3f c0       	rjmp	.+126    	; 0x1370 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    12f2:	6b a1       	ldd	r22, Y+35	; 0x23
    12f4:	7c a1       	ldd	r23, Y+36	; 0x24
    12f6:	8d a1       	ldd	r24, Y+37	; 0x25
    12f8:	9e a1       	ldd	r25, Y+38	; 0x26
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	3f ef       	ldi	r19, 0xFF	; 255
    12fe:	4f e7       	ldi	r20, 0x7F	; 127
    1300:	57 e4       	ldi	r21, 0x47	; 71
    1302:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1306:	18 16       	cp	r1, r24
    1308:	4c f5       	brge	.+82     	; 0x135c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130a:	6f a1       	ldd	r22, Y+39	; 0x27
    130c:	78 a5       	ldd	r23, Y+40	; 0x28
    130e:	89 a5       	ldd	r24, Y+41	; 0x29
    1310:	9a a5       	ldd	r25, Y+42	; 0x2a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	51 e4       	ldi	r21, 0x41	; 65
    131a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9a a3       	std	Y+34, r25	; 0x22
    1330:	89 a3       	std	Y+33, r24	; 0x21
    1332:	0f c0       	rjmp	.+30     	; 0x1352 <LCD_sendCommand+0x658>
    1334:	89 e1       	ldi	r24, 0x19	; 25
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
    133c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    133e:	98 a1       	ldd	r25, Y+32	; 0x20
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <LCD_sendCommand+0x646>
    1344:	98 a3       	std	Y+32, r25	; 0x20
    1346:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1348:	89 a1       	ldd	r24, Y+33	; 0x21
    134a:	9a a1       	ldd	r25, Y+34	; 0x22
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	9a a3       	std	Y+34, r25	; 0x22
    1350:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1352:	89 a1       	ldd	r24, Y+33	; 0x21
    1354:	9a a1       	ldd	r25, Y+34	; 0x22
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	69 f7       	brne	.-38     	; 0x1334 <LCD_sendCommand+0x63a>
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135c:	6b a1       	ldd	r22, Y+35	; 0x23
    135e:	7c a1       	ldd	r23, Y+36	; 0x24
    1360:	8d a1       	ldd	r24, Y+37	; 0x25
    1362:	9e a1       	ldd	r25, Y+38	; 0x26
    1364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9a a3       	std	Y+34, r25	; 0x22
    136e:	89 a3       	std	Y+33, r24	; 0x21
    1370:	89 a1       	ldd	r24, Y+33	; 0x21
    1372:	9a a1       	ldd	r25, Y+34	; 0x22
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d
    1378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    137a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_sendCommand+0x682>
    1380:	9e 8f       	std	Y+30, r25	; 0x1e
    1382:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1384:	fe 01       	movw	r30, r28
    1386:	ed 59       	subi	r30, 0x9D	; 157
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	98 2f       	mov	r25, r24
    138e:	91 70       	andi	r25, 0x01	; 1
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	63 e0       	ldi	r22, 0x03	; 3
    1394:	49 2f       	mov	r20, r25
    1396:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    139a:	fe 01       	movw	r30, r28
    139c:	ed 59       	subi	r30, 0x9D	; 157
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 81       	ld	r24, Z
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	82 70       	andi	r24, 0x02	; 2
    13a8:	90 70       	andi	r25, 0x00	; 0
    13aa:	95 95       	asr	r25
    13ac:	87 95       	ror	r24
    13ae:	98 2f       	mov	r25, r24
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	49 2f       	mov	r20, r25
    13b6:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    13ba:	fe 01       	movw	r30, r28
    13bc:	ed 59       	subi	r30, 0x9D	; 157
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	84 70       	andi	r24, 0x04	; 4
    13c8:	90 70       	andi	r25, 0x00	; 0
    13ca:	95 95       	asr	r25
    13cc:	87 95       	ror	r24
    13ce:	95 95       	asr	r25
    13d0:	87 95       	ror	r24
    13d2:	98 2f       	mov	r25, r24
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	49 2f       	mov	r20, r25
    13da:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    13de:	fe 01       	movw	r30, r28
    13e0:	ed 59       	subi	r30, 0x9D	; 157
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	88 70       	andi	r24, 0x08	; 8
    13ec:	90 70       	andi	r25, 0x00	; 0
    13ee:	95 95       	asr	r25
    13f0:	87 95       	ror	r24
    13f2:	95 95       	asr	r25
    13f4:	87 95       	ror	r24
    13f6:	95 95       	asr	r25
    13f8:	87 95       	ror	r24
    13fa:	98 2f       	mov	r25, r24
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	66 e0       	ldi	r22, 0x06	; 6
    1400:	49 2f       	mov	r20, r25
    1402:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e8       	ldi	r26, 0x80	; 128
    140c:	bf e3       	ldi	r27, 0x3F	; 63
    140e:	89 8f       	std	Y+25, r24	; 0x19
    1410:	9a 8f       	std	Y+26, r25	; 0x1a
    1412:	ab 8f       	std	Y+27, r26	; 0x1b
    1414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	53 e4       	ldi	r21, 0x43	; 67
    1426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d 8b       	std	Y+21, r24	; 0x15
    1430:	9e 8b       	std	Y+22, r25	; 0x16
    1432:	af 8b       	std	Y+23, r26	; 0x17
    1434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <LCD_sendCommand+0x75e>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <LCD_sendCommand+0x7be>
    149a:	89 e1       	ldi	r24, 0x19	; 25
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	9a 89       	ldd	r25, Y+18	; 0x12
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <LCD_sendCommand+0x7ac>
    14aa:	9a 8b       	std	Y+18, r25	; 0x12
    14ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9c 8b       	std	Y+20, r25	; 0x14
    14b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <LCD_sendCommand+0x7a0>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
    14d6:	8b 89       	ldd	r24, Y+19	; 0x13
    14d8:	9c 89       	ldd	r25, Y+20	; 0x14
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_sendCommand+0x7e8>
    14e6:	98 8b       	std	Y+16, r25	; 0x10
    14e8:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e8       	ldi	r26, 0x80	; 128
    14fa:	bf e3       	ldi	r27, 0x3F	; 63
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
    14fe:	9c 87       	std	Y+12, r25	; 0x0c
    1500:	ad 87       	std	Y+13, r26	; 0x0d
    1502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a e7       	ldi	r20, 0x7A	; 122
    1512:	53 e4       	ldi	r21, 0x43	; 67
    1514:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	98 87       	std	Y+8, r25	; 0x08
    1520:	a9 87       	std	Y+9, r26	; 0x09
    1522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <LCD_sendCommand+0x84c>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_sendCommand+0x8ac>
    1588:	89 e1       	ldi	r24, 0x19	; 25
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_sendCommand+0x89a>
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <LCD_sendCommand+0x88e>
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_sendCommand+0x8d6>
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    15d8:	cd 59       	subi	r28, 0x9D	; 157
    15da:	df 4f       	sbci	r29, 0xFF	; 255
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	08 95       	ret

000015f0 <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	c3 56       	subi	r28, 0x63	; 99
    15fe:	d0 40       	sbci	r29, 0x00	; 0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	fe 01       	movw	r30, r28
    160c:	ed 59       	subi	r30, 0x9D	; 157
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    161c:	fe 01       	movw	r30, r28
    161e:	e1 5a       	subi	r30, 0xA1	; 161
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e8       	ldi	r26, 0x80	; 128
    1628:	bf e3       	ldi	r27, 0x3F	; 63
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	a2 83       	std	Z+2, r26	; 0x02
    1630:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	8e 01       	movw	r16, r28
    1634:	05 5a       	subi	r16, 0xA5	; 165
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	fe 01       	movw	r30, r28
    163a:	e1 5a       	subi	r30, 0xA1	; 161
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a e7       	ldi	r20, 0x7A	; 122
    164c:	53 e4       	ldi	r21, 0x43	; 67
    164e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	f8 01       	movw	r30, r16
    1658:	80 83       	st	Z, r24
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	a2 83       	std	Z+2, r26	; 0x02
    165e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1660:	fe 01       	movw	r30, r28
    1662:	e5 5a       	subi	r30, 0xA5	; 165
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	44 f4       	brge	.+16     	; 0x168e <LCD_displayChar+0x9e>
		__ticks = 1;
    167e:	fe 01       	movw	r30, r28
    1680:	e7 5a       	subi	r30, 0xA7	; 167
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	64 c0       	rjmp	.+200    	; 0x1756 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    168e:	fe 01       	movw	r30, r28
    1690:	e5 5a       	subi	r30, 0xA5	; 165
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <LCD_displayChar+0xbe>
    16ac:	43 c0       	rjmp	.+134    	; 0x1734 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	fe 01       	movw	r30, r28
    16b0:	e1 5a       	subi	r30, 0xA1	; 161
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8e 01       	movw	r16, r28
    16ce:	07 5a       	subi	r16, 0xA7	; 167
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	1f c0       	rjmp	.+62     	; 0x1724 <LCD_displayChar+0x134>
    16e6:	fe 01       	movw	r30, r28
    16e8:	e9 5a       	subi	r30, 0xA9	; 169
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	89 e1       	ldi	r24, 0x19	; 25
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24
    16f4:	fe 01       	movw	r30, r28
    16f6:	e9 5a       	subi	r30, 0xA9	; 169
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCD_displayChar+0x10e>
    1702:	fe 01       	movw	r30, r28
    1704:	e9 5a       	subi	r30, 0xA9	; 169
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	de 01       	movw	r26, r28
    170e:	a7 5a       	subi	r26, 0xA7	; 167
    1710:	bf 4f       	sbci	r27, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	e7 5a       	subi	r30, 0xA7	; 167
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	fe 01       	movw	r30, r28
    1726:	e7 5a       	subi	r30, 0xA7	; 167
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	d1 f6       	brne	.-76     	; 0x16e6 <LCD_displayChar+0xf6>
    1732:	27 c0       	rjmp	.+78     	; 0x1782 <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	8e 01       	movw	r16, r28
    1736:	07 5a       	subi	r16, 0xA7	; 167
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	e5 5a       	subi	r30, 0xA5	; 165
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	f8 01       	movw	r30, r16
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
    1756:	de 01       	movw	r26, r28
    1758:	ab 5a       	subi	r26, 0xAB	; 171
    175a:	bf 4f       	sbci	r27, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	e7 5a       	subi	r30, 0xA7	; 167
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	8d 93       	st	X+, r24
    1768:	9c 93       	st	X, r25
    176a:	fe 01       	movw	r30, r28
    176c:	eb 5a       	subi	r30, 0xAB	; 171
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_displayChar+0x184>
    1778:	fe 01       	movw	r30, r28
    177a:	eb 5a       	subi	r30, 0xAB	; 171
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    178c:	fe 01       	movw	r30, r28
    178e:	ef 5a       	subi	r30, 0xAF	; 175
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a0 e8       	ldi	r26, 0x80	; 128
    1798:	bf e3       	ldi	r27, 0x3F	; 63
    179a:	80 83       	st	Z, r24
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	a2 83       	std	Z+2, r26	; 0x02
    17a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	8e 01       	movw	r16, r28
    17a4:	03 5b       	subi	r16, 0xB3	; 179
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	ef 5a       	subi	r30, 0xAF	; 175
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a e7       	ldi	r20, 0x7A	; 122
    17bc:	53 e4       	ldi	r21, 0x43	; 67
    17be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d0:	fe 01       	movw	r30, r28
    17d2:	e3 5b       	subi	r30, 0xB3	; 179
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	44 f4       	brge	.+16     	; 0x17fe <LCD_displayChar+0x20e>
		__ticks = 1;
    17ee:	fe 01       	movw	r30, r28
    17f0:	e5 5b       	subi	r30, 0xB5	; 181
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
    17fc:	64 c0       	rjmp	.+200    	; 0x18c6 <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 5b       	subi	r30, 0xB3	; 179
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	0c f0       	brlt	.+2      	; 0x181e <LCD_displayChar+0x22e>
    181c:	43 c0       	rjmp	.+134    	; 0x18a4 <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	fe 01       	movw	r30, r28
    1820:	ef 5a       	subi	r30, 0xAF	; 175
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8e 01       	movw	r16, r28
    183e:	05 5b       	subi	r16, 0xB5	; 181
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	1f c0       	rjmp	.+62     	; 0x1894 <LCD_displayChar+0x2a4>
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5b       	subi	r30, 0xB7	; 183
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	fe 01       	movw	r30, r28
    1866:	e7 5b       	subi	r30, 0xB7	; 183
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_displayChar+0x27e>
    1872:	fe 01       	movw	r30, r28
    1874:	e7 5b       	subi	r30, 0xB7	; 183
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	de 01       	movw	r26, r28
    187e:	a5 5b       	subi	r26, 0xB5	; 181
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e5 5b       	subi	r30, 0xB5	; 181
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1894:	fe 01       	movw	r30, r28
    1896:	e5 5b       	subi	r30, 0xB5	; 181
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	d1 f6       	brne	.-76     	; 0x1856 <LCD_displayChar+0x266>
    18a2:	27 c0       	rjmp	.+78     	; 0x18f2 <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	8e 01       	movw	r16, r28
    18a6:	05 5b       	subi	r16, 0xB5	; 181
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	e3 5b       	subi	r30, 0xB3	; 179
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
    18c6:	de 01       	movw	r26, r28
    18c8:	a9 5b       	subi	r26, 0xB9	; 185
    18ca:	bf 4f       	sbci	r27, 0xFF	; 255
    18cc:	fe 01       	movw	r30, r28
    18ce:	e5 5b       	subi	r30, 0xB5	; 181
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	8d 93       	st	X+, r24
    18d8:	9c 93       	st	X, r25
    18da:	fe 01       	movw	r30, r28
    18dc:	e9 5b       	subi	r30, 0xB9	; 185
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_displayChar+0x2f4>
    18e8:	fe 01       	movw	r30, r28
    18ea:	e9 5b       	subi	r30, 0xB9	; 185
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    18f2:	fe 01       	movw	r30, r28
    18f4:	ed 59       	subi	r30, 0x9D	; 157
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	80 71       	andi	r24, 0x10	; 16
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	95 95       	asr	r25
    1904:	87 95       	ror	r24
    1906:	95 95       	asr	r25
    1908:	87 95       	ror	r24
    190a:	95 95       	asr	r25
    190c:	87 95       	ror	r24
    190e:	95 95       	asr	r25
    1910:	87 95       	ror	r24
    1912:	98 2f       	mov	r25, r24
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	63 e0       	ldi	r22, 0x03	; 3
    1918:	49 2f       	mov	r20, r25
    191a:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    191e:	fe 01       	movw	r30, r28
    1920:	ed 59       	subi	r30, 0x9D	; 157
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	80 72       	andi	r24, 0x20	; 32
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	95 95       	asr	r25
    1930:	87 95       	ror	r24
    1932:	95 95       	asr	r25
    1934:	87 95       	ror	r24
    1936:	95 95       	asr	r25
    1938:	87 95       	ror	r24
    193a:	95 95       	asr	r25
    193c:	87 95       	ror	r24
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	98 2f       	mov	r25, r24
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	64 e0       	ldi	r22, 0x04	; 4
    1948:	49 2f       	mov	r20, r25
    194a:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    194e:	fe 01       	movw	r30, r28
    1950:	ed 59       	subi	r30, 0x9D	; 157
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	80 74       	andi	r24, 0x40	; 64
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	08 2e       	mov	r0, r24
    1960:	89 2f       	mov	r24, r25
    1962:	00 0c       	add	r0, r0
    1964:	88 1f       	adc	r24, r24
    1966:	99 0b       	sbc	r25, r25
    1968:	00 0c       	add	r0, r0
    196a:	88 1f       	adc	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	98 2f       	mov	r25, r24
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	65 e0       	ldi	r22, 0x05	; 5
    1974:	49 2f       	mov	r20, r25
    1976:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    197a:	fe 01       	movw	r30, r28
    197c:	ed 59       	subi	r30, 0x9D	; 157
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	98 2f       	mov	r25, r24
    1984:	99 1f       	adc	r25, r25
    1986:	99 27       	eor	r25, r25
    1988:	99 1f       	adc	r25, r25
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	66 e0       	ldi	r22, 0x06	; 6
    198e:	49 2f       	mov	r20, r25
    1990:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1994:	fe 01       	movw	r30, r28
    1996:	ed 5b       	subi	r30, 0xBD	; 189
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	01 5c       	subi	r16, 0xC1	; 193
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 5b       	subi	r30, 0xBD	; 189
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	53 e4       	ldi	r21, 0x43	; 67
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	ff 96       	adiw	r30, 0x3f	; 63
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <LCD_displayChar+0x40e>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e af       	std	Y+62, r25	; 0x3e
    19fa:	8d af       	std	Y+61, r24	; 0x3d
    19fc:	46 c0       	rjmp	.+140    	; 0x1a8a <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    19fe:	fe 01       	movw	r30, r28
    1a00:	ff 96       	adiw	r30, 0x3f	; 63
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	64 f5       	brge	.+88     	; 0x1a72 <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 5b       	subi	r30, 0xBD	; 189
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e af       	std	Y+62, r25	; 0x3e
    1a46:	8d af       	std	Y+61, r24	; 0x3d
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <LCD_displayChar+0x478>
    1a4a:	89 e1       	ldi	r24, 0x19	; 25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c af       	std	Y+60, r25	; 0x3c
    1a50:	8b af       	std	Y+59, r24	; 0x3b
    1a52:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a54:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_displayChar+0x466>
    1a5a:	9c af       	std	Y+60, r25	; 0x3c
    1a5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9e af       	std	Y+62, r25	; 0x3e
    1a66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <LCD_displayChar+0x45a>
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	fe 01       	movw	r30, r28
    1a74:	ff 96       	adiw	r30, 0x3f	; 63
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e af       	std	Y+62, r25	; 0x3e
    1a88:	8d af       	std	Y+61, r24	; 0x3d
    1a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8e:	9a af       	std	Y+58, r25	; 0x3a
    1a90:	89 af       	std	Y+57, r24	; 0x39
    1a92:	89 ad       	ldd	r24, Y+57	; 0x39
    1a94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_displayChar+0x4a6>
    1a9a:	9a af       	std	Y+58, r25	; 0x3a
    1a9c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e8       	ldi	r26, 0x80	; 128
    1aae:	bf e3       	ldi	r27, 0x3F	; 63
    1ab0:	8d ab       	std	Y+53, r24	; 0x35
    1ab2:	9e ab       	std	Y+54, r25	; 0x36
    1ab4:	af ab       	std	Y+55, r26	; 0x37
    1ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	53 e4       	ldi	r21, 0x43	; 67
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <LCD_displayChar+0x50a>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6d a9       	ldd	r22, Y+53	; 0x35
    1b14:	7e a9       	ldd	r23, Y+54	; 0x36
    1b16:	8f a9       	ldd	r24, Y+55	; 0x37
    1b18:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <LCD_displayChar+0x56a>
    1b3c:	89 e1       	ldi	r24, 0x19	; 25
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
    1b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_displayChar+0x558>
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <LCD_displayChar+0x54c>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	69 a9       	ldd	r22, Y+49	; 0x31
    1b66:	7a a9       	ldd	r23, Y+50	; 0x32
    1b68:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_displayChar+0x594>
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	62 e0       	ldi	r22, 0x02	; 2
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e8       	ldi	r26, 0x80	; 128
    1b9c:	bf e3       	ldi	r27, 0x3F	; 63
    1b9e:	8f a3       	std	Y+39, r24	; 0x27
    1ba0:	98 a7       	std	Y+40, r25	; 0x28
    1ba2:	a9 a7       	std	Y+41, r26	; 0x29
    1ba4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    1baa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a e7       	ldi	r20, 0x7A	; 122
    1bb4:	53 e4       	ldi	r21, 0x43	; 67
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8b a3       	std	Y+35, r24	; 0x23
    1bc0:	9c a3       	std	Y+36, r25	; 0x24
    1bc2:	ad a3       	std	Y+37, r26	; 0x25
    1bc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bca:	8d a1       	ldd	r24, Y+37	; 0x25
    1bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_displayChar+0x5f8>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9a a3       	std	Y+34, r25	; 0x22
    1be4:	89 a3       	std	Y+33, r24	; 0x21
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6f a1       	ldd	r22, Y+39	; 0x27
    1c02:	78 a5       	ldd	r23, Y+40	; 0x28
    1c04:	89 a5       	ldd	r24, Y+41	; 0x29
    1c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9a a3       	std	Y+34, r25	; 0x22
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_displayChar+0x658>
    1c2a:	89 e1       	ldi	r24, 0x19	; 25
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	98 a3       	std	Y+32, r25	; 0x20
    1c30:	8f 8f       	std	Y+31, r24	; 0x1f
    1c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c34:	98 a1       	ldd	r25, Y+32	; 0x20
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_displayChar+0x646>
    1c3a:	98 a3       	std	Y+32, r25	; 0x20
    1c3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c40:	9a a1       	ldd	r25, Y+34	; 0x22
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_displayChar+0x63a>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6b a1       	ldd	r22, Y+35	; 0x23
    1c54:	7c a1       	ldd	r23, Y+36	; 0x24
    1c56:	8d a1       	ldd	r24, Y+37	; 0x25
    1c58:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_displayChar+0x682>
    1c76:	9e 8f       	std	Y+30, r25	; 0x1e
    1c78:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ed 59       	subi	r30, 0x9D	; 157
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	98 2f       	mov	r25, r24
    1c84:	91 70       	andi	r25, 0x01	; 1
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	49 2f       	mov	r20, r25
    1c8c:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 59       	subi	r30, 0x9D	; 157
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	82 70       	andi	r24, 0x02	; 2
    1c9e:	90 70       	andi	r25, 0x00	; 0
    1ca0:	95 95       	asr	r25
    1ca2:	87 95       	ror	r24
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	49 2f       	mov	r20, r25
    1cac:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ed 59       	subi	r30, 0x9D	; 157
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	84 70       	andi	r24, 0x04	; 4
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	95 95       	asr	r25
    1cc2:	87 95       	ror	r24
    1cc4:	95 95       	asr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	98 2f       	mov	r25, r24
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	65 e0       	ldi	r22, 0x05	; 5
    1cce:	49 2f       	mov	r20, r25
    1cd0:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ed 59       	subi	r30, 0x9D	; 157
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	88 70       	andi	r24, 0x08	; 8
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	95 95       	asr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	95 95       	asr	r25
    1cee:	87 95       	ror	r24
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	66 e0       	ldi	r22, 0x06	; 6
    1cf6:	49 2f       	mov	r20, r25
    1cf8:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e8       	ldi	r26, 0x80	; 128
    1d02:	bf e3       	ldi	r27, 0x3F	; 63
    1d04:	89 8f       	std	Y+25, r24	; 0x19
    1d06:	9a 8f       	std	Y+26, r25	; 0x1a
    1d08:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	53 e4       	ldi	r21, 0x43	; 67
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8d 8b       	std	Y+21, r24	; 0x15
    1d26:	9e 8b       	std	Y+22, r25	; 0x16
    1d28:	af 8b       	std	Y+23, r26	; 0x17
    1d2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d30:	8f 89       	ldd	r24, Y+23	; 0x17
    1d32:	98 8d       	ldd	r25, Y+24	; 0x18
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <LCD_displayChar+0x75e>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    1d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d50:	7e 89       	ldd	r23, Y+22	; 0x16
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	69 8d       	ldd	r22, Y+25	; 0x19
    1d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9c 8b       	std	Y+20, r25	; 0x14
    1d8c:	8b 8b       	std	Y+19, r24	; 0x13
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <LCD_displayChar+0x7be>
    1d90:	89 e1       	ldi	r24, 0x19	; 25
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9a 8b       	std	Y+18, r25	; 0x12
    1d96:	89 8b       	std	Y+17, r24	; 0x11
    1d98:	89 89       	ldd	r24, Y+17	; 0x11
    1d9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_displayChar+0x7ac>
    1da0:	9a 8b       	std	Y+18, r25	; 0x12
    1da2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	8b 89       	ldd	r24, Y+19	; 0x13
    1da6:	9c 89       	ldd	r25, Y+20	; 0x14
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9c 8b       	std	Y+20, r25	; 0x14
    1dac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	8b 89       	ldd	r24, Y+19	; 0x13
    1db0:	9c 89       	ldd	r25, Y+20	; 0x14
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <LCD_displayChar+0x7a0>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14
    1dca:	8b 8b       	std	Y+19, r24	; 0x13
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	98 8b       	std	Y+16, r25	; 0x10
    1dd2:	8f 87       	std	Y+15, r24	; 0x0f
    1dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd6:	98 89       	ldd	r25, Y+16	; 0x10
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_displayChar+0x7e8>
    1ddc:	98 8b       	std	Y+16, r25	; 0x10
    1dde:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 0f 11 	call	0x221e	; 0x221e <GPIO_writePin>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e8       	ldi	r26, 0x80	; 128
    1df0:	bf e3       	ldi	r27, 0x3F	; 63
    1df2:	8b 87       	std	Y+11, r24	; 0x0b
    1df4:	9c 87       	std	Y+12, r25	; 0x0c
    1df6:	ad 87       	std	Y+13, r26	; 0x0d
    1df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a e7       	ldi	r20, 0x7A	; 122
    1e08:	53 e4       	ldi	r21, 0x43	; 67
    1e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8f 83       	std	Y+7, r24	; 0x07
    1e14:	98 87       	std	Y+8, r25	; 0x08
    1e16:	a9 87       	std	Y+9, r26	; 0x09
    1e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_displayChar+0x84c>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_displayChar+0x8ac>
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayChar+0x89a>
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_displayChar+0x88e>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_displayChar+0x8d6>
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ece:	cd 59       	subi	r28, 0x9D	; 157
    1ed0:	df 4f       	sbci	r29, 0xFF	; 255
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <LCD_displayString+0x6>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9b 83       	std	Y+3, r25	; 0x03
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ef6:	19 82       	std	Y+1, r1	; 0x01
    1ef8:	0e c0       	rjmp	.+28     	; 0x1f16 <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	9b 81       	ldd	r25, Y+3	; 0x03
    1f04:	fc 01       	movw	r30, r24
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	80 81       	ld	r24, Z
    1f0c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LCD_displayChar>
		i++;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	fc 01       	movw	r30, r24
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	80 81       	ld	r24, Z
    1f28:	88 23       	and	r24, r24
    1f2a:	39 f7       	brne	.-50     	; 0x1efa <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_moveCursor+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <LCD_moveCursor+0x8>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3d 83       	std	Y+5, r19	; 0x05
    1f52:	2c 83       	std	Y+4, r18	; 0x04
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	9d 81       	ldd	r25, Y+5	; 0x05
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	c1 f0       	breq	.+48     	; 0x1f8e <LCD_moveCursor+0x56>
    1f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f60:	3d 81       	ldd	r19, Y+5	; 0x05
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_moveCursor+0x3a>
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	61 f0       	breq	.+24     	; 0x1f88 <LCD_moveCursor+0x50>
    1f70:	19 c0       	rjmp	.+50     	; 0x1fa4 <LCD_moveCursor+0x6c>
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	69 f0       	breq	.+26     	; 0x1f96 <LCD_moveCursor+0x5e>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	83 30       	cpi	r24, 0x03	; 3
    1f82:	91 05       	cpc	r25, r1
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <LCD_moveCursor+0x66>
    1f86:	0e c0       	rjmp	.+28     	; 0x1fa4 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	0b c0       	rjmp	.+22     	; 0x1fa4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	80 5c       	subi	r24, 0xC0	; 192
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	80 5f       	subi	r24, 0xF0	; 240
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	03 c0       	rjmp	.+6      	; 0x1fa4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	80 5b       	subi	r24, 0xB0	; 176
    1fa2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	80 68       	ori	r24, 0x80	; 128
    1fa8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <LCD_displayStringRowColumn+0x6>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <LCD_displayStringRowColumn+0x8>
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	6a 83       	std	Y+2, r22	; 0x02
    1fcc:	5c 83       	std	Y+4, r21	; 0x04
    1fce:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fd4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_moveCursor>
	LCD_displayString(str);
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayString>
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint16 data){
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	62 97       	sbiw	r28, 0x12	; 18
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	9a 8b       	std	Y+18, r25	; 0x12
    2004:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	9e 01       	movw	r18, r28
    200c:	2f 5f       	subi	r18, 0xFF	; 255
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	b9 01       	movw	r22, r18
    2012:	4a e0       	ldi	r20, 0x0A	; 10
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	0e 94 e6 13 	call	0x27cc	; 0x27cc <itoa>
	LCD_displayString(buff);
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_displayString>
}
    2022:	62 96       	adiw	r28, 0x12	; 18
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <LCD_sendCommand>
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <GPIO_setupPinDirection+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <GPIO_setupPinDirection+0x8>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02
    205a:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 30       	cpi	r24, 0x08	; 8
    2060:	08 f0       	brcs	.+2      	; 0x2064 <GPIO_setupPinDirection+0x1c>
    2062:	d5 c0       	rjmp	.+426    	; 0x220e <GPIO_setupPinDirection+0x1c6>
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f0       	brcs	.+2      	; 0x206c <GPIO_setupPinDirection+0x24>
    206a:	d1 c0       	rjmp	.+418    	; 0x220e <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	3d 83       	std	Y+5, r19	; 0x05
    2074:	2c 83       	std	Y+4, r18	; 0x04
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <GPIO_setupPinDirection+0x3a>
    2080:	43 c0       	rjmp	.+134    	; 0x2108 <GPIO_setupPinDirection+0xc0>
    2082:	2c 81       	ldd	r18, Y+4	; 0x04
    2084:	3d 81       	ldd	r19, Y+5	; 0x05
    2086:	22 30       	cpi	r18, 0x02	; 2
    2088:	31 05       	cpc	r19, r1
    208a:	2c f4       	brge	.+10     	; 0x2096 <GPIO_setupPinDirection+0x4e>
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	71 f0       	breq	.+28     	; 0x20b0 <GPIO_setupPinDirection+0x68>
    2094:	bc c0       	rjmp	.+376    	; 0x220e <GPIO_setupPinDirection+0x1c6>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <GPIO_setupPinDirection+0x5a>
    20a0:	5f c0       	rjmp	.+190    	; 0x2160 <GPIO_setupPinDirection+0x118>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <GPIO_setupPinDirection+0x66>
    20ac:	85 c0       	rjmp	.+266    	; 0x21b8 <GPIO_setupPinDirection+0x170>
    20ae:	af c0       	rjmp	.+350    	; 0x220e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	a1 f4       	brne	.+40     	; 0x20de <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    20b6:	aa e3       	ldi	r26, 0x3A	; 58
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ea e3       	ldi	r30, 0x3A	; 58
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	48 2f       	mov	r20, r24
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 2e       	mov	r0, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <GPIO_setupPinDirection+0x8c>
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	0a 94       	dec	r0
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <GPIO_setupPinDirection+0x88>
    20d8:	84 2b       	or	r24, r20
    20da:	8c 93       	st	X, r24
    20dc:	98 c0       	rjmp	.+304    	; 0x220e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    20de:	aa e3       	ldi	r26, 0x3A	; 58
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ea e3       	ldi	r30, 0x3A	; 58
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_setupPinDirection+0xb4>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_setupPinDirection+0xb0>
    2100:	80 95       	com	r24
    2102:	84 23       	and	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	83 c0       	rjmp	.+262    	; 0x220e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	a1 f4       	brne	.+40     	; 0x2136 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    210e:	a7 e3       	ldi	r26, 0x37	; 55
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e7 e3       	ldi	r30, 0x37	; 55
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <GPIO_setupPinDirection+0xe4>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <GPIO_setupPinDirection+0xe0>
    2130:	84 2b       	or	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	6c c0       	rjmp	.+216    	; 0x220e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    2136:	a7 e3       	ldi	r26, 0x37	; 55
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e7 e3       	ldi	r30, 0x37	; 55
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <GPIO_setupPinDirection+0x10c>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <GPIO_setupPinDirection+0x108>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	57 c0       	rjmp	.+174    	; 0x220e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	a1 f4       	brne	.+40     	; 0x218e <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    2166:	a4 e3       	ldi	r26, 0x34	; 52
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e4 e3       	ldi	r30, 0x34	; 52
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	48 2f       	mov	r20, r24
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 2e       	mov	r0, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <GPIO_setupPinDirection+0x13c>
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	0a 94       	dec	r0
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <GPIO_setupPinDirection+0x138>
    2188:	84 2b       	or	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	40 c0       	rjmp	.+128    	; 0x220e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    218e:	a4 e3       	ldi	r26, 0x34	; 52
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e4 e3       	ldi	r30, 0x34	; 52
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	48 2f       	mov	r20, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	02 2e       	mov	r0, r18
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <GPIO_setupPinDirection+0x164>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <GPIO_setupPinDirection+0x160>
    21b0:	80 95       	com	r24
    21b2:	84 23       	and	r24, r20
    21b4:	8c 93       	st	X, r24
    21b6:	2b c0       	rjmp	.+86     	; 0x220e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	a1 f4       	brne	.+40     	; 0x21e6 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    21be:	a1 e3       	ldi	r26, 0x31	; 49
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e1 e3       	ldi	r30, 0x31	; 49
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <GPIO_setupPinDirection+0x194>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <GPIO_setupPinDirection+0x190>
    21e0:	84 2b       	or	r24, r20
    21e2:	8c 93       	st	X, r24
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    21e6:	a1 e3       	ldi	r26, 0x31	; 49
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e1 e3       	ldi	r30, 0x31	; 49
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	48 2f       	mov	r20, r24
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	02 2e       	mov	r0, r18
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <GPIO_setupPinDirection+0x1bc>
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	0a 94       	dec	r0
    2206:	e2 f7       	brpl	.-8      	; 0x2200 <GPIO_setupPinDirection+0x1b8>
    2208:	80 95       	com	r24
    220a:	84 23       	and	r24, r20
    220c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <GPIO_writePin+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <GPIO_writePin+0x8>
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	6a 83       	std	Y+2, r22	; 0x02
    2230:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	88 30       	cpi	r24, 0x08	; 8
    2236:	08 f0       	brcs	.+2      	; 0x223a <GPIO_writePin+0x1c>
    2238:	d5 c0       	rjmp	.+426    	; 0x23e4 <GPIO_writePin+0x1c6>
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	84 30       	cpi	r24, 0x04	; 4
    223e:	08 f0       	brcs	.+2      	; 0x2242 <GPIO_writePin+0x24>
    2240:	d1 c0       	rjmp	.+418    	; 0x23e4 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	3d 83       	std	Y+5, r19	; 0x05
    224a:	2c 83       	std	Y+4, r18	; 0x04
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	9d 81       	ldd	r25, Y+5	; 0x05
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <GPIO_writePin+0x3a>
    2256:	43 c0       	rjmp	.+134    	; 0x22de <GPIO_writePin+0xc0>
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	3d 81       	ldd	r19, Y+5	; 0x05
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	2c f4       	brge	.+10     	; 0x226c <GPIO_writePin+0x4e>
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	71 f0       	breq	.+28     	; 0x2286 <GPIO_writePin+0x68>
    226a:	bc c0       	rjmp	.+376    	; 0x23e4 <GPIO_writePin+0x1c6>
    226c:	2c 81       	ldd	r18, Y+4	; 0x04
    226e:	3d 81       	ldd	r19, Y+5	; 0x05
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <GPIO_writePin+0x5a>
    2276:	5f c0       	rjmp	.+190    	; 0x2336 <GPIO_writePin+0x118>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	83 30       	cpi	r24, 0x03	; 3
    227e:	91 05       	cpc	r25, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <GPIO_writePin+0x66>
    2282:	85 c0       	rjmp	.+266    	; 0x238e <GPIO_writePin+0x170>
    2284:	af c0       	rjmp	.+350    	; 0x23e4 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	a1 f4       	brne	.+40     	; 0x22b4 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    228c:	ab e3       	ldi	r26, 0x3B	; 59
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	eb e3       	ldi	r30, 0x3B	; 59
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	48 2f       	mov	r20, r24
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	02 2e       	mov	r0, r18
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <GPIO_writePin+0x8c>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	0a 94       	dec	r0
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <GPIO_writePin+0x88>
    22ae:	84 2b       	or	r24, r20
    22b0:	8c 93       	st	X, r24
    22b2:	98 c0       	rjmp	.+304    	; 0x23e4 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    22b4:	ab e3       	ldi	r26, 0x3B	; 59
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	eb e3       	ldi	r30, 0x3B	; 59
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <GPIO_writePin+0xb4>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <GPIO_writePin+0xb0>
    22d6:	80 95       	com	r24
    22d8:	84 23       	and	r24, r20
    22da:	8c 93       	st	X, r24
    22dc:	83 c0       	rjmp	.+262    	; 0x23e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	a1 f4       	brne	.+40     	; 0x230c <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    22e4:	a8 e3       	ldi	r26, 0x38	; 56
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e8 e3       	ldi	r30, 0x38	; 56
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	48 2f       	mov	r20, r24
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 2e       	mov	r0, r18
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <GPIO_writePin+0xe4>
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	0a 94       	dec	r0
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <GPIO_writePin+0xe0>
    2306:	84 2b       	or	r24, r20
    2308:	8c 93       	st	X, r24
    230a:	6c c0       	rjmp	.+216    	; 0x23e4 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    230c:	a8 e3       	ldi	r26, 0x38	; 56
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e8 e3       	ldi	r30, 0x38	; 56
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	48 2f       	mov	r20, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <GPIO_writePin+0x10c>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <GPIO_writePin+0x108>
    232e:	80 95       	com	r24
    2330:	84 23       	and	r24, r20
    2332:	8c 93       	st	X, r24
    2334:	57 c0       	rjmp	.+174    	; 0x23e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	a1 f4       	brne	.+40     	; 0x2364 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    233c:	a5 e3       	ldi	r26, 0x35	; 53
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e5 e3       	ldi	r30, 0x35	; 53
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	48 2f       	mov	r20, r24
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	02 2e       	mov	r0, r18
    2354:	02 c0       	rjmp	.+4      	; 0x235a <GPIO_writePin+0x13c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	0a 94       	dec	r0
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <GPIO_writePin+0x138>
    235e:	84 2b       	or	r24, r20
    2360:	8c 93       	st	X, r24
    2362:	40 c0       	rjmp	.+128    	; 0x23e4 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    2364:	a5 e3       	ldi	r26, 0x35	; 53
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e5 e3       	ldi	r30, 0x35	; 53
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	48 2f       	mov	r20, r24
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	02 2e       	mov	r0, r18
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <GPIO_writePin+0x164>
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	0a 94       	dec	r0
    2384:	e2 f7       	brpl	.-8      	; 0x237e <GPIO_writePin+0x160>
    2386:	80 95       	com	r24
    2388:	84 23       	and	r24, r20
    238a:	8c 93       	st	X, r24
    238c:	2b c0       	rjmp	.+86     	; 0x23e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	a1 f4       	brne	.+40     	; 0x23bc <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    2394:	a2 e3       	ldi	r26, 0x32	; 50
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e2 e3       	ldi	r30, 0x32	; 50
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 2e       	mov	r0, r18
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <GPIO_writePin+0x194>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	0a 94       	dec	r0
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <GPIO_writePin+0x190>
    23b6:	84 2b       	or	r24, r20
    23b8:	8c 93       	st	X, r24
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    23bc:	a2 e3       	ldi	r26, 0x32	; 50
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e2 e3       	ldi	r30, 0x32	; 50
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	48 2f       	mov	r20, r24
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	02 2e       	mov	r0, r18
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <GPIO_writePin+0x1bc>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	0a 94       	dec	r0
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <GPIO_writePin+0x1b8>
    23de:	80 95       	com	r24
    23e0:	84 23       	and	r24, r20
    23e2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	29 97       	sbiw	r28, 0x09	; 9
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	88 30       	cpi	r24, 0x08	; 8
    2410:	08 f0       	brcs	.+2      	; 0x2414 <GPIO_readPin+0x20>
    2412:	8d c0       	rjmp	.+282    	; 0x252e <GPIO_readPin+0x13a>
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	84 30       	cpi	r24, 0x04	; 4
    2418:	08 f0       	brcs	.+2      	; 0x241c <GPIO_readPin+0x28>
    241a:	89 c0       	rjmp	.+274    	; 0x252e <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	39 87       	std	Y+9, r19	; 0x09
    2424:	28 87       	std	Y+8, r18	; 0x08
    2426:	48 85       	ldd	r20, Y+8	; 0x08
    2428:	59 85       	ldd	r21, Y+9	; 0x09
    242a:	41 30       	cpi	r20, 0x01	; 1
    242c:	51 05       	cpc	r21, r1
    242e:	89 f1       	breq	.+98     	; 0x2492 <GPIO_readPin+0x9e>
    2430:	88 85       	ldd	r24, Y+8	; 0x08
    2432:	99 85       	ldd	r25, Y+9	; 0x09
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	91 05       	cpc	r25, r1
    2438:	34 f4       	brge	.+12     	; 0x2446 <GPIO_readPin+0x52>
    243a:	28 85       	ldd	r18, Y+8	; 0x08
    243c:	39 85       	ldd	r19, Y+9	; 0x09
    243e:	21 15       	cp	r18, r1
    2440:	31 05       	cpc	r19, r1
    2442:	69 f0       	breq	.+26     	; 0x245e <GPIO_readPin+0x6a>
    2444:	74 c0       	rjmp	.+232    	; 0x252e <GPIO_readPin+0x13a>
    2446:	48 85       	ldd	r20, Y+8	; 0x08
    2448:	59 85       	ldd	r21, Y+9	; 0x09
    244a:	42 30       	cpi	r20, 0x02	; 2
    244c:	51 05       	cpc	r21, r1
    244e:	d9 f1       	breq	.+118    	; 0x24c6 <GPIO_readPin+0xd2>
    2450:	88 85       	ldd	r24, Y+8	; 0x08
    2452:	99 85       	ldd	r25, Y+9	; 0x09
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <GPIO_readPin+0x68>
    245a:	4f c0       	rjmp	.+158    	; 0x24fa <GPIO_readPin+0x106>
    245c:	68 c0       	rjmp	.+208    	; 0x252e <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    245e:	e9 e3       	ldi	r30, 0x39	; 57
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a9 01       	movw	r20, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <GPIO_readPin+0x82>
    2472:	55 95       	asr	r21
    2474:	47 95       	ror	r20
    2476:	8a 95       	dec	r24
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <GPIO_readPin+0x7e>
    247a:	ca 01       	movw	r24, r20
    247c:	81 70       	andi	r24, 0x01	; 1
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	88 23       	and	r24, r24
    2482:	19 f0       	breq	.+6      	; 0x248a <GPIO_readPin+0x96>
    2484:	51 e0       	ldi	r21, 0x01	; 1
    2486:	5e 83       	std	Y+6, r21	; 0x06
    2488:	01 c0       	rjmp	.+2      	; 0x248c <GPIO_readPin+0x98>
    248a:	1e 82       	std	Y+6, r1	; 0x06
    248c:	8e 81       	ldd	r24, Y+6	; 0x06
    248e:	8f 83       	std	Y+7, r24	; 0x07
    2490:	4f c0       	rjmp	.+158    	; 0x2530 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    2492:	e6 e3       	ldi	r30, 0x36	; 54
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a9 01       	movw	r20, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <GPIO_readPin+0xb6>
    24a6:	55 95       	asr	r21
    24a8:	47 95       	ror	r20
    24aa:	8a 95       	dec	r24
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <GPIO_readPin+0xb2>
    24ae:	ca 01       	movw	r24, r20
    24b0:	81 70       	andi	r24, 0x01	; 1
    24b2:	90 70       	andi	r25, 0x00	; 0
    24b4:	88 23       	and	r24, r24
    24b6:	19 f0       	breq	.+6      	; 0x24be <GPIO_readPin+0xca>
    24b8:	51 e0       	ldi	r21, 0x01	; 1
    24ba:	5d 83       	std	Y+5, r21	; 0x05
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <GPIO_readPin+0xcc>
    24be:	1d 82       	std	Y+5, r1	; 0x05
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	35 c0       	rjmp	.+106    	; 0x2530 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    24c6:	e3 e3       	ldi	r30, 0x33	; 51
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a9 01       	movw	r20, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <GPIO_readPin+0xea>
    24da:	55 95       	asr	r21
    24dc:	47 95       	ror	r20
    24de:	8a 95       	dec	r24
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <GPIO_readPin+0xe6>
    24e2:	ca 01       	movw	r24, r20
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	90 70       	andi	r25, 0x00	; 0
    24e8:	88 23       	and	r24, r24
    24ea:	19 f0       	breq	.+6      	; 0x24f2 <GPIO_readPin+0xfe>
    24ec:	51 e0       	ldi	r21, 0x01	; 1
    24ee:	5c 83       	std	Y+4, r21	; 0x04
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <GPIO_readPin+0x100>
    24f2:	1c 82       	std	Y+4, r1	; 0x04
    24f4:	8c 81       	ldd	r24, Y+4	; 0x04
    24f6:	8f 83       	std	Y+7, r24	; 0x07
    24f8:	1b c0       	rjmp	.+54     	; 0x2530 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    24fa:	e0 e3       	ldi	r30, 0x30	; 48
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a9 01       	movw	r20, r18
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <GPIO_readPin+0x11e>
    250e:	55 95       	asr	r21
    2510:	47 95       	ror	r20
    2512:	8a 95       	dec	r24
    2514:	e2 f7       	brpl	.-8      	; 0x250e <GPIO_readPin+0x11a>
    2516:	ca 01       	movw	r24, r20
    2518:	81 70       	andi	r24, 0x01	; 1
    251a:	90 70       	andi	r25, 0x00	; 0
    251c:	88 23       	and	r24, r24
    251e:	19 f0       	breq	.+6      	; 0x2526 <GPIO_readPin+0x132>
    2520:	51 e0       	ldi	r21, 0x01	; 1
    2522:	5b 83       	std	Y+3, r21	; 0x03
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <GPIO_readPin+0x134>
    2526:	1b 82       	std	Y+3, r1	; 0x03
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	8f 83       	std	Y+7, r24	; 0x07
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <GPIO_readPin+0x13c>
					break;
				}*/

	}

	return 0;
    252e:	1f 82       	std	Y+7, r1	; 0x07
    2530:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2532:	29 96       	adiw	r28, 0x09	; 9
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <GPIO_setupPortDirection+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <GPIO_setupPortDirection+0x8>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	90 f5       	brcc	.+100    	; 0x25be <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	3c 83       	std	Y+4, r19	; 0x04
    2562:	2b 83       	std	Y+3, r18	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	d1 f0       	breq	.+52     	; 0x25a2 <GPIO_setupPortDirection+0x5e>
    256e:	2b 81       	ldd	r18, Y+3	; 0x03
    2570:	3c 81       	ldd	r19, Y+4	; 0x04
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <GPIO_setupPortDirection+0x3e>
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 f0       	breq	.+24     	; 0x2598 <GPIO_setupPortDirection+0x54>
    2580:	1e c0       	rjmp	.+60     	; 0x25be <GPIO_setupPortDirection+0x7a>
    2582:	2b 81       	ldd	r18, Y+3	; 0x03
    2584:	3c 81       	ldd	r19, Y+4	; 0x04
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	81 f0       	breq	.+32     	; 0x25ac <GPIO_setupPortDirection+0x68>
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	81 f0       	breq	.+32     	; 0x25b6 <GPIO_setupPortDirection+0x72>
    2596:	13 c0       	rjmp	.+38     	; 0x25be <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    2598:	ea e3       	ldi	r30, 0x3A	; 58
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	80 83       	st	Z, r24
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25a2:	e7 e3       	ldi	r30, 0x37	; 55
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	80 83       	st	Z, r24
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25ac:	e4 e3       	ldi	r30, 0x34	; 52
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	80 83       	st	Z, r24
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25b6:	e1 e3       	ldi	r30, 0x31	; 49
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <GPIO_writePort+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <GPIO_writePort+0x8>
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	84 30       	cpi	r24, 0x04	; 4
    25e0:	90 f5       	brcc	.+100    	; 0x2646 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	3c 83       	std	Y+4, r19	; 0x04
    25ea:	2b 83       	std	Y+3, r18	; 0x03
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	d1 f0       	breq	.+52     	; 0x262a <GPIO_writePort+0x5e>
    25f6:	2b 81       	ldd	r18, Y+3	; 0x03
    25f8:	3c 81       	ldd	r19, Y+4	; 0x04
    25fa:	22 30       	cpi	r18, 0x02	; 2
    25fc:	31 05       	cpc	r19, r1
    25fe:	2c f4       	brge	.+10     	; 0x260a <GPIO_writePort+0x3e>
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	61 f0       	breq	.+24     	; 0x2620 <GPIO_writePort+0x54>
    2608:	1e c0       	rjmp	.+60     	; 0x2646 <GPIO_writePort+0x7a>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	81 f0       	breq	.+32     	; 0x2634 <GPIO_writePort+0x68>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	91 05       	cpc	r25, r1
    261c:	81 f0       	breq	.+32     	; 0x263e <GPIO_writePort+0x72>
    261e:	13 c0       	rjmp	.+38     	; 0x2646 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    2620:	eb e3       	ldi	r30, 0x3B	; 59
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	80 83       	st	Z, r24
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    262a:	e8 e3       	ldi	r30, 0x38	; 56
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	80 83       	st	Z, r24
    2632:	09 c0       	rjmp	.+18     	; 0x2646 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2634:	e5 e3       	ldi	r30, 0x35	; 53
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	80 83       	st	Z, r24
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    263e:	e2 e3       	ldi	r30, 0x32	; 50
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	80 83       	st	Z, r24
			break;
		}
	}
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <GPIO_readPort+0x6>
    265a:	00 d0       	rcall	.+0      	; 0x265c <GPIO_readPort+0x8>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	84 30       	cpi	r24, 0x04	; 4
    2666:	98 f5       	brcc	.+102    	; 0x26ce <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3c 83       	std	Y+4, r19	; 0x04
    2670:	2b 83       	std	Y+3, r18	; 0x03
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	91 05       	cpc	r25, r1
    267a:	d1 f0       	breq	.+52     	; 0x26b0 <GPIO_readPort+0x5c>
    267c:	2b 81       	ldd	r18, Y+3	; 0x03
    267e:	3c 81       	ldd	r19, Y+4	; 0x04
    2680:	22 30       	cpi	r18, 0x02	; 2
    2682:	31 05       	cpc	r19, r1
    2684:	2c f4       	brge	.+10     	; 0x2690 <GPIO_readPort+0x3c>
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	61 f0       	breq	.+24     	; 0x26a6 <GPIO_readPort+0x52>
    268e:	1f c0       	rjmp	.+62     	; 0x26ce <GPIO_readPort+0x7a>
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	3c 81       	ldd	r19, Y+4	; 0x04
    2694:	22 30       	cpi	r18, 0x02	; 2
    2696:	31 05       	cpc	r19, r1
    2698:	81 f0       	breq	.+32     	; 0x26ba <GPIO_readPort+0x66>
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <GPIO_readPort+0x70>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    26a6:	e9 e3       	ldi	r30, 0x39	; 57
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	90 81       	ld	r25, Z
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	10 c0       	rjmp	.+32     	; 0x26d0 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    26b0:	e6 e3       	ldi	r30, 0x36	; 54
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	20 81       	ld	r18, Z
    26b6:	2a 83       	std	Y+2, r18	; 0x02
    26b8:	0b c0       	rjmp	.+22     	; 0x26d0 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    26ba:	e3 e3       	ldi	r30, 0x33	; 51
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	30 81       	ld	r19, Z
    26c0:	3a 83       	std	Y+2, r19	; 0x02
    26c2:	06 c0       	rjmp	.+12     	; 0x26d0 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    26c4:	e0 e3       	ldi	r30, 0x30	; 48
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	01 c0       	rjmp	.+2      	; 0x26d0 <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    26ce:	1a 82       	std	Y+2, r1	; 0x02
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <ADC_init>:
#include <avr/io.h>
#include "adc.h"
#include "../macros/macros.h"

/* function responsible to init ADC */
void ADC_init(void){
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	/* CHOOSe 5v as reference voltage */
	ADMUX = (1<<REFS0) ;
    26e8:	e7 e2       	ldi	r30, 0x27	; 39
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 e4       	ldi	r24, 0x40	; 64
    26ee:	80 83       	st	Z, r24
	/* ADEN -> enable ADC
	 * ADPS0:2 choose ADC clock */
	ADCSRA = (1<<ADEN) |  (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    26f0:	e6 e2       	ldi	r30, 0x26	; 38
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	87 e8       	ldi	r24, 0x87	; 135
    26f6:	80 83       	st	Z, r24
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <ADC_readChannel>:
/* function responsible to read ADC channel */
uint16 ADC_readChannel(uint8 channel_num){
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	0f 92       	push	r0
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX&0xE0) | (channel_num & 0x07) ;
    270a:	a7 e2       	ldi	r26, 0x27	; 39
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e7 e2       	ldi	r30, 0x27	; 39
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	98 2f       	mov	r25, r24
    2716:	90 7e       	andi	r25, 0xE0	; 224
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	89 2b       	or	r24, r25
    271e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
    2720:	a6 e2       	ldi	r26, 0x26	; 38
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e6 e2       	ldi	r30, 0x26	; 38
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 64       	ori	r24, 0x40	; 64
    272c:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
    272e:	e6 e2       	ldi	r30, 0x26	; 38
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	80 71       	andi	r24, 0x10	; 16
    273a:	90 70       	andi	r25, 0x00	; 0
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	b9 f3       	breq	.-18     	; 0x272e <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF);
    2740:	a6 e2       	ldi	r26, 0x26	; 38
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e6 e2       	ldi	r30, 0x26	; 38
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	80 61       	ori	r24, 0x10	; 16
    274c:	8c 93       	st	X, r24
	return ADC;
    274e:	e4 e2       	ldi	r30, 0x24	; 36
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
}
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <__prologue_saves__>:
    275e:	2f 92       	push	r2
    2760:	3f 92       	push	r3
    2762:	4f 92       	push	r4
    2764:	5f 92       	push	r5
    2766:	6f 92       	push	r6
    2768:	7f 92       	push	r7
    276a:	8f 92       	push	r8
    276c:	9f 92       	push	r9
    276e:	af 92       	push	r10
    2770:	bf 92       	push	r11
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	ca 1b       	sub	r28, r26
    2788:	db 0b       	sbc	r29, r27
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	09 94       	ijmp

00002796 <__epilogue_restores__>:
    2796:	2a 88       	ldd	r2, Y+18	; 0x12
    2798:	39 88       	ldd	r3, Y+17	; 0x11
    279a:	48 88       	ldd	r4, Y+16	; 0x10
    279c:	5f 84       	ldd	r5, Y+15	; 0x0f
    279e:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a8:	b9 84       	ldd	r11, Y+9	; 0x09
    27aa:	c8 84       	ldd	r12, Y+8	; 0x08
    27ac:	df 80       	ldd	r13, Y+7	; 0x07
    27ae:	ee 80       	ldd	r14, Y+6	; 0x06
    27b0:	fd 80       	ldd	r15, Y+5	; 0x05
    27b2:	0c 81       	ldd	r16, Y+4	; 0x04
    27b4:	1b 81       	ldd	r17, Y+3	; 0x03
    27b6:	aa 81       	ldd	r26, Y+2	; 0x02
    27b8:	b9 81       	ldd	r27, Y+1	; 0x01
    27ba:	ce 0f       	add	r28, r30
    27bc:	d1 1d       	adc	r29, r1
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	ed 01       	movw	r28, r26
    27ca:	08 95       	ret

000027cc <itoa>:
    27cc:	fb 01       	movw	r30, r22
    27ce:	9f 01       	movw	r18, r30
    27d0:	e8 94       	clt
    27d2:	42 30       	cpi	r20, 0x02	; 2
    27d4:	c4 f0       	brlt	.+48     	; 0x2806 <itoa+0x3a>
    27d6:	45 32       	cpi	r20, 0x25	; 37
    27d8:	b4 f4       	brge	.+44     	; 0x2806 <itoa+0x3a>
    27da:	4a 30       	cpi	r20, 0x0A	; 10
    27dc:	29 f4       	brne	.+10     	; 0x27e8 <itoa+0x1c>
    27de:	97 fb       	bst	r25, 7
    27e0:	1e f4       	brtc	.+6      	; 0x27e8 <itoa+0x1c>
    27e2:	90 95       	com	r25
    27e4:	81 95       	neg	r24
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	64 2f       	mov	r22, r20
    27ea:	77 27       	eor	r23, r23
    27ec:	0e 94 17 14 	call	0x282e	; 0x282e <__udivmodhi4>
    27f0:	80 5d       	subi	r24, 0xD0	; 208
    27f2:	8a 33       	cpi	r24, 0x3A	; 58
    27f4:	0c f0       	brlt	.+2      	; 0x27f8 <itoa+0x2c>
    27f6:	89 5d       	subi	r24, 0xD9	; 217
    27f8:	81 93       	st	Z+, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 f7       	brne	.-24     	; 0x27e8 <itoa+0x1c>
    2800:	16 f4       	brtc	.+4      	; 0x2806 <itoa+0x3a>
    2802:	5d e2       	ldi	r21, 0x2D	; 45
    2804:	51 93       	st	Z+, r21
    2806:	10 82       	st	Z, r1
    2808:	c9 01       	movw	r24, r18
    280a:	0c 94 07 14 	jmp	0x280e	; 0x280e <strrev>

0000280e <strrev>:
    280e:	dc 01       	movw	r26, r24
    2810:	fc 01       	movw	r30, r24
    2812:	67 2f       	mov	r22, r23
    2814:	71 91       	ld	r23, Z+
    2816:	77 23       	and	r23, r23
    2818:	e1 f7       	brne	.-8      	; 0x2812 <strrev+0x4>
    281a:	32 97       	sbiw	r30, 0x02	; 2
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <strrev+0x18>
    281e:	7c 91       	ld	r23, X
    2820:	6d 93       	st	X+, r22
    2822:	70 83       	st	Z, r23
    2824:	62 91       	ld	r22, -Z
    2826:	ae 17       	cp	r26, r30
    2828:	bf 07       	cpc	r27, r31
    282a:	c8 f3       	brcs	.-14     	; 0x281e <strrev+0x10>
    282c:	08 95       	ret

0000282e <__udivmodhi4>:
    282e:	aa 1b       	sub	r26, r26
    2830:	bb 1b       	sub	r27, r27
    2832:	51 e1       	ldi	r21, 0x11	; 17
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <__udivmodhi4_ep>

00002836 <__udivmodhi4_loop>:
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	a6 17       	cp	r26, r22
    283c:	b7 07       	cpc	r27, r23
    283e:	10 f0       	brcs	.+4      	; 0x2844 <__udivmodhi4_ep>
    2840:	a6 1b       	sub	r26, r22
    2842:	b7 0b       	sbc	r27, r23

00002844 <__udivmodhi4_ep>:
    2844:	88 1f       	adc	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	5a 95       	dec	r21
    284a:	a9 f7       	brne	.-22     	; 0x2836 <__udivmodhi4_loop>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	08 95       	ret

00002856 <_exit>:
    2856:	f8 94       	cli

00002858 <__stop_program>:
    2858:	ff cf       	rjmp	.-2      	; 0x2858 <__stop_program>
