
LCD_EX2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001e5e  00001ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000162c  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bad  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000040dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000421d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000438d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000805d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000882b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e8       	ldi	r26, 0x89	; 137
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e8       	ldi	r24, 0x89	; 137
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

/* used libraries */
#include "../LCD_DRIVER/lcd.h"
#include <util/delay.h>

int main(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61

	/* Application initialization */
	LCD_init(); /* initialize LCD */
     b4a:	0e 94 3a 06 	call	0xc74	; 0xc74 <LCD_init>

	LCD_displayString("Hi, I am Newir");
     b4e:	80 e6       	ldi	r24, 0x60	; 96
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"I am R&D Eng");
     b56:	2f e6       	ldi	r18, 0x6F	; 111
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	a9 01       	movw	r20, r18
     b60:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	aa e7       	ldi	r26, 0x7A	; 122
     b6a:	b5 e4       	ldi	r27, 0x45	; 69
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	53 e4       	ldi	r21, 0x43	; 67
     b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <main+0x80>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <main+0xfe>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <main+0xe0>
     bf8:	89 e1       	ldi	r24, 0x19	; 25
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <main+0xce>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <main+0xc2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x10a>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01



	_delay_ms(4000);
	LCD_clearScreen();
     c48:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

	LCD_displayString("I am sad");
     c4c:	8c e7       	ldi	r24, 0x7C	; 124
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_moveCursor(1,4);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	64 e0       	ldi	r22, 0x04	; 4
     c58:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
	LCD_displayString("jan");
     c5c:	85 e8       	ldi	r24, 0x85	; 133
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	LCD_moveCursor(1,8);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	68 e0       	ldi	r22, 0x08	; 8
     c68:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
	LCD_integerToString(90);
     c6c:	8a e5       	ldi	r24, 0x5A	; 90
     c6e:	0e 94 38 0b 	call	0x1670	; 0x1670 <LCD_integerToString>
     c72:	ff cf       	rjmp	.-2      	; 0xc72 <main+0x13c>

00000c74 <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	2e 97       	sbiw	r28, 0x0e	; 14
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	64 e0       	ldi	r22, 0x04	; 4
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	65 e0       	ldi	r22, 0x05	; 5
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 65 0b 	call	0x16ca	; 0x16ca <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	6f ef       	ldi	r22, 0xFF	; 255
     ca0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPortDirection>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 ea       	ldi	r26, 0xA0	; 160
     caa:	b1 e4       	ldi	r27, 0x41	; 65
     cac:	8b 87       	std	Y+11, r24	; 0x0b
     cae:	9c 87       	std	Y+12, r25	; 0x0c
     cb0:	ad 87       	std	Y+13, r26	; 0x0d
     cb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cba:	9e 85       	ldd	r25, Y+14	; 0x0e
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	4a e7       	ldi	r20, 0x7A	; 122
     cc2:	53 e4       	ldi	r21, 0x43	; 67
     cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8f 83       	std	Y+7, r24	; 0x07
     cce:	98 87       	std	Y+8, r25	; 0x08
     cd0:	a9 87       	std	Y+9, r26	; 0x09
     cd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cd4:	6f 81       	ldd	r22, Y+7	; 0x07
     cd6:	78 85       	ldd	r23, Y+8	; 0x08
     cd8:	89 85       	ldd	r24, Y+9	; 0x09
     cda:	9a 85       	ldd	r25, Y+10	; 0x0a
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <LCD_init+0x82>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9e 83       	std	Y+6, r25	; 0x06
     cf2:	8d 83       	std	Y+5, r24	; 0x05
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <LCD_init+0x100>
	else if (__tmp > 65535)
     cf6:	6f 81       	ldd	r22, Y+7	; 0x07
     cf8:	78 85       	ldd	r23, Y+8	; 0x08
     cfa:	89 85       	ldd	r24, Y+9	; 0x09
     cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	3f ef       	ldi	r19, 0xFF	; 255
     d02:	4f e7       	ldi	r20, 0x7F	; 127
     d04:	57 e4       	ldi	r21, 0x47	; 71
     d06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d10:	7c 85       	ldd	r23, Y+12	; 0x0c
     d12:	8d 85       	ldd	r24, Y+13	; 0x0d
     d14:	9e 85       	ldd	r25, Y+14	; 0x0e
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	9e 83       	std	Y+6, r25	; 0x06
     d34:	8d 83       	std	Y+5, r24	; 0x05
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <LCD_init+0xe2>
     d38:	89 e1       	ldi	r24, 0x19	; 25
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9c 83       	std	Y+4, r25	; 0x04
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_init+0xd0>
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f7       	brne	.-38     	; 0xd38 <LCD_init+0xc4>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	6f 81       	ldd	r22, Y+7	; 0x07
     d62:	78 85       	ldd	r23, Y+8	; 0x08
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_init+0x10c>
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);
     d88:	88 e3       	ldi	r24, 0x38	; 56
     d8a:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
     d8e:	8c e0       	ldi	r24, 0x0C	; 12
     d90:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_sendCommand>

}
     d9a:	2e 96       	adiw	r28, 0x0e	; 14
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	e9 97       	sbiw	r28, 0x39	; 57
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	64 e0       	ldi	r22, 0x04	; 4
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e8       	ldi	r26, 0x80	; 128
     dd2:	bf e3       	ldi	r27, 0x3F	; 63
     dd4:	8d ab       	std	Y+53, r24	; 0x35
     dd6:	9e ab       	std	Y+54, r25	; 0x36
     dd8:	af ab       	std	Y+55, r26	; 0x37
     dda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	6d a9       	ldd	r22, Y+53	; 0x35
     dde:	7e a9       	ldd	r23, Y+54	; 0x36
     de0:	8f a9       	ldd	r24, Y+55	; 0x37
     de2:	98 ad       	ldd	r25, Y+56	; 0x38
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a e7       	ldi	r20, 0x7A	; 122
     dea:	53 e4       	ldi	r21, 0x43	; 67
     dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	89 ab       	std	Y+49, r24	; 0x31
     df6:	9a ab       	std	Y+50, r25	; 0x32
     df8:	ab ab       	std	Y+51, r26	; 0x33
     dfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <LCD_sendCommand+0x72>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 ab       	std	Y+48, r25	; 0x30
     e1a:	8f a7       	std	Y+47, r24	; 0x2f
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     e1e:	69 a9       	ldd	r22, Y+49	; 0x31
     e20:	7a a9       	ldd	r23, Y+50	; 0x32
     e22:	8b a9       	ldd	r24, Y+51	; 0x33
     e24:	9c a9       	ldd	r25, Y+52	; 0x34
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	6d a9       	ldd	r22, Y+53	; 0x35
     e38:	7e a9       	ldd	r23, Y+54	; 0x36
     e3a:	8f a9       	ldd	r24, Y+55	; 0x37
     e3c:	98 ad       	ldd	r25, Y+56	; 0x38
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	98 ab       	std	Y+48, r25	; 0x30
     e5c:	8f a7       	std	Y+47, r24	; 0x2f
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <LCD_sendCommand+0xd2>
     e60:	89 e1       	ldi	r24, 0x19	; 25
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9e a7       	std	Y+46, r25	; 0x2e
     e66:	8d a7       	std	Y+45, r24	; 0x2d
     e68:	8d a5       	ldd	r24, Y+45	; 0x2d
     e6a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <LCD_sendCommand+0xc0>
     e70:	9e a7       	std	Y+46, r25	; 0x2e
     e72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	8f a5       	ldd	r24, Y+47	; 0x2f
     e76:	98 a9       	ldd	r25, Y+48	; 0x30
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	98 ab       	std	Y+48, r25	; 0x30
     e7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e80:	98 a9       	ldd	r25, Y+48	; 0x30
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <LCD_sendCommand+0xb4>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	69 a9       	ldd	r22, Y+49	; 0x31
     e8a:	7a a9       	ldd	r23, Y+50	; 0x32
     e8c:	8b a9       	ldd	r24, Y+51	; 0x33
     e8e:	9c a9       	ldd	r25, Y+52	; 0x34
     e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	98 ab       	std	Y+48, r25	; 0x30
     e9a:	8f a7       	std	Y+47, r24	; 0x2f
     e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9e:	98 a9       	ldd	r25, Y+48	; 0x30
     ea0:	9c a7       	std	Y+44, r25	; 0x2c
     ea2:	8b a7       	std	Y+43, r24	; 0x2b
     ea4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ea6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <LCD_sendCommand+0xfc>
     eac:	9c a7       	std	Y+44, r25	; 0x2c
     eae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	65 e0       	ldi	r22, 0x05	; 5
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a0 e8       	ldi	r26, 0x80	; 128
     ec0:	bf e3       	ldi	r27, 0x3F	; 63
     ec2:	8f a3       	std	Y+39, r24	; 0x27
     ec4:	98 a7       	std	Y+40, r25	; 0x28
     ec6:	a9 a7       	std	Y+41, r26	; 0x29
     ec8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eca:	6f a1       	ldd	r22, Y+39	; 0x27
     ecc:	78 a5       	ldd	r23, Y+40	; 0x28
     ece:	89 a5       	ldd	r24, Y+41	; 0x29
     ed0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	4a e7       	ldi	r20, 0x7A	; 122
     ed8:	53 e4       	ldi	r21, 0x43	; 67
     eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8b a3       	std	Y+35, r24	; 0x23
     ee4:	9c a3       	std	Y+36, r25	; 0x24
     ee6:	ad a3       	std	Y+37, r26	; 0x25
     ee8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eea:	6b a1       	ldd	r22, Y+35	; 0x23
     eec:	7c a1       	ldd	r23, Y+36	; 0x24
     eee:	8d a1       	ldd	r24, Y+37	; 0x25
     ef0:	9e a1       	ldd	r25, Y+38	; 0x26
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     efe:	88 23       	and	r24, r24
     f00:	2c f4       	brge	.+10     	; 0xf0c <LCD_sendCommand+0x160>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9a a3       	std	Y+34, r25	; 0x22
     f08:	89 a3       	std	Y+33, r24	; 0x21
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
     f0c:	6b a1       	ldd	r22, Y+35	; 0x23
     f0e:	7c a1       	ldd	r23, Y+36	; 0x24
     f10:	8d a1       	ldd	r24, Y+37	; 0x25
     f12:	9e a1       	ldd	r25, Y+38	; 0x26
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f20:	18 16       	cp	r1, r24
     f22:	4c f5       	brge	.+82     	; 0xf76 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	6f a1       	ldd	r22, Y+39	; 0x27
     f26:	78 a5       	ldd	r23, Y+40	; 0x28
     f28:	89 a5       	ldd	r24, Y+41	; 0x29
     f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9a a3       	std	Y+34, r25	; 0x22
     f4a:	89 a3       	std	Y+33, r24	; 0x21
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <LCD_sendCommand+0x1c0>
     f4e:	89 e1       	ldi	r24, 0x19	; 25
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	98 a3       	std	Y+32, r25	; 0x20
     f54:	8f 8f       	std	Y+31, r24	; 0x1f
     f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f58:	98 a1       	ldd	r25, Y+32	; 0x20
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <LCD_sendCommand+0x1ae>
     f5e:	98 a3       	std	Y+32, r25	; 0x20
     f60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	89 a1       	ldd	r24, Y+33	; 0x21
     f64:	9a a1       	ldd	r25, Y+34	; 0x22
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	69 f7       	brne	.-38     	; 0xf4e <LCD_sendCommand+0x1a2>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	6b a1       	ldd	r22, Y+35	; 0x23
     f78:	7c a1       	ldd	r23, Y+36	; 0x24
     f7a:	8d a1       	ldd	r24, Y+37	; 0x25
     f7c:	9e a1       	ldd	r25, Y+38	; 0x26
     f7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9a a3       	std	Y+34, r25	; 0x22
     f88:	89 a3       	std	Y+33, r24	; 0x21
     f8a:	89 a1       	ldd	r24, Y+33	; 0x21
     f8c:	9a a1       	ldd	r25, Y+34	; 0x22
     f8e:	9e 8f       	std	Y+30, r25	; 0x1e
     f90:	8d 8f       	std	Y+29, r24	; 0x1d
     f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f94:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <LCD_sendCommand+0x1ea>
     f9a:	9e 8f       	std	Y+30, r25	; 0x1e
     f9c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT,command);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	69 ad       	ldd	r22, Y+57	; 0x39
     fa2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_writePort>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	89 8f       	std	Y+25, r24	; 0x19
     fb0:	9a 8f       	std	Y+26, r25	; 0x1a
     fb2:	ab 8f       	std	Y+27, r26	; 0x1b
     fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	53 e4       	ldi	r21, 0x43	; 67
     fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8d 8b       	std	Y+21, r24	; 0x15
     fd0:	9e 8b       	std	Y+22, r25	; 0x16
     fd2:	af 8b       	std	Y+23, r26	; 0x17
     fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd6:	6d 89       	ldd	r22, Y+21	; 0x15
     fd8:	7e 89       	ldd	r23, Y+22	; 0x16
     fda:	8f 89       	ldd	r24, Y+23	; 0x17
     fdc:	98 8d       	ldd	r25, Y+24	; 0x18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <LCD_sendCommand+0x24c>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
     ff8:	6d 89       	ldd	r22, Y+21	; 0x15
     ffa:	7e 89       	ldd	r23, Y+22	; 0x16
     ffc:	8f 89       	ldd	r24, Y+23	; 0x17
     ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	69 8d       	ldd	r22, Y+25	; 0x19
    1012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <LCD_sendCommand+0x2ac>
    103a:	89 e1       	ldi	r24, 0x19	; 25
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	89 89       	ldd	r24, Y+17	; 0x11
    1044:	9a 89       	ldd	r25, Y+18	; 0x12
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCD_sendCommand+0x29a>
    104a:	9a 8b       	std	Y+18, r25	; 0x12
    104c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <LCD_sendCommand+0x28e>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6d 89       	ldd	r22, Y+21	; 0x15
    1064:	7e 89       	ldd	r23, Y+22	; 0x16
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9c 8b       	std	Y+20, r25	; 0x14
    1074:	8b 8b       	std	Y+19, r24	; 0x13
    1076:	8b 89       	ldd	r24, Y+19	; 0x13
    1078:	9c 89       	ldd	r25, Y+20	; 0x14
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	98 89       	ldd	r25, Y+16	; 0x10
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCD_sendCommand+0x2d6>
    1086:	98 8b       	std	Y+16, r25	; 0x10
    1088:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	65 e0       	ldi	r22, 0x05	; 5
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e8       	ldi	r26, 0x80	; 128
    109a:	bf e3       	ldi	r27, 0x3F	; 63
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    109e:	9c 87       	std	Y+12, r25	; 0x0c
    10a0:	ad 87       	std	Y+13, r26	; 0x0d
    10a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a e7       	ldi	r20, 0x7A	; 122
    10b2:	53 e4       	ldi	r21, 0x43	; 67
    10b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	a9 87       	std	Y+9, r26	; 0x09
    10c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	2c f4       	brge	.+10     	; 0x10e6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	3f c0       	rjmp	.+126    	; 0x1164 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	4c f5       	brge	.+82     	; 0x1150 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1100:	7c 85       	ldd	r23, Y+12	; 0x0c
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	51 e4       	ldi	r21, 0x41	; 65
    110e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	bc 01       	movw	r22, r24
    1118:	cd 01       	movw	r24, r26
    111a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <LCD_sendCommand+0x39a>
    1128:	89 e1       	ldi	r24, 0x19	; 25
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <LCD_sendCommand+0x388>
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	69 f7       	brne	.-38     	; 0x1128 <LCD_sendCommand+0x37c>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	78 85       	ldd	r23, Y+8	; 0x08
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <LCD_sendCommand+0x3c4>
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1178:	e9 96       	adiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	e9 97       	sbiw	r28, 0x39	; 57
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	64 e0       	ldi	r22, 0x04	; 4
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e8       	ldi	r26, 0x80	; 128
    11b0:	bf e3       	ldi	r27, 0x3F	; 63
    11b2:	8d ab       	std	Y+53, r24	; 0x35
    11b4:	9e ab       	std	Y+54, r25	; 0x36
    11b6:	af ab       	std	Y+55, r26	; 0x37
    11b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ba:	6d a9       	ldd	r22, Y+53	; 0x35
    11bc:	7e a9       	ldd	r23, Y+54	; 0x36
    11be:	8f a9       	ldd	r24, Y+55	; 0x37
    11c0:	98 ad       	ldd	r25, Y+56	; 0x38
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a e7       	ldi	r20, 0x7A	; 122
    11c8:	53 e4       	ldi	r21, 0x43	; 67
    11ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	89 ab       	std	Y+49, r24	; 0x31
    11d4:	9a ab       	std	Y+50, r25	; 0x32
    11d6:	ab ab       	std	Y+51, r26	; 0x33
    11d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11da:	69 a9       	ldd	r22, Y+49	; 0x31
    11dc:	7a a9       	ldd	r23, Y+50	; 0x32
    11de:	8b a9       	ldd	r24, Y+51	; 0x33
    11e0:	9c a9       	ldd	r25, Y+52	; 0x34
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <LCD_displayChar+0x72>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	98 ab       	std	Y+48, r25	; 0x30
    11f8:	8f a7       	std	Y+47, r24	; 0x2f
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    11fc:	69 a9       	ldd	r22, Y+49	; 0x31
    11fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1200:	8b a9       	ldd	r24, Y+51	; 0x33
    1202:	9c a9       	ldd	r25, Y+52	; 0x34
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	4f e7       	ldi	r20, 0x7F	; 127
    120a:	57 e4       	ldi	r21, 0x47	; 71
    120c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1210:	18 16       	cp	r1, r24
    1212:	4c f5       	brge	.+82     	; 0x1266 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	6d a9       	ldd	r22, Y+53	; 0x35
    1216:	7e a9       	ldd	r23, Y+54	; 0x36
    1218:	8f a9       	ldd	r24, Y+55	; 0x37
    121a:	98 ad       	ldd	r25, Y+56	; 0x38
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	98 ab       	std	Y+48, r25	; 0x30
    123a:	8f a7       	std	Y+47, r24	; 0x2f
    123c:	0f c0       	rjmp	.+30     	; 0x125c <LCD_displayChar+0xd2>
    123e:	89 e1       	ldi	r24, 0x19	; 25
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9e a7       	std	Y+46, r25	; 0x2e
    1244:	8d a7       	std	Y+45, r24	; 0x2d
    1246:	8d a5       	ldd	r24, Y+45	; 0x2d
    1248:	9e a5       	ldd	r25, Y+46	; 0x2e
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_displayChar+0xc0>
    124e:	9e a7       	std	Y+46, r25	; 0x2e
    1250:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1252:	8f a5       	ldd	r24, Y+47	; 0x2f
    1254:	98 a9       	ldd	r25, Y+48	; 0x30
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	98 ab       	std	Y+48, r25	; 0x30
    125a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	8f a5       	ldd	r24, Y+47	; 0x2f
    125e:	98 a9       	ldd	r25, Y+48	; 0x30
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f7       	brne	.-38     	; 0x123e <LCD_displayChar+0xb4>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1266:	69 a9       	ldd	r22, Y+49	; 0x31
    1268:	7a a9       	ldd	r23, Y+50	; 0x32
    126a:	8b a9       	ldd	r24, Y+51	; 0x33
    126c:	9c a9       	ldd	r25, Y+52	; 0x34
    126e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	98 ab       	std	Y+48, r25	; 0x30
    1278:	8f a7       	std	Y+47, r24	; 0x2f
    127a:	8f a5       	ldd	r24, Y+47	; 0x2f
    127c:	98 a9       	ldd	r25, Y+48	; 0x30
    127e:	9c a7       	std	Y+44, r25	; 0x2c
    1280:	8b a7       	std	Y+43, r24	; 0x2b
    1282:	8b a5       	ldd	r24, Y+43	; 0x2b
    1284:	9c a5       	ldd	r25, Y+44	; 0x2c
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <LCD_displayChar+0xfc>
    128a:	9c a7       	std	Y+44, r25	; 0x2c
    128c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	65 e0       	ldi	r22, 0x05	; 5
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 e8       	ldi	r26, 0x80	; 128
    129e:	bf e3       	ldi	r27, 0x3F	; 63
    12a0:	8f a3       	std	Y+39, r24	; 0x27
    12a2:	98 a7       	std	Y+40, r25	; 0x28
    12a4:	a9 a7       	std	Y+41, r26	; 0x29
    12a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6f a1       	ldd	r22, Y+39	; 0x27
    12aa:	78 a5       	ldd	r23, Y+40	; 0x28
    12ac:	89 a5       	ldd	r24, Y+41	; 0x29
    12ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a e7       	ldi	r20, 0x7A	; 122
    12b6:	53 e4       	ldi	r21, 0x43	; 67
    12b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8b a3       	std	Y+35, r24	; 0x23
    12c2:	9c a3       	std	Y+36, r25	; 0x24
    12c4:	ad a3       	std	Y+37, r26	; 0x25
    12c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ca:	7c a1       	ldd	r23, Y+36	; 0x24
    12cc:	8d a1       	ldd	r24, Y+37	; 0x25
    12ce:	9e a1       	ldd	r25, Y+38	; 0x26
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <LCD_displayChar+0x160>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9a a3       	std	Y+34, r25	; 0x22
    12e6:	89 a3       	std	Y+33, r24	; 0x21
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    12ea:	6b a1       	ldd	r22, Y+35	; 0x23
    12ec:	7c a1       	ldd	r23, Y+36	; 0x24
    12ee:	8d a1       	ldd	r24, Y+37	; 0x25
    12f0:	9e a1       	ldd	r25, Y+38	; 0x26
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6f a1       	ldd	r22, Y+39	; 0x27
    1304:	78 a5       	ldd	r23, Y+40	; 0x28
    1306:	89 a5       	ldd	r24, Y+41	; 0x29
    1308:	9a a5       	ldd	r25, Y+42	; 0x2a
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9a a3       	std	Y+34, r25	; 0x22
    1328:	89 a3       	std	Y+33, r24	; 0x21
    132a:	0f c0       	rjmp	.+30     	; 0x134a <LCD_displayChar+0x1c0>
    132c:	89 e1       	ldi	r24, 0x19	; 25
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	98 a3       	std	Y+32, r25	; 0x20
    1332:	8f 8f       	std	Y+31, r24	; 0x1f
    1334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1336:	98 a1       	ldd	r25, Y+32	; 0x20
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_displayChar+0x1ae>
    133c:	98 a3       	std	Y+32, r25	; 0x20
    133e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	89 a1       	ldd	r24, Y+33	; 0x21
    1342:	9a a1       	ldd	r25, Y+34	; 0x22
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9a a3       	std	Y+34, r25	; 0x22
    1348:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	89 a1       	ldd	r24, Y+33	; 0x21
    134c:	9a a1       	ldd	r25, Y+34	; 0x22
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <LCD_displayChar+0x1a2>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6b a1       	ldd	r22, Y+35	; 0x23
    1356:	7c a1       	ldd	r23, Y+36	; 0x24
    1358:	8d a1       	ldd	r24, Y+37	; 0x25
    135a:	9e a1       	ldd	r25, Y+38	; 0x26
    135c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9a a3       	std	Y+34, r25	; 0x22
    1366:	89 a3       	std	Y+33, r24	; 0x21
    1368:	89 a1       	ldd	r24, Y+33	; 0x21
    136a:	9a a1       	ldd	r25, Y+34	; 0x22
    136c:	9e 8f       	std	Y+30, r25	; 0x1e
    136e:	8d 8f       	std	Y+29, r24	; 0x1d
    1370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCD_displayChar+0x1ea>
    1378:	9e 8f       	std	Y+30, r25	; 0x1e
    137a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT,character);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	69 ad       	ldd	r22, Y+57	; 0x39
    1380:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_writePort>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e8       	ldi	r26, 0x80	; 128
    138a:	bf e3       	ldi	r27, 0x3F	; 63
    138c:	89 8f       	std	Y+25, r24	; 0x19
    138e:	9a 8f       	std	Y+26, r25	; 0x1a
    1390:	ab 8f       	std	Y+27, r26	; 0x1b
    1392:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1394:	69 8d       	ldd	r22, Y+25	; 0x19
    1396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    139a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	4a e7       	ldi	r20, 0x7A	; 122
    13a2:	53 e4       	ldi	r21, 0x43	; 67
    13a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	8d 8b       	std	Y+21, r24	; 0x15
    13ae:	9e 8b       	std	Y+22, r25	; 0x16
    13b0:	af 8b       	std	Y+23, r26	; 0x17
    13b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <LCD_displayChar+0x24c>
		__ticks = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9c 8b       	std	Y+20, r25	; 0x14
    13d2:	8b 8b       	std	Y+19, r24	; 0x13
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <LCD_displayChar+0x2ca>
	else if (__tmp > 65535)
    13d6:	6d 89       	ldd	r22, Y+21	; 0x15
    13d8:	7e 89       	ldd	r23, Y+22	; 0x16
    13da:	8f 89       	ldd	r24, Y+23	; 0x17
    13dc:	98 8d       	ldd	r25, Y+24	; 0x18
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	4c f5       	brge	.+82     	; 0x1440 <LCD_displayChar+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ee:	69 8d       	ldd	r22, Y+25	; 0x19
    13f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e2       	ldi	r20, 0x20	; 32
    13fc:	51 e4       	ldi	r21, 0x41	; 65
    13fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9c 8b       	std	Y+20, r25	; 0x14
    1414:	8b 8b       	std	Y+19, r24	; 0x13
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <LCD_displayChar+0x2ac>
    1418:	89 e1       	ldi	r24, 0x19	; 25
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9a 8b       	std	Y+18, r25	; 0x12
    141e:	89 8b       	std	Y+17, r24	; 0x11
    1420:	89 89       	ldd	r24, Y+17	; 0x11
    1422:	9a 89       	ldd	r25, Y+18	; 0x12
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCD_displayChar+0x29a>
    1428:	9a 8b       	std	Y+18, r25	; 0x12
    142a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	9c 8b       	std	Y+20, r25	; 0x14
    1434:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1436:	8b 89       	ldd	r24, Y+19	; 0x13
    1438:	9c 89       	ldd	r25, Y+20	; 0x14
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	69 f7       	brne	.-38     	; 0x1418 <LCD_displayChar+0x28e>
    143e:	14 c0       	rjmp	.+40     	; 0x1468 <LCD_displayChar+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1440:	6d 89       	ldd	r22, Y+21	; 0x15
    1442:	7e 89       	ldd	r23, Y+22	; 0x16
    1444:	8f 89       	ldd	r24, Y+23	; 0x17
    1446:	98 8d       	ldd	r25, Y+24	; 0x18
    1448:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	8b 89       	ldd	r24, Y+19	; 0x13
    1456:	9c 89       	ldd	r25, Y+20	; 0x14
    1458:	98 8b       	std	Y+16, r25	; 0x10
    145a:	8f 87       	std	Y+15, r24	; 0x0f
    145c:	8f 85       	ldd	r24, Y+15	; 0x0f
    145e:	98 89       	ldd	r25, Y+16	; 0x10
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <LCD_displayChar+0x2d6>
    1464:	98 8b       	std	Y+16, r25	; 0x10
    1466:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePin>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a e7       	ldi	r20, 0x7A	; 122
    1490:	53 e4       	ldi	r21, 0x43	; 67
    1492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayChar+0x33a>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayChar+0x3b8>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayChar+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayChar+0x39a>
    1506:	89 e1       	ldi	r24, 0x19	; 25
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayChar+0x388>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayChar+0x37c>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayChar+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayChar+0x3c4>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 c5 08 	call	0x118a	; 0x118a <LCD_displayChar>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_moveCursor+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_moveCursor+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_moveCursor+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_moveCursor+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_moveCursor+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_moveCursor+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_moveCursor+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_moveCursor+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_moveCursor+0x6c>
			break;
	case 2:
		LCD_memoryAddress = col +0x10;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 5f       	subi	r24, 0xF0	; 240
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_moveCursor+0x6c>
			break;
	case 3:
		LCD_memoryAddress = col +0x50;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 5b       	subi	r24, 0xB0	; 176
    1624:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_moveCursor>
	LCD_displayString(str);
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint8 data){
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	61 97       	sbiw	r28, 0x11	; 17
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <itoa>
	LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	61 96       	adiw	r28, 0x11	; 17
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 d6 06 	call	0xdac	; 0xdac <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <GPIO_setupPinDirection+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_setupPinDirection+0x8>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	6a 83       	std	Y+2, r22	; 0x02
    16dc:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	88 30       	cpi	r24, 0x08	; 8
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <GPIO_setupPinDirection+0x1c>
    16e4:	d5 c0       	rjmp	.+426    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <GPIO_setupPinDirection+0x24>
    16ec:	d1 c0       	rjmp	.+418    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3d 83       	std	Y+5, r19	; 0x05
    16f6:	2c 83       	std	Y+4, r18	; 0x04
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <GPIO_setupPinDirection+0x3a>
    1702:	43 c0       	rjmp	.+134    	; 0x178a <GPIO_setupPinDirection+0xc0>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <GPIO_setupPinDirection+0x4e>
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	71 f0       	breq	.+28     	; 0x1732 <GPIO_setupPinDirection+0x68>
    1716:	bc c0       	rjmp	.+376    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
    1718:	2c 81       	ldd	r18, Y+4	; 0x04
    171a:	3d 81       	ldd	r19, Y+5	; 0x05
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <GPIO_setupPinDirection+0x5a>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <GPIO_setupPinDirection+0x118>
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <GPIO_setupPinDirection+0x66>
    172e:	85 c0       	rjmp	.+266    	; 0x183a <GPIO_setupPinDirection+0x170>
    1730:	af c0       	rjmp	.+350    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	a1 f4       	brne	.+40     	; 0x1760 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1738:	aa e3       	ldi	r26, 0x3A	; 58
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ea e3       	ldi	r30, 0x3A	; 58
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_setupPinDirection+0x8c>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_setupPinDirection+0x88>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	98 c0       	rjmp	.+304    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    1760:	aa e3       	ldi	r26, 0x3A	; 58
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ea e3       	ldi	r30, 0x3A	; 58
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <GPIO_setupPinDirection+0xb4>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <GPIO_setupPinDirection+0xb0>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	83 c0       	rjmp	.+262    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	a1 f4       	brne	.+40     	; 0x17b8 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    1790:	a7 e3       	ldi	r26, 0x37	; 55
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e7 e3       	ldi	r30, 0x37	; 55
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GPIO_setupPinDirection+0xe4>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <GPIO_setupPinDirection+0xe0>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	6c c0       	rjmp	.+216    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    17b8:	a7 e3       	ldi	r26, 0x37	; 55
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e7 e3       	ldi	r30, 0x37	; 55
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_setupPinDirection+0x10c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_setupPinDirection+0x108>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	57 c0       	rjmp	.+174    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	a1 f4       	brne	.+40     	; 0x1810 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    17e8:	a4 e3       	ldi	r26, 0x34	; 52
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e4 e3       	ldi	r30, 0x34	; 52
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_setupPinDirection+0x13c>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_setupPinDirection+0x138>
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	40 c0       	rjmp	.+128    	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    1810:	a4 e3       	ldi	r26, 0x34	; 52
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e4 e3       	ldi	r30, 0x34	; 52
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_setupPinDirection+0x164>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_setupPinDirection+0x160>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	2b c0       	rjmp	.+86     	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	a1 f4       	brne	.+40     	; 0x1868 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    1840:	a1 e3       	ldi	r26, 0x31	; 49
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e1 e3       	ldi	r30, 0x31	; 49
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_setupPinDirection+0x194>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_setupPinDirection+0x190>
    1862:	84 2b       	or	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1868:	a1 e3       	ldi	r26, 0x31	; 49
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e1 e3       	ldi	r30, 0x31	; 49
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <GPIO_setupPinDirection+0x1bc>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <GPIO_setupPinDirection+0x1b8>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_writePin+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <GPIO_writePin+0x8>
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	6a 83       	std	Y+2, r22	; 0x02
    18b2:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 30       	cpi	r24, 0x08	; 8
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <GPIO_writePin+0x1c>
    18ba:	d5 c0       	rjmp	.+426    	; 0x1a66 <GPIO_writePin+0x1c6>
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	84 30       	cpi	r24, 0x04	; 4
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <GPIO_writePin+0x24>
    18c2:	d1 c0       	rjmp	.+418    	; 0x1a66 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3d 83       	std	Y+5, r19	; 0x05
    18cc:	2c 83       	std	Y+4, r18	; 0x04
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <GPIO_writePin+0x3a>
    18d8:	43 c0       	rjmp	.+134    	; 0x1960 <GPIO_writePin+0xc0>
    18da:	2c 81       	ldd	r18, Y+4	; 0x04
    18dc:	3d 81       	ldd	r19, Y+5	; 0x05
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	2c f4       	brge	.+10     	; 0x18ee <GPIO_writePin+0x4e>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	71 f0       	breq	.+28     	; 0x1908 <GPIO_writePin+0x68>
    18ec:	bc c0       	rjmp	.+376    	; 0x1a66 <GPIO_writePin+0x1c6>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <GPIO_writePin+0x5a>
    18f8:	5f c0       	rjmp	.+190    	; 0x19b8 <GPIO_writePin+0x118>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <GPIO_writePin+0x66>
    1904:	85 c0       	rjmp	.+266    	; 0x1a10 <GPIO_writePin+0x170>
    1906:	af c0       	rjmp	.+350    	; 0x1a66 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	a1 f4       	brne	.+40     	; 0x1936 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    190e:	ab e3       	ldi	r26, 0x3B	; 59
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	eb e3       	ldi	r30, 0x3B	; 59
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_writePin+0x8c>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_writePin+0x88>
    1930:	84 2b       	or	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	98 c0       	rjmp	.+304    	; 0x1a66 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1936:	ab e3       	ldi	r26, 0x3B	; 59
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	eb e3       	ldi	r30, 0x3B	; 59
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <GPIO_writePin+0xb4>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <GPIO_writePin+0xb0>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	83 c0       	rjmp	.+262    	; 0x1a66 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	a1 f4       	brne	.+40     	; 0x198e <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_writePin+0xe4>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_writePin+0xe0>
    1988:	84 2b       	or	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	6c c0       	rjmp	.+216    	; 0x1a66 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    198e:	a8 e3       	ldi	r26, 0x38	; 56
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e8 e3       	ldi	r30, 0x38	; 56
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_writePin+0x10c>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_writePin+0x108>
    19b0:	80 95       	com	r24
    19b2:	84 23       	and	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	57 c0       	rjmp	.+174    	; 0x1a66 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	a1 f4       	brne	.+40     	; 0x19e6 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    19be:	a5 e3       	ldi	r26, 0x35	; 53
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <GPIO_writePin+0x13c>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <GPIO_writePin+0x138>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	40 c0       	rjmp	.+128    	; 0x1a66 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    19e6:	a5 e3       	ldi	r26, 0x35	; 53
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e3       	ldi	r30, 0x35	; 53
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <GPIO_writePin+0x164>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <GPIO_writePin+0x160>
    1a08:	80 95       	com	r24
    1a0a:	84 23       	and	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	2b c0       	rjmp	.+86     	; 0x1a66 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	a1 f4       	brne	.+40     	; 0x1a3e <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    1a16:	a2 e3       	ldi	r26, 0x32	; 50
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e2 e3       	ldi	r30, 0x32	; 50
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <GPIO_writePin+0x194>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <GPIO_writePin+0x190>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1a3e:	a2 e3       	ldi	r26, 0x32	; 50
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e2 e3       	ldi	r30, 0x32	; 50
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <GPIO_writePin+0x1bc>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <GPIO_writePin+0x1b8>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	29 97       	sbiw	r28, 0x09	; 9
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_readPin+0x20>
    1a94:	8d c0       	rjmp	.+282    	; 0x1bb0 <GPIO_readPin+0x13a>
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <GPIO_readPin+0x28>
    1a9c:	89 c0       	rjmp	.+274    	; 0x1bb0 <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	39 87       	std	Y+9, r19	; 0x09
    1aa6:	28 87       	std	Y+8, r18	; 0x08
    1aa8:	48 85       	ldd	r20, Y+8	; 0x08
    1aaa:	59 85       	ldd	r21, Y+9	; 0x09
    1aac:	41 30       	cpi	r20, 0x01	; 1
    1aae:	51 05       	cpc	r21, r1
    1ab0:	89 f1       	breq	.+98     	; 0x1b14 <GPIO_readPin+0x9e>
    1ab2:	88 85       	ldd	r24, Y+8	; 0x08
    1ab4:	99 85       	ldd	r25, Y+9	; 0x09
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	91 05       	cpc	r25, r1
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <GPIO_readPin+0x52>
    1abc:	28 85       	ldd	r18, Y+8	; 0x08
    1abe:	39 85       	ldd	r19, Y+9	; 0x09
    1ac0:	21 15       	cp	r18, r1
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	69 f0       	breq	.+26     	; 0x1ae0 <GPIO_readPin+0x6a>
    1ac6:	74 c0       	rjmp	.+232    	; 0x1bb0 <GPIO_readPin+0x13a>
    1ac8:	48 85       	ldd	r20, Y+8	; 0x08
    1aca:	59 85       	ldd	r21, Y+9	; 0x09
    1acc:	42 30       	cpi	r20, 0x02	; 2
    1ace:	51 05       	cpc	r21, r1
    1ad0:	d9 f1       	breq	.+118    	; 0x1b48 <GPIO_readPin+0xd2>
    1ad2:	88 85       	ldd	r24, Y+8	; 0x08
    1ad4:	99 85       	ldd	r25, Y+9	; 0x09
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	91 05       	cpc	r25, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <GPIO_readPin+0x68>
    1adc:	4f c0       	rjmp	.+158    	; 0x1b7c <GPIO_readPin+0x106>
    1ade:	68 c0       	rjmp	.+208    	; 0x1bb0 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    1ae0:	e9 e3       	ldi	r30, 0x39	; 57
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a9 01       	movw	r20, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_readPin+0x82>
    1af4:	55 95       	asr	r21
    1af6:	47 95       	ror	r20
    1af8:	8a 95       	dec	r24
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_readPin+0x7e>
    1afc:	ca 01       	movw	r24, r20
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	88 23       	and	r24, r24
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <GPIO_readPin+0x96>
    1b06:	51 e0       	ldi	r21, 0x01	; 1
    1b08:	5e 83       	std	Y+6, r21	; 0x06
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <GPIO_readPin+0x98>
    1b0c:	1e 82       	std	Y+6, r1	; 0x06
    1b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	4f c0       	rjmp	.+158    	; 0x1bb2 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    1b14:	e6 e3       	ldi	r30, 0x36	; 54
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a9 01       	movw	r20, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <GPIO_readPin+0xb6>
    1b28:	55 95       	asr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	8a 95       	dec	r24
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <GPIO_readPin+0xb2>
    1b30:	ca 01       	movw	r24, r20
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <GPIO_readPin+0xca>
    1b3a:	51 e0       	ldi	r21, 0x01	; 1
    1b3c:	5d 83       	std	Y+5, r21	; 0x05
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <GPIO_readPin+0xcc>
    1b40:	1d 82       	std	Y+5, r1	; 0x05
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	35 c0       	rjmp	.+106    	; 0x1bb2 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    1b48:	e3 e3       	ldi	r30, 0x33	; 51
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_readPin+0xea>
    1b5c:	55 95       	asr	r21
    1b5e:	47 95       	ror	r20
    1b60:	8a 95       	dec	r24
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_readPin+0xe6>
    1b64:	ca 01       	movw	r24, r20
    1b66:	81 70       	andi	r24, 0x01	; 1
    1b68:	90 70       	andi	r25, 0x00	; 0
    1b6a:	88 23       	and	r24, r24
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <GPIO_readPin+0xfe>
    1b6e:	51 e0       	ldi	r21, 0x01	; 1
    1b70:	5c 83       	std	Y+4, r21	; 0x04
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <GPIO_readPin+0x100>
    1b74:	1c 82       	std	Y+4, r1	; 0x04
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    1b7c:	e0 e3       	ldi	r30, 0x30	; 48
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a9 01       	movw	r20, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <GPIO_readPin+0x11e>
    1b90:	55 95       	asr	r21
    1b92:	47 95       	ror	r20
    1b94:	8a 95       	dec	r24
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <GPIO_readPin+0x11a>
    1b98:	ca 01       	movw	r24, r20
    1b9a:	81 70       	andi	r24, 0x01	; 1
    1b9c:	90 70       	andi	r25, 0x00	; 0
    1b9e:	88 23       	and	r24, r24
    1ba0:	19 f0       	breq	.+6      	; 0x1ba8 <GPIO_readPin+0x132>
    1ba2:	51 e0       	ldi	r21, 0x01	; 1
    1ba4:	5b 83       	std	Y+3, r21	; 0x03
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <GPIO_readPin+0x134>
    1ba8:	1b 82       	std	Y+3, r1	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <GPIO_readPin+0x13c>
					break;
				}*/

	}

	return 0;
    1bb0:	1f 82       	std	Y+7, r1	; 0x07
    1bb2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1bb4:	29 96       	adiw	r28, 0x09	; 9
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_setupPortDirection+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_setupPortDirection+0x8>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	90 f5       	brcc	.+100    	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3c 83       	std	Y+4, r19	; 0x04
    1be4:	2b 83       	std	Y+3, r18	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	d1 f0       	breq	.+52     	; 0x1c24 <GPIO_setupPortDirection+0x5e>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <GPIO_setupPortDirection+0x3e>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <GPIO_setupPortDirection+0x54>
    1c02:	1e c0       	rjmp	.+60     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <GPIO_setupPortDirection+0x68>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_setupPortDirection+0x72>
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1c1a:	ea e3       	ldi	r30, 0x3A	; 58
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c24:	e7 e3       	ldi	r30, 0x37	; 55
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c2e:	e4 e3       	ldi	r30, 0x34	; 52
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_writePort+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_writePort+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	90 f5       	brcc	.+100    	; 0x1cc8 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <GPIO_writePort+0x5e>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <GPIO_writePort+0x3e>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <GPIO_writePort+0x54>
    1c8a:	1e c0       	rjmp	.+60     	; 0x1cc8 <GPIO_writePort+0x7a>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <GPIO_writePort+0x68>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_writePort+0x72>
    1ca0:	13 c0       	rjmp	.+38     	; 0x1cc8 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1ca2:	eb e3       	ldi	r30, 0x3B	; 59
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cb6:	e5 e3       	ldi	r30, 0x35	; 53
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <GPIO_readPort+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <GPIO_readPort+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	84 30       	cpi	r24, 0x04	; 4
    1ce8:	98 f5       	brcc	.+102    	; 0x1d50 <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3c 83       	std	Y+4, r19	; 0x04
    1cf2:	2b 83       	std	Y+3, r18	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	d1 f0       	breq	.+52     	; 0x1d32 <GPIO_readPort+0x5c>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <GPIO_readPort+0x3c>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	61 f0       	breq	.+24     	; 0x1d28 <GPIO_readPort+0x52>
    1d10:	1f c0       	rjmp	.+62     	; 0x1d50 <GPIO_readPort+0x7a>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	81 f0       	breq	.+32     	; 0x1d3c <GPIO_readPort+0x66>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	91 05       	cpc	r25, r1
    1d24:	81 f0       	breq	.+32     	; 0x1d46 <GPIO_readPort+0x70>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    1d28:	e9 e3       	ldi	r30, 0x39	; 57
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	90 81       	ld	r25, Z
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	10 c0       	rjmp	.+32     	; 0x1d52 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    1d32:	e6 e3       	ldi	r30, 0x36	; 54
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	20 81       	ld	r18, Z
    1d38:	2a 83       	std	Y+2, r18	; 0x02
    1d3a:	0b c0       	rjmp	.+22     	; 0x1d52 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1d3c:	e3 e3       	ldi	r30, 0x33	; 51
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	30 81       	ld	r19, Z
    1d42:	3a 83       	std	Y+2, r19	; 0x02
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    1d46:	e0 e3       	ldi	r30, 0x30	; 48
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    1d50:	1a 82       	std	Y+2, r1	; 0x02
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <__prologue_saves__>:
    1d62:	2f 92       	push	r2
    1d64:	3f 92       	push	r3
    1d66:	4f 92       	push	r4
    1d68:	5f 92       	push	r5
    1d6a:	6f 92       	push	r6
    1d6c:	7f 92       	push	r7
    1d6e:	8f 92       	push	r8
    1d70:	9f 92       	push	r9
    1d72:	af 92       	push	r10
    1d74:	bf 92       	push	r11
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	ca 1b       	sub	r28, r26
    1d8c:	db 0b       	sbc	r29, r27
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	09 94       	ijmp

00001d9a <__epilogue_restores__>:
    1d9a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d9c:	39 88       	ldd	r3, Y+17	; 0x11
    1d9e:	48 88       	ldd	r4, Y+16	; 0x10
    1da0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1da2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1da4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1da6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1da8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1daa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dac:	b9 84       	ldd	r11, Y+9	; 0x09
    1dae:	c8 84       	ldd	r12, Y+8	; 0x08
    1db0:	df 80       	ldd	r13, Y+7	; 0x07
    1db2:	ee 80       	ldd	r14, Y+6	; 0x06
    1db4:	fd 80       	ldd	r15, Y+5	; 0x05
    1db6:	0c 81       	ldd	r16, Y+4	; 0x04
    1db8:	1b 81       	ldd	r17, Y+3	; 0x03
    1dba:	aa 81       	ldd	r26, Y+2	; 0x02
    1dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    1dbe:	ce 0f       	add	r28, r30
    1dc0:	d1 1d       	adc	r29, r1
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	ed 01       	movw	r28, r26
    1dce:	08 95       	ret

00001dd0 <itoa>:
    1dd0:	fb 01       	movw	r30, r22
    1dd2:	9f 01       	movw	r18, r30
    1dd4:	e8 94       	clt
    1dd6:	42 30       	cpi	r20, 0x02	; 2
    1dd8:	c4 f0       	brlt	.+48     	; 0x1e0a <itoa+0x3a>
    1dda:	45 32       	cpi	r20, 0x25	; 37
    1ddc:	b4 f4       	brge	.+44     	; 0x1e0a <itoa+0x3a>
    1dde:	4a 30       	cpi	r20, 0x0A	; 10
    1de0:	29 f4       	brne	.+10     	; 0x1dec <itoa+0x1c>
    1de2:	97 fb       	bst	r25, 7
    1de4:	1e f4       	brtc	.+6      	; 0x1dec <itoa+0x1c>
    1de6:	90 95       	com	r25
    1de8:	81 95       	neg	r24
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	64 2f       	mov	r22, r20
    1dee:	77 27       	eor	r23, r23
    1df0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__udivmodhi4>
    1df4:	80 5d       	subi	r24, 0xD0	; 208
    1df6:	8a 33       	cpi	r24, 0x3A	; 58
    1df8:	0c f0       	brlt	.+2      	; 0x1dfc <itoa+0x2c>
    1dfa:	89 5d       	subi	r24, 0xD9	; 217
    1dfc:	81 93       	st	Z+, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	a1 f7       	brne	.-24     	; 0x1dec <itoa+0x1c>
    1e04:	16 f4       	brtc	.+4      	; 0x1e0a <itoa+0x3a>
    1e06:	5d e2       	ldi	r21, 0x2D	; 45
    1e08:	51 93       	st	Z+, r21
    1e0a:	10 82       	st	Z, r1
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <strrev>

00001e12 <strrev>:
    1e12:	dc 01       	movw	r26, r24
    1e14:	fc 01       	movw	r30, r24
    1e16:	67 2f       	mov	r22, r23
    1e18:	71 91       	ld	r23, Z+
    1e1a:	77 23       	and	r23, r23
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <strrev+0x4>
    1e1e:	32 97       	sbiw	r30, 0x02	; 2
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <strrev+0x18>
    1e22:	7c 91       	ld	r23, X
    1e24:	6d 93       	st	X+, r22
    1e26:	70 83       	st	Z, r23
    1e28:	62 91       	ld	r22, -Z
    1e2a:	ae 17       	cp	r26, r30
    1e2c:	bf 07       	cpc	r27, r31
    1e2e:	c8 f3       	brcs	.-14     	; 0x1e22 <strrev+0x10>
    1e30:	08 95       	ret

00001e32 <__udivmodhi4>:
    1e32:	aa 1b       	sub	r26, r26
    1e34:	bb 1b       	sub	r27, r27
    1e36:	51 e1       	ldi	r21, 0x11	; 17
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <__udivmodhi4_ep>

00001e3a <__udivmodhi4_loop>:
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	a6 17       	cp	r26, r22
    1e40:	b7 07       	cpc	r27, r23
    1e42:	10 f0       	brcs	.+4      	; 0x1e48 <__udivmodhi4_ep>
    1e44:	a6 1b       	sub	r26, r22
    1e46:	b7 0b       	sbc	r27, r23

00001e48 <__udivmodhi4_ep>:
    1e48:	88 1f       	adc	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	5a 95       	dec	r21
    1e4e:	a9 f7       	brne	.-22     	; 0x1e3a <__udivmodhi4_loop>
    1e50:	80 95       	com	r24
    1e52:	90 95       	com	r25
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	08 95       	ret

00001e5a <_exit>:
    1e5a:	f8 94       	cli

00001e5c <__stop_program>:
    1e5c:	ff cf       	rjmp	.-2      	; 0x1e5c <__stop_program>
