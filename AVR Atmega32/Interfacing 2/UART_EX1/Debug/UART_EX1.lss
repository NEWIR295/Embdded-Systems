
UART_EX1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002b34  00002ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023e8  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000103e  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006116  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006286  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <main>
      7a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_init>:
#include <avr/io.h>
#include "uart.h"
#include "../GPIO_Driver/macros/macros.h"

/* function initialize uart peripheral with user Baud Rate */
void UART_init(uint32 baud_rate){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <UART_init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <UART_init+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <UART_init+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	6b 83       	std	Y+3, r22	; 0x03
     b46:	7c 83       	std	Y+4, r23	; 0x04
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	9e 83       	std	Y+6, r25	; 0x06

	/* store the value of UBRR register */
	uint16 ubrr_value = 0;
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	19 82       	std	Y+1, r1	; 0x01

	/* for double speed in asynchronous mode */
	UCSRA = (1<<U2X);
     b50:	eb e2       	ldi	r30, 0x2B	; 43
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	80 83       	st	Z, r24

	/* enable receiver and transmitter registers */
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b58:	ea e2       	ldi	r30, 0x2A	; 42
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	88 e1       	ldi	r24, 0x18	; 24
     b5e:	80 83       	st	Z, r24
	*/

	/*
	 * enable 8 bit mode only
	 */
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	86 e8       	ldi	r24, 0x86	; 134
     b66:	80 83       	st	Z, r24

	/* setup user desired baud rate */
	ubrr_value = (uint16)(((F_CPU/(baud_rate * 8UL)))-1);
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	ad 81       	ldd	r26, Y+5	; 0x05
     b6e:	be 81       	ldd	r27, Y+6	; 0x06
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	aa 1f       	adc	r26, r26
     b76:	bb 1f       	adc	r27, r27
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	aa 1f       	adc	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	9c 01       	movw	r18, r24
     b8a:	ad 01       	movw	r20, r26
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	94 e2       	ldi	r25, 0x24	; 36
     b90:	a4 ef       	ldi	r26, 0xF4	; 244
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__udivmodsi4>
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value>>8;
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	89 2f       	mov	r24, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bb4:	e9 e2       	ldi	r30, 0x29	; 41
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	26 96       	adiw	r28, 0x06	; 6
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <UART_sendByte>:

/* function responsible for sending 1 byte to to another device */
void UART_sendByte(const uint8 data){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE));
     bda:	eb e2       	ldi	r30, 0x2B	; 43
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	80 72       	andi	r24, 0x20	; 32
     be6:	90 70       	andi	r25, 0x00	; 0
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	b9 f3       	breq	.-18     	; 0xbda <UART_sendByte+0xc>
	UDR = data;
     bec:	ec e2       	ldi	r30, 0x2C	; 44
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	80 83       	st	Z, r24
}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <UART_receiveByte>:

/* function responsible for receiving 1 byte to to another device */
uint8 UART_receiveByte(void){
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62

	while(bit_is_clear(UCSRA,RXC));
     c06:	eb e2       	ldi	r30, 0x2B	; 43
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	88 23       	and	r24, r24
     c0e:	dc f7       	brge	.-10     	; 0xc06 <UART_receiveByte+0xa>
	if( bit_is_clear(UCSRA,FE) && bit_is_clear(UCSRA,PE) ){
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 71       	andi	r24, 0x10	; 16
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	71 f4       	brne	.+28     	; 0xc3e <UART_receiveByte+0x42>
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	84 70       	andi	r24, 0x04	; 4
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	29 f4       	brne	.+10     	; 0xc3e <UART_receiveByte+0x42>
		return UDR;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <UART_receiveByte+0x44>
	}
	return 0;
     c3e:	19 82       	std	Y+1, r1	; 0x01
     c40:	89 81       	ldd	r24, Y+1	; 0x01
}
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <UART_sendString>:

/* function responsible for sending String to to another device */
void UART_sendString(const uint8 *str){
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <UART_sendString+0x6>
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
     c5a:	19 82       	std	Y+1, r1	; 0x01
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <UART_sendString+0x30>
	while( *(str+i) != '\0'){
		UART_sendByte( *(str+i) );
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	fc 01       	movw	r30, r24
     c6a:	e2 0f       	add	r30, r18
     c6c:	f3 1f       	adc	r31, r19
     c6e:	80 81       	ld	r24, Z
     c70:	0e 94 e7 05 	call	0xbce	; 0xbce <UART_sendByte>
		i++;
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	89 83       	std	Y+1, r24	; 0x01

/* function responsible for sending String to to another device */
void UART_sendString(const uint8 *str){

	uint8 i = 0;
	while( *(str+i) != '\0'){
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	fc 01       	movw	r30, r24
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	39 f7       	brne	.-50     	; 0xc5e <UART_sendString+0x14>
		UART_sendByte( *(str+i) );
		i++;
	}
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_receiveString>:

/* function responsible for receiving String to to another device */
void UART_receiveString(uint8 *str){
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_receiveString+0xa>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i =0;
     cb0:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	8c 01       	movw	r16, r24
     cbe:	02 0f       	add	r16, r18
     cc0:	13 1f       	adc	r17, r19
     cc2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_receiveByte>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24
     cca:	0f c0       	rjmp	.+30     	; 0xcea <UART_receiveString+0x4e>
	while( *(str + i) != '#'){
		i++;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	89 83       	std	Y+1, r24	; 0x01
		*(str+i) = UART_receiveByte();
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	8c 01       	movw	r16, r24
     cde:	02 0f       	add	r16, r18
     ce0:	13 1f       	adc	r17, r19
     ce2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_receiveByte>
     ce6:	f8 01       	movw	r30, r16
     ce8:	80 83       	st	Z, r24
/* function responsible for receiving String to to another device */
void UART_receiveString(uint8 *str){

	uint8 i =0;
	str[i] = UART_receiveByte();
	while( *(str + i) != '#'){
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	fc 01       	movw	r30, r24
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19
     cfa:	80 81       	ld	r24, Z
     cfc:	83 32       	cpi	r24, 0x23	; 35
     cfe:	31 f7       	brne	.-52     	; 0xccc <UART_receiveString+0x30>
		i++;
		*(str+i) = UART_receiveByte();
	}
	*(str+i) ='\0';
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	fc 01       	movw	r30, r24
     d0c:	e2 0f       	add	r30, r18
     d0e:	f3 1f       	adc	r31, r19
     d10:	10 82       	st	Z, r1
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <GPIO_setupPinDirection+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <GPIO_setupPinDirection+0x8>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6a 83       	std	Y+2, r22	; 0x02
     d34:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <GPIO_setupPinDirection+0x1c>
     d3c:	d5 c0       	rjmp	.+426    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <GPIO_setupPinDirection+0x24>
     d44:	d1 c0       	rjmp	.+418    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3d 83       	std	Y+5, r19	; 0x05
     d4e:	2c 83       	std	Y+4, r18	; 0x04
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <GPIO_setupPinDirection+0x3a>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <GPIO_setupPinDirection+0xc0>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <GPIO_setupPinDirection+0x4e>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	71 f0       	breq	.+28     	; 0xd8a <GPIO_setupPinDirection+0x68>
     d6e:	bc c0       	rjmp	.+376    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
     d70:	2c 81       	ldd	r18, Y+4	; 0x04
     d72:	3d 81       	ldd	r19, Y+5	; 0x05
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <GPIO_setupPinDirection+0x5a>
     d7a:	5f c0       	rjmp	.+190    	; 0xe3a <GPIO_setupPinDirection+0x118>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <GPIO_setupPinDirection+0x66>
     d86:	85 c0       	rjmp	.+266    	; 0xe92 <GPIO_setupPinDirection+0x170>
     d88:	af c0       	rjmp	.+350    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	a1 f4       	brne	.+40     	; 0xdb8 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     d90:	aa e3       	ldi	r26, 0x3A	; 58
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ea e3       	ldi	r30, 0x3A	; 58
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <GPIO_setupPinDirection+0x8c>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <GPIO_setupPinDirection+0x88>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	98 c0       	rjmp	.+304    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     db8:	aa e3       	ldi	r26, 0x3A	; 58
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_setupPinDirection+0xb4>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_setupPinDirection+0xb0>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	83 c0       	rjmp	.+262    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	a1 f4       	brne	.+40     	; 0xe10 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <GPIO_setupPinDirection+0xe4>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <GPIO_setupPinDirection+0xe0>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	6c c0       	rjmp	.+216    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_setupPinDirection+0x10c>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_setupPinDirection+0x108>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	57 c0       	rjmp	.+174    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	a1 f4       	brne	.+40     	; 0xe68 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     e40:	a4 e3       	ldi	r26, 0x34	; 52
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <GPIO_setupPinDirection+0x13c>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <GPIO_setupPinDirection+0x138>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	40 c0       	rjmp	.+128    	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_setupPinDirection+0x164>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_setupPinDirection+0x160>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	2b c0       	rjmp	.+86     	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	a1 f4       	brne	.+40     	; 0xec0 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     e98:	a1 e3       	ldi	r26, 0x31	; 49
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e1 e3       	ldi	r30, 0x31	; 49
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <GPIO_setupPinDirection+0x194>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <GPIO_setupPinDirection+0x190>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_setupPinDirection+0x1bc>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_setupPinDirection+0x1b8>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <GPIO_writePin+0x6>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <GPIO_writePin+0x8>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
     f0a:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	08 f0       	brcs	.+2      	; 0xf14 <GPIO_writePin+0x1c>
     f12:	d5 c0       	rjmp	.+426    	; 0x10be <GPIO_writePin+0x1c6>
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	08 f0       	brcs	.+2      	; 0xf1c <GPIO_writePin+0x24>
     f1a:	d1 c0       	rjmp	.+418    	; 0x10be <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3d 83       	std	Y+5, r19	; 0x05
     f24:	2c 83       	std	Y+4, r18	; 0x04
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <GPIO_writePin+0x3a>
     f30:	43 c0       	rjmp	.+134    	; 0xfb8 <GPIO_writePin+0xc0>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	2c f4       	brge	.+10     	; 0xf46 <GPIO_writePin+0x4e>
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	9d 81       	ldd	r25, Y+5	; 0x05
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	71 f0       	breq	.+28     	; 0xf60 <GPIO_writePin+0x68>
     f44:	bc c0       	rjmp	.+376    	; 0x10be <GPIO_writePin+0x1c6>
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <GPIO_writePin+0x5a>
     f50:	5f c0       	rjmp	.+190    	; 0x1010 <GPIO_writePin+0x118>
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	91 05       	cpc	r25, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <GPIO_writePin+0x66>
     f5c:	85 c0       	rjmp	.+266    	; 0x1068 <GPIO_writePin+0x170>
     f5e:	af c0       	rjmp	.+350    	; 0x10be <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a1 f4       	brne	.+40     	; 0xf8e <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     f66:	ab e3       	ldi	r26, 0x3B	; 59
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	eb e3       	ldi	r30, 0x3B	; 59
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_writePin+0x8c>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_writePin+0x88>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	98 c0       	rjmp	.+304    	; 0x10be <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
     f8e:	ab e3       	ldi	r26, 0x3B	; 59
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e3       	ldi	r30, 0x3B	; 59
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_writePin+0xb4>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_writePin+0xb0>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	83 c0       	rjmp	.+262    	; 0x10be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
     fbe:	a8 e3       	ldi	r26, 0x38	; 56
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e8 e3       	ldi	r30, 0x38	; 56
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <GPIO_writePin+0xe4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <GPIO_writePin+0xe0>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	6c c0       	rjmp	.+216    	; 0x10be <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
     fe6:	a8 e3       	ldi	r26, 0x38	; 56
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e8 e3       	ldi	r30, 0x38	; 56
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_writePin+0x10c>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_writePin+0x108>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	57 c0       	rjmp	.+174    	; 0x10be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    1016:	a5 e3       	ldi	r26, 0x35	; 53
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e3       	ldi	r30, 0x35	; 53
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <GPIO_writePin+0x13c>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <GPIO_writePin+0x138>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	40 c0       	rjmp	.+128    	; 0x10be <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    103e:	a5 e3       	ldi	r26, 0x35	; 53
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e3       	ldi	r30, 0x35	; 53
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_writePin+0x164>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_writePin+0x160>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	2b c0       	rjmp	.+86     	; 0x10be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    106e:	a2 e3       	ldi	r26, 0x32	; 50
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e2 e3       	ldi	r30, 0x32	; 50
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_writePin+0x194>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_writePin+0x190>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	14 c0       	rjmp	.+40     	; 0x10be <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_writePin+0x1bc>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_writePin+0x1b8>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	29 97       	sbiw	r28, 0x09	; 9
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <GPIO_readPin+0x20>
    10ec:	8d c0       	rjmp	.+282    	; 0x1208 <GPIO_readPin+0x13a>
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <GPIO_readPin+0x28>
    10f4:	89 c0       	rjmp	.+274    	; 0x1208 <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	39 87       	std	Y+9, r19	; 0x09
    10fe:	28 87       	std	Y+8, r18	; 0x08
    1100:	48 85       	ldd	r20, Y+8	; 0x08
    1102:	59 85       	ldd	r21, Y+9	; 0x09
    1104:	41 30       	cpi	r20, 0x01	; 1
    1106:	51 05       	cpc	r21, r1
    1108:	89 f1       	breq	.+98     	; 0x116c <GPIO_readPin+0x9e>
    110a:	88 85       	ldd	r24, Y+8	; 0x08
    110c:	99 85       	ldd	r25, Y+9	; 0x09
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	91 05       	cpc	r25, r1
    1112:	34 f4       	brge	.+12     	; 0x1120 <GPIO_readPin+0x52>
    1114:	28 85       	ldd	r18, Y+8	; 0x08
    1116:	39 85       	ldd	r19, Y+9	; 0x09
    1118:	21 15       	cp	r18, r1
    111a:	31 05       	cpc	r19, r1
    111c:	69 f0       	breq	.+26     	; 0x1138 <GPIO_readPin+0x6a>
    111e:	74 c0       	rjmp	.+232    	; 0x1208 <GPIO_readPin+0x13a>
    1120:	48 85       	ldd	r20, Y+8	; 0x08
    1122:	59 85       	ldd	r21, Y+9	; 0x09
    1124:	42 30       	cpi	r20, 0x02	; 2
    1126:	51 05       	cpc	r21, r1
    1128:	d9 f1       	breq	.+118    	; 0x11a0 <GPIO_readPin+0xd2>
    112a:	88 85       	ldd	r24, Y+8	; 0x08
    112c:	99 85       	ldd	r25, Y+9	; 0x09
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <GPIO_readPin+0x68>
    1134:	4f c0       	rjmp	.+158    	; 0x11d4 <GPIO_readPin+0x106>
    1136:	68 c0       	rjmp	.+208    	; 0x1208 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    1138:	e9 e3       	ldi	r30, 0x39	; 57
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <GPIO_readPin+0x82>
    114c:	55 95       	asr	r21
    114e:	47 95       	ror	r20
    1150:	8a 95       	dec	r24
    1152:	e2 f7       	brpl	.-8      	; 0x114c <GPIO_readPin+0x7e>
    1154:	ca 01       	movw	r24, r20
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	90 70       	andi	r25, 0x00	; 0
    115a:	88 23       	and	r24, r24
    115c:	19 f0       	breq	.+6      	; 0x1164 <GPIO_readPin+0x96>
    115e:	51 e0       	ldi	r21, 0x01	; 1
    1160:	5e 83       	std	Y+6, r21	; 0x06
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <GPIO_readPin+0x98>
    1164:	1e 82       	std	Y+6, r1	; 0x06
    1166:	8e 81       	ldd	r24, Y+6	; 0x06
    1168:	8f 83       	std	Y+7, r24	; 0x07
    116a:	4f c0       	rjmp	.+158    	; 0x120a <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    116c:	e6 e3       	ldi	r30, 0x36	; 54
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a9 01       	movw	r20, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_readPin+0xb6>
    1180:	55 95       	asr	r21
    1182:	47 95       	ror	r20
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_readPin+0xb2>
    1188:	ca 01       	movw	r24, r20
    118a:	81 70       	andi	r24, 0x01	; 1
    118c:	90 70       	andi	r25, 0x00	; 0
    118e:	88 23       	and	r24, r24
    1190:	19 f0       	breq	.+6      	; 0x1198 <GPIO_readPin+0xca>
    1192:	51 e0       	ldi	r21, 0x01	; 1
    1194:	5d 83       	std	Y+5, r21	; 0x05
    1196:	01 c0       	rjmp	.+2      	; 0x119a <GPIO_readPin+0xcc>
    1198:	1d 82       	std	Y+5, r1	; 0x05
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	8f 83       	std	Y+7, r24	; 0x07
    119e:	35 c0       	rjmp	.+106    	; 0x120a <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_readPin+0xea>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_readPin+0xe6>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	88 23       	and	r24, r24
    11c4:	19 f0       	breq	.+6      	; 0x11cc <GPIO_readPin+0xfe>
    11c6:	51 e0       	ldi	r21, 0x01	; 1
    11c8:	5c 83       	std	Y+4, r21	; 0x04
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <GPIO_readPin+0x100>
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	1b c0       	rjmp	.+54     	; 0x120a <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    11d4:	e0 e3       	ldi	r30, 0x30	; 48
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_readPin+0x11e>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_readPin+0x11a>
    11f0:	ca 01       	movw	r24, r20
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	88 23       	and	r24, r24
    11f8:	19 f0       	breq	.+6      	; 0x1200 <GPIO_readPin+0x132>
    11fa:	51 e0       	ldi	r21, 0x01	; 1
    11fc:	5b 83       	std	Y+3, r21	; 0x03
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <GPIO_readPin+0x134>
    1200:	1b 82       	std	Y+3, r1	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	8f 83       	std	Y+7, r24	; 0x07
    1206:	01 c0       	rjmp	.+2      	; 0x120a <GPIO_readPin+0x13c>
			break;
		}

	}

	return 0;
    1208:	1f 82       	std	Y+7, r1	; 0x07
    120a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    120c:	29 96       	adiw	r28, 0x09	; 9
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_setupPortDirection+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <GPIO_setupPortDirection+0x8>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	90 f5       	brcc	.+100    	; 0x1298 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 83       	std	Y+4, r19	; 0x04
    123c:	2b 83       	std	Y+3, r18	; 0x03
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <GPIO_setupPortDirection+0x5e>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <GPIO_setupPortDirection+0x3e>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 f0       	breq	.+24     	; 0x1272 <GPIO_setupPortDirection+0x54>
    125a:	1e c0       	rjmp	.+60     	; 0x1298 <GPIO_setupPortDirection+0x7a>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <GPIO_setupPortDirection+0x68>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <GPIO_setupPortDirection+0x72>
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1272:	ea e3       	ldi	r30, 0x3A	; 58
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1286:	e4 e3       	ldi	r30, 0x34	; 52
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1290:	e1 e3       	ldi	r30, 0x31	; 49
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
			break;
		}
	}
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_writePort+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <GPIO_writePort+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	90 f5       	brcc	.+100    	; 0x1320 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <GPIO_writePort+0x5e>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <GPIO_writePort+0x3e>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <GPIO_writePort+0x54>
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <GPIO_writePort+0x7a>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_writePort+0x68>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <GPIO_writePort+0x72>
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1304:	e8 e3       	ldi	r30, 0x38	; 56
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1318:	e2 e3       	ldi	r30, 0x32	; 50
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <GPIO_readPort+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_readPort+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	98 f5       	brcc	.+102    	; 0x13a8 <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 83       	std	Y+4, r19	; 0x04
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d1 f0       	breq	.+52     	; 0x138a <GPIO_readPort+0x5c>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <GPIO_readPort+0x3c>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <GPIO_readPort+0x52>
    1368:	1f c0       	rjmp	.+62     	; 0x13a8 <GPIO_readPort+0x7a>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <GPIO_readPort+0x66>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	81 f0       	breq	.+32     	; 0x139e <GPIO_readPort+0x70>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    1380:	e9 e3       	ldi	r30, 0x39	; 57
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	90 81       	ld	r25, Z
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    138a:	e6 e3       	ldi	r30, 0x36	; 54
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	20 81       	ld	r18, Z
    1390:	2a 83       	std	Y+2, r18	; 0x02
    1392:	0b c0       	rjmp	.+22     	; 0x13aa <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1394:	e3 e3       	ldi	r30, 0x33	; 51
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	30 81       	ld	r19, Z
    139a:	3a 83       	std	Y+2, r19	; 0x02
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    139e:	e0 e3       	ldi	r30, 0x30	; 48
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    13a8:	1a 82       	std	Y+2, r1	; 0x02
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <LEDS_init>:
#include "led.h"
/*
 * Initializes all Leds (red, green, blue) pins direction.
 * Turn off all the Leds
 */
void LEDS_init(void){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62

	/* SETUP LEDs  Direction as Output */
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_pin,PIN_OUTPUT);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT,GREEN_LED_pin,PIN_OUTPUT);
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT,BLUE_LED_pin,PIN_OUTPUT);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>

	/* Turn off All pins on Startup*/
#if(LED_MODE == POSITIVE_LOGIC)

	GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
	GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);

#endif

}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <LED_on>:
/*
 * Turns on the specified LED.
 */
void LED_on(uint8 id){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <LED_on+0x6>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01

#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3b 83       	std	Y+3, r19	; 0x03
    141a:	2a 83       	std	Y+2, r18	; 0x02
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	a9 f0       	breq	.+42     	; 0x1450 <LED_on+0x4c>
    1426:	2a 81       	ldd	r18, Y+2	; 0x02
    1428:	3b 81       	ldd	r19, Y+3	; 0x03
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	51 f0       	breq	.+20     	; 0x1444 <LED_on+0x40>
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	89 f4       	brne	.+34     	; 0x145a <LED_on+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,HIGH);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1442:	0b c0       	rjmp	.+22     	; 0x145a <LED_on+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,HIGH);
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	62 e0       	ldi	r22, 0x02	; 2
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    144e:	05 c0       	rjmp	.+10     	; 0x145a <LED_on+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,HIGH);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
		break;
	}

#endif

}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <LED_off>:

/*
 * Turns off the specified LED.
 */
void LED_off(uint8 id){
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <LED_off+0x6>
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	89 83       	std	Y+1, r24	; 0x01


#if(LED_MODE == POSITIVE_LOGIC)

	switch(id){
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3b 83       	std	Y+3, r19	; 0x03
    147c:	2a 83       	std	Y+2, r18	; 0x02
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	a9 f0       	breq	.+42     	; 0x14b2 <LED_off+0x4c>
    1488:	2a 81       	ldd	r18, Y+2	; 0x02
    148a:	3b 81       	ldd	r19, Y+3	; 0x03
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	51 f0       	breq	.+20     	; 0x14a6 <LED_off+0x40>
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	89 f4       	brne	.+34     	; 0x14bc <LED_off+0x56>
	case RED_LED_ID:
		GPIO_writePin(RED_LED_PORT,RED_LED_pin,LOW);
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <LED_off+0x56>
		break;
	case BLUE_LED_ID:
		GPIO_writePin(BLUE_LED_PORT,BLUE_LED_pin,LOW);
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <LED_off+0x56>
		break;
	case GREEN_LED_ID:
		GPIO_writePin(GREEN_LED_PORT,GREEN_LED_pin,LOW);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
		break;
	}

#endif

}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	2e 97       	sbiw	r28, 0x0e	; 14
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 ea       	ldi	r26, 0xA0	; 160
    14f6:	b1 e4       	ldi	r27, 0x41	; 65
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	ad 87       	std	Y+13, r26	; 0x0d
    14fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a e7       	ldi	r20, 0x7A	; 122
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <LCD_init+0x7a>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <LCD_init+0xda>
    1584:	80 e9       	ldi	r24, 0x90	; 144
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <LCD_init+0xc8>
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <LCD_init+0xbc>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_init+0x104>
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	63 e0       	ldi	r22, 0x03	; 3
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	64 e0       	ldi	r22, 0x04	; 4
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	65 e0       	ldi	r22, 0x05	; 5
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	66 e0       	ldi	r22, 0x06	; 6
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
    15fc:	83 e3       	ldi	r24, 0x33	; 51
    15fe:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
    1602:	82 e3       	ldi	r24, 0x32	; 50
    1604:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
    1608:	88 e2       	ldi	r24, 0x28	; 40
    160a:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    160e:	8c e0       	ldi	r24, 0x0C	; 12
    1610:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>

}
    161a:	2e 96       	adiw	r28, 0x0e	; 14
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	c3 56       	subi	r28, 0x63	; 99
    163a:	d0 40       	sbci	r29, 0x00	; 0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	fe 01       	movw	r30, r28
    1648:	ed 59       	subi	r30, 0x9D	; 157
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1658:	fe 01       	movw	r30, r28
    165a:	e1 5a       	subi	r30, 0xA1	; 161
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e8       	ldi	r26, 0x80	; 128
    1664:	bf e3       	ldi	r27, 0x3F	; 63
    1666:	80 83       	st	Z, r24
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	a2 83       	std	Z+2, r26	; 0x02
    166c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166e:	8e 01       	movw	r16, r28
    1670:	05 5a       	subi	r16, 0xA5	; 165
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	fe 01       	movw	r30, r28
    1676:	e1 5a       	subi	r30, 0xA1	; 161
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	55 e4       	ldi	r21, 0x45	; 69
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	80 83       	st	Z, r24
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	a2 83       	std	Z+2, r26	; 0x02
    169a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169c:	fe 01       	movw	r30, r28
    169e:	e5 5a       	subi	r30, 0xA5	; 165
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	44 f4       	brge	.+16     	; 0x16ca <LCD_sendCommand+0x9e>
		__ticks = 1;
    16ba:	fe 01       	movw	r30, r28
    16bc:	e7 5a       	subi	r30, 0xA7	; 167
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	64 c0       	rjmp	.+200    	; 0x1792 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    16ca:	fe 01       	movw	r30, r28
    16cc:	e5 5a       	subi	r30, 0xA5	; 165
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	0c f0       	brlt	.+2      	; 0x16ea <LCD_sendCommand+0xbe>
    16e8:	43 c0       	rjmp	.+134    	; 0x1770 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	fe 01       	movw	r30, r28
    16ec:	e1 5a       	subi	r30, 0xA1	; 161
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8e 01       	movw	r16, r28
    170a:	07 5a       	subi	r16, 0xA7	; 167
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
    1720:	1f c0       	rjmp	.+62     	; 0x1760 <LCD_sendCommand+0x134>
    1722:	fe 01       	movw	r30, r28
    1724:	e9 5a       	subi	r30, 0xA9	; 169
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 e9       	ldi	r24, 0x90	; 144
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	fe 01       	movw	r30, r28
    1732:	e9 5a       	subi	r30, 0xA9	; 169
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <LCD_sendCommand+0x10e>
    173e:	fe 01       	movw	r30, r28
    1740:	e9 5a       	subi	r30, 0xA9	; 169
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	de 01       	movw	r26, r28
    174a:	a7 5a       	subi	r26, 0xA7	; 167
    174c:	bf 4f       	sbci	r27, 0xFF	; 255
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5a       	subi	r30, 0xA7	; 167
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	9c 93       	st	X, r25
    175e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	fe 01       	movw	r30, r28
    1762:	e7 5a       	subi	r30, 0xA7	; 167
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	d1 f6       	brne	.-76     	; 0x1722 <LCD_sendCommand+0xf6>
    176e:	27 c0       	rjmp	.+78     	; 0x17be <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	8e 01       	movw	r16, r28
    1772:	07 5a       	subi	r16, 0xA7	; 167
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	fe 01       	movw	r30, r28
    1778:	e5 5a       	subi	r30, 0xA5	; 165
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	de 01       	movw	r26, r28
    1794:	ab 5a       	subi	r26, 0xAB	; 171
    1796:	bf 4f       	sbci	r27, 0xFF	; 255
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5a       	subi	r30, 0xA7	; 167
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	8d 93       	st	X+, r24
    17a4:	9c 93       	st	X, r25
    17a6:	fe 01       	movw	r30, r28
    17a8:	eb 5a       	subi	r30, 0xAB	; 171
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_sendCommand+0x184>
    17b4:	fe 01       	movw	r30, r28
    17b6:	eb 5a       	subi	r30, 0xAB	; 171
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    17c8:	fe 01       	movw	r30, r28
    17ca:	ef 5a       	subi	r30, 0xAF	; 175
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e8       	ldi	r26, 0x80	; 128
    17d4:	bf e3       	ldi	r27, 0x3F	; 63
    17d6:	80 83       	st	Z, r24
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	a2 83       	std	Z+2, r26	; 0x02
    17dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	8e 01       	movw	r16, r28
    17e0:	03 5b       	subi	r16, 0xB3	; 179
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	fe 01       	movw	r30, r28
    17e6:	ef 5a       	subi	r30, 0xAF	; 175
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a e7       	ldi	r20, 0x7A	; 122
    17f8:	55 e4       	ldi	r21, 0x45	; 69
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	f8 01       	movw	r30, r16
    1804:	80 83       	st	Z, r24
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	a2 83       	std	Z+2, r26	; 0x02
    180a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180c:	fe 01       	movw	r30, r28
    180e:	e3 5b       	subi	r30, 0xB3	; 179
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1826:	88 23       	and	r24, r24
    1828:	44 f4       	brge	.+16     	; 0x183a <LCD_sendCommand+0x20e>
		__ticks = 1;
    182a:	fe 01       	movw	r30, r28
    182c:	e5 5b       	subi	r30, 0xB5	; 181
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	64 c0       	rjmp	.+200    	; 0x1902 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    183a:	fe 01       	movw	r30, r28
    183c:	e3 5b       	subi	r30, 0xB3	; 179
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	0c f0       	brlt	.+2      	; 0x185a <LCD_sendCommand+0x22e>
    1858:	43 c0       	rjmp	.+134    	; 0x18e0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	fe 01       	movw	r30, r28
    185c:	ef 5a       	subi	r30, 0xAF	; 175
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8e 01       	movw	r16, r28
    187a:	05 5b       	subi	r16, 0xB5	; 181
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	1f c0       	rjmp	.+62     	; 0x18d0 <LCD_sendCommand+0x2a4>
    1892:	fe 01       	movw	r30, r28
    1894:	e7 5b       	subi	r30, 0xB7	; 183
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 e9       	ldi	r24, 0x90	; 144
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5b       	subi	r30, 0xB7	; 183
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_sendCommand+0x27e>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e7 5b       	subi	r30, 0xB7	; 183
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b8:	de 01       	movw	r26, r28
    18ba:	a5 5b       	subi	r26, 0xB5	; 181
    18bc:	bf 4f       	sbci	r27, 0xFF	; 255
    18be:	fe 01       	movw	r30, r28
    18c0:	e5 5b       	subi	r30, 0xB5	; 181
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	9c 93       	st	X, r25
    18ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	fe 01       	movw	r30, r28
    18d2:	e5 5b       	subi	r30, 0xB5	; 181
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	d1 f6       	brne	.-76     	; 0x1892 <LCD_sendCommand+0x266>
    18de:	27 c0       	rjmp	.+78     	; 0x192e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e0:	8e 01       	movw	r16, r28
    18e2:	05 5b       	subi	r16, 0xB5	; 181
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e3 5b       	subi	r30, 0xB3	; 179
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	f8 01       	movw	r30, r16
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	de 01       	movw	r26, r28
    1904:	a9 5b       	subi	r26, 0xB9	; 185
    1906:	bf 4f       	sbci	r27, 0xFF	; 255
    1908:	fe 01       	movw	r30, r28
    190a:	e5 5b       	subi	r30, 0xB5	; 181
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	8d 93       	st	X+, r24
    1914:	9c 93       	st	X, r25
    1916:	fe 01       	movw	r30, r28
    1918:	e9 5b       	subi	r30, 0xB9	; 185
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0x2f4>
    1924:	fe 01       	movw	r30, r28
    1926:	e9 5b       	subi	r30, 0xB9	; 185
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
    192e:	fe 01       	movw	r30, r28
    1930:	ed 59       	subi	r30, 0x9D	; 157
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	80 71       	andi	r24, 0x10	; 16
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	95 95       	asr	r25
    1948:	87 95       	ror	r24
    194a:	95 95       	asr	r25
    194c:	87 95       	ror	r24
    194e:	98 2f       	mov	r25, r24
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	63 e0       	ldi	r22, 0x03	; 3
    1954:	49 2f       	mov	r20, r25
    1956:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
    195a:	fe 01       	movw	r30, r28
    195c:	ed 59       	subi	r30, 0x9D	; 157
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	80 72       	andi	r24, 0x20	; 32
    1968:	90 70       	andi	r25, 0x00	; 0
    196a:	95 95       	asr	r25
    196c:	87 95       	ror	r24
    196e:	95 95       	asr	r25
    1970:	87 95       	ror	r24
    1972:	95 95       	asr	r25
    1974:	87 95       	ror	r24
    1976:	95 95       	asr	r25
    1978:	87 95       	ror	r24
    197a:	95 95       	asr	r25
    197c:	87 95       	ror	r24
    197e:	98 2f       	mov	r25, r24
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	64 e0       	ldi	r22, 0x04	; 4
    1984:	49 2f       	mov	r20, r25
    1986:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    198a:	fe 01       	movw	r30, r28
    198c:	ed 59       	subi	r30, 0x9D	; 157
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	80 74       	andi	r24, 0x40	; 64
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	08 2e       	mov	r0, r24
    199c:	89 2f       	mov	r24, r25
    199e:	00 0c       	add	r0, r0
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 0b       	sbc	r25, r25
    19a4:	00 0c       	add	r0, r0
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	98 2f       	mov	r25, r24
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	49 2f       	mov	r20, r25
    19b2:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    19b6:	fe 01       	movw	r30, r28
    19b8:	ed 59       	subi	r30, 0x9D	; 157
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	98 2f       	mov	r25, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	99 27       	eor	r25, r25
    19c4:	99 1f       	adc	r25, r25
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	66 e0       	ldi	r22, 0x06	; 6
    19ca:	49 2f       	mov	r20, r25
    19cc:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 5b       	subi	r30, 0xBD	; 189
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	8e 01       	movw	r16, r28
    19e8:	01 5c       	subi	r16, 0xC1	; 193
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 5b       	subi	r30, 0xBD	; 189
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	55 e4       	ldi	r21, 0x45	; 69
    1a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <LCD_sendCommand+0x40e>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e af       	std	Y+62, r25	; 0x3e
    1a36:	8d af       	std	Y+61, r24	; 0x3d
    1a38:	46 c0       	rjmp	.+140    	; 0x1ac6 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ff 96       	adiw	r30, 0x3f	; 63
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	64 f5       	brge	.+88     	; 0x1aae <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	fe 01       	movw	r30, r28
    1a58:	ed 5b       	subi	r30, 0xBD	; 189
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e af       	std	Y+62, r25	; 0x3e
    1a82:	8d af       	std	Y+61, r24	; 0x3d
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_sendCommand+0x478>
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9c af       	std	Y+60, r25	; 0x3c
    1a8c:	8b af       	std	Y+59, r24	; 0x3b
    1a8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x466>
    1a96:	9c af       	std	Y+60, r25	; 0x3c
    1a98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9e af       	std	Y+62, r25	; 0x3e
    1aa2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <LCD_sendCommand+0x45a>
    1aac:	16 c0       	rjmp	.+44     	; 0x1ada <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ff 96       	adiw	r30, 0x3f	; 63
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e af       	std	Y+62, r25	; 0x3e
    1ac4:	8d af       	std	Y+61, r24	; 0x3d
    1ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aca:	9a af       	std	Y+58, r25	; 0x3a
    1acc:	89 af       	std	Y+57, r24	; 0x39
    1ace:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_sendCommand+0x4a6>
    1ad6:	9a af       	std	Y+58, r25	; 0x3a
    1ad8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	8d ab       	std	Y+53, r24	; 0x35
    1aee:	9e ab       	std	Y+54, r25	; 0x36
    1af0:	af ab       	std	Y+55, r26	; 0x37
    1af2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6d a9       	ldd	r22, Y+53	; 0x35
    1af6:	7e a9       	ldd	r23, Y+54	; 0x36
    1af8:	8f a9       	ldd	r24, Y+55	; 0x37
    1afa:	98 ad       	ldd	r25, Y+56	; 0x38
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a e7       	ldi	r20, 0x7A	; 122
    1b02:	55 e4       	ldi	r21, 0x45	; 69
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	89 ab       	std	Y+49, r24	; 0x31
    1b0e:	9a ab       	std	Y+50, r25	; 0x32
    1b10:	ab ab       	std	Y+51, r26	; 0x33
    1b12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b14:	69 a9       	ldd	r22, Y+49	; 0x31
    1b16:	7a a9       	ldd	r23, Y+50	; 0x32
    1b18:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b36:	69 a9       	ldd	r22, Y+49	; 0x31
    1b38:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b50:	7e a9       	ldd	r23, Y+54	; 0x36
    1b52:	8f a9       	ldd	r24, Y+55	; 0x37
    1b54:	98 ad       	ldd	r25, Y+56	; 0x38
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	98 ab       	std	Y+48, r25	; 0x30
    1b74:	8f a7       	std	Y+47, r24	; 0x2f
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_sendCommand+0x56a>
    1b78:	80 e9       	ldi	r24, 0x90	; 144
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	9e a7       	std	Y+46, r25	; 0x2e
    1b7e:	8d a7       	std	Y+45, r24	; 0x2d
    1b80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_sendCommand+0x558>
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	98 ab       	std	Y+48, r25	; 0x30
    1b94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b98:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_sendCommand+0x54c>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	98 ab       	std	Y+48, r25	; 0x30
    1bb2:	8f a7       	std	Y+47, r24	; 0x2f
    1bb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb8:	9c a7       	std	Y+44, r25	; 0x2c
    1bba:	8b a7       	std	Y+43, r24	; 0x2b
    1bbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0x594>
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	62 e0       	ldi	r22, 0x02	; 2
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e8       	ldi	r26, 0x80	; 128
    1bd8:	bf e3       	ldi	r27, 0x3F	; 63
    1bda:	8f a3       	std	Y+39, r24	; 0x27
    1bdc:	98 a7       	std	Y+40, r25	; 0x28
    1bde:	a9 a7       	std	Y+41, r26	; 0x29
    1be0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6f a1       	ldd	r22, Y+39	; 0x27
    1be4:	78 a5       	ldd	r23, Y+40	; 0x28
    1be6:	89 a5       	ldd	r24, Y+41	; 0x29
    1be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	55 e4       	ldi	r21, 0x45	; 69
    1bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8b a3       	std	Y+35, r24	; 0x23
    1bfc:	9c a3       	std	Y+36, r25	; 0x24
    1bfe:	ad a3       	std	Y+37, r26	; 0x25
    1c00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c02:	6b a1       	ldd	r22, Y+35	; 0x23
    1c04:	7c a1       	ldd	r23, Y+36	; 0x24
    1c06:	8d a1       	ldd	r24, Y+37	; 0x25
    1c08:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1c24:	6b a1       	ldd	r22, Y+35	; 0x23
    1c26:	7c a1       	ldd	r23, Y+36	; 0x24
    1c28:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c40:	89 a5       	ldd	r24, Y+41	; 0x29
    1c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a a3       	std	Y+34, r25	; 0x22
    1c62:	89 a3       	std	Y+33, r24	; 0x21
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <LCD_sendCommand+0x658>
    1c66:	80 e9       	ldi	r24, 0x90	; 144
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	98 a3       	std	Y+32, r25	; 0x20
    1c6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c70:	98 a1       	ldd	r25, Y+32	; 0x20
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_sendCommand+0x646>
    1c76:	98 a3       	std	Y+32, r25	; 0x20
    1c78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9a a1       	ldd	r25, Y+34	; 0x22
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <LCD_sendCommand+0x63a>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c90:	7c a1       	ldd	r23, Y+36	; 0x24
    1c92:	8d a1       	ldd	r24, Y+37	; 0x25
    1c94:	9e a1       	ldd	r25, Y+38	; 0x26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9a a3       	std	Y+34, r25	; 0x22
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    1caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_sendCommand+0x682>
    1cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ed 59       	subi	r30, 0x9D	; 157
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	91 70       	andi	r25, 0x01	; 1
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	63 e0       	ldi	r22, 0x03	; 3
    1cc6:	49 2f       	mov	r20, r25
    1cc8:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 59       	subi	r30, 0x9D	; 157
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	82 70       	andi	r24, 0x02	; 2
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	95 95       	asr	r25
    1cde:	87 95       	ror	r24
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	64 e0       	ldi	r22, 0x04	; 4
    1ce6:	49 2f       	mov	r20, r25
    1ce8:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1cec:	fe 01       	movw	r30, r28
    1cee:	ed 59       	subi	r30, 0x9D	; 157
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	84 70       	andi	r24, 0x04	; 4
    1cfa:	90 70       	andi	r25, 0x00	; 0
    1cfc:	95 95       	asr	r25
    1cfe:	87 95       	ror	r24
    1d00:	95 95       	asr	r25
    1d02:	87 95       	ror	r24
    1d04:	98 2f       	mov	r25, r24
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	65 e0       	ldi	r22, 0x05	; 5
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1d10:	fe 01       	movw	r30, r28
    1d12:	ed 59       	subi	r30, 0x9D	; 157
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	88 70       	andi	r24, 0x08	; 8
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	95 95       	asr	r25
    1d22:	87 95       	ror	r24
    1d24:	95 95       	asr	r25
    1d26:	87 95       	ror	r24
    1d28:	95 95       	asr	r25
    1d2a:	87 95       	ror	r24
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	66 e0       	ldi	r22, 0x06	; 6
    1d32:	49 2f       	mov	r20, r25
    1d34:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    1d42:	9a 8f       	std	Y+26, r25	; 0x1a
    1d44:	ab 8f       	std	Y+27, r26	; 0x1b
    1d46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	55 e4       	ldi	r21, 0x45	; 69
    1d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8d 8b       	std	Y+21, r24	; 0x15
    1d62:	9e 8b       	std	Y+22, r25	; 0x16
    1d64:	af 8b       	std	Y+23, r26	; 0x17
    1d66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d68:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_sendCommand+0x75e>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	69 8d       	ldd	r22, Y+25	; 0x19
    1da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9c 8b       	std	Y+20, r25	; 0x14
    1dc8:	8b 8b       	std	Y+19, r24	; 0x13
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_sendCommand+0x7be>
    1dcc:	80 e9       	ldi	r24, 0x90	; 144
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	9a 8b       	std	Y+18, r25	; 0x12
    1dd2:	89 8b       	std	Y+17, r24	; 0x11
    1dd4:	89 89       	ldd	r24, Y+17	; 0x11
    1dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_sendCommand+0x7ac>
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9c 8b       	std	Y+20, r25	; 0x14
    1de8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_sendCommand+0x7a0>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	98 8b       	std	Y+16, r25	; 0x10
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
    1e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e12:	98 89       	ldd	r25, Y+16	; 0x10
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_sendCommand+0x7e8>
    1e18:	98 8b       	std	Y+16, r25	; 0x10
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	62 e0       	ldi	r22, 0x02	; 2
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	8b 87       	std	Y+11, r24	; 0x0b
    1e30:	9c 87       	std	Y+12, r25	; 0x0c
    1e32:	ad 87       	std	Y+13, r26	; 0x0d
    1e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	55 e4       	ldi	r21, 0x45	; 69
    1e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f 83       	std	Y+7, r24	; 0x07
    1e50:	98 87       	std	Y+8, r25	; 0x08
    1e52:	a9 87       	std	Y+9, r26	; 0x09
    1e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_sendCommand+0x8ac>
    1eba:	80 e9       	ldi	r24, 0x90	; 144
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_sendCommand+0x89a>
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_sendCommand+0x88e>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x8d6>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f0a:	cd 59       	subi	r28, 0x9D	; 157
    1f0c:	df 4f       	sbci	r29, 0xFF	; 255
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	c3 56       	subi	r28, 0x63	; 99
    1f30:	d0 40       	sbci	r29, 0x00	; 0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 59       	subi	r30, 0x9D	; 157
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e1 5a       	subi	r30, 0xA1	; 161
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	8e 01       	movw	r16, r28
    1f66:	05 5a       	subi	r16, 0xA5	; 165
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e1 5a       	subi	r30, 0xA1	; 161
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	55 e4       	ldi	r21, 0x45	; 69
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f92:	fe 01       	movw	r30, r28
    1f94:	e5 5a       	subi	r30, 0xA5	; 165
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	44 f4       	brge	.+16     	; 0x1fc0 <LCD_displayChar+0x9e>
		__ticks = 1;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e7 5a       	subi	r30, 0xA7	; 167
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	64 c0       	rjmp	.+200    	; 0x2088 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e5 5a       	subi	r30, 0xA5	; 165
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <LCD_displayChar+0xbe>
    1fde:	43 c0       	rjmp	.+134    	; 0x2066 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e1 5a       	subi	r30, 0xA1	; 161
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8e 01       	movw	r16, r28
    2000:	07 5a       	subi	r16, 0xA7	; 167
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	1f c0       	rjmp	.+62     	; 0x2056 <LCD_displayChar+0x134>
    2018:	fe 01       	movw	r30, r28
    201a:	e9 5a       	subi	r30, 0xA9	; 169
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e9       	ldi	r24, 0x90	; 144
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	fe 01       	movw	r30, r28
    2028:	e9 5a       	subi	r30, 0xA9	; 169
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_displayChar+0x10e>
    2034:	fe 01       	movw	r30, r28
    2036:	e9 5a       	subi	r30, 0xA9	; 169
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	de 01       	movw	r26, r28
    2040:	a7 5a       	subi	r26, 0xA7	; 167
    2042:	bf 4f       	sbci	r27, 0xFF	; 255
    2044:	fe 01       	movw	r30, r28
    2046:	e7 5a       	subi	r30, 0xA7	; 167
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	9c 93       	st	X, r25
    2054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	fe 01       	movw	r30, r28
    2058:	e7 5a       	subi	r30, 0xA7	; 167
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	d1 f6       	brne	.-76     	; 0x2018 <LCD_displayChar+0xf6>
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	8e 01       	movw	r16, r28
    2068:	07 5a       	subi	r16, 0xA7	; 167
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e5 5a       	subi	r30, 0xA5	; 165
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	de 01       	movw	r26, r28
    208a:	ab 5a       	subi	r26, 0xAB	; 171
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e7 5a       	subi	r30, 0xA7	; 167
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	fe 01       	movw	r30, r28
    209e:	eb 5a       	subi	r30, 0xAB	; 171
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayChar+0x184>
    20aa:	fe 01       	movw	r30, r28
    20ac:	eb 5a       	subi	r30, 0xAB	; 171
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    20be:	fe 01       	movw	r30, r28
    20c0:	ef 5a       	subi	r30, 0xAF	; 175
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e8       	ldi	r26, 0x80	; 128
    20ca:	bf e3       	ldi	r27, 0x3F	; 63
    20cc:	80 83       	st	Z, r24
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	a2 83       	std	Z+2, r26	; 0x02
    20d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	8e 01       	movw	r16, r28
    20d6:	03 5b       	subi	r16, 0xB3	; 179
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 5a       	subi	r30, 0xAF	; 175
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	55 e4       	ldi	r21, 0x45	; 69
    20f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	80 83       	st	Z, r24
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	a2 83       	std	Z+2, r26	; 0x02
    2100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2102:	fe 01       	movw	r30, r28
    2104:	e3 5b       	subi	r30, 0xB3	; 179
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	44 f4       	brge	.+16     	; 0x2130 <LCD_displayChar+0x20e>
		__ticks = 1;
    2120:	fe 01       	movw	r30, r28
    2122:	e5 5b       	subi	r30, 0xB5	; 181
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	64 c0       	rjmp	.+200    	; 0x21f8 <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    2130:	fe 01       	movw	r30, r28
    2132:	e3 5b       	subi	r30, 0xB3	; 179
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    214a:	18 16       	cp	r1, r24
    214c:	0c f0       	brlt	.+2      	; 0x2150 <LCD_displayChar+0x22e>
    214e:	43 c0       	rjmp	.+134    	; 0x21d6 <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	fe 01       	movw	r30, r28
    2152:	ef 5a       	subi	r30, 0xAF	; 175
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8e 01       	movw	r16, r28
    2170:	05 5b       	subi	r16, 0xB5	; 181
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
    2186:	1f c0       	rjmp	.+62     	; 0x21c6 <LCD_displayChar+0x2a4>
    2188:	fe 01       	movw	r30, r28
    218a:	e7 5b       	subi	r30, 0xB7	; 183
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 e9       	ldi	r24, 0x90	; 144
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	fe 01       	movw	r30, r28
    2198:	e7 5b       	subi	r30, 0xB7	; 183
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_displayChar+0x27e>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e7 5b       	subi	r30, 0xB7	; 183
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	de 01       	movw	r26, r28
    21b0:	a5 5b       	subi	r26, 0xB5	; 181
    21b2:	bf 4f       	sbci	r27, 0xFF	; 255
    21b4:	fe 01       	movw	r30, r28
    21b6:	e5 5b       	subi	r30, 0xB5	; 181
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	11 96       	adiw	r26, 0x01	; 1
    21c2:	9c 93       	st	X, r25
    21c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	fe 01       	movw	r30, r28
    21c8:	e5 5b       	subi	r30, 0xB5	; 181
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	d1 f6       	brne	.-76     	; 0x2188 <LCD_displayChar+0x266>
    21d4:	27 c0       	rjmp	.+78     	; 0x2224 <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	8e 01       	movw	r16, r28
    21d8:	05 5b       	subi	r16, 0xB5	; 181
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	fe 01       	movw	r30, r28
    21de:	e3 5b       	subi	r30, 0xB3	; 179
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	f8 01       	movw	r30, r16
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
    21f8:	de 01       	movw	r26, r28
    21fa:	a9 5b       	subi	r26, 0xB9	; 185
    21fc:	bf 4f       	sbci	r27, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	e5 5b       	subi	r30, 0xB5	; 181
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	91 81       	ldd	r25, Z+1	; 0x01
    2208:	8d 93       	st	X+, r24
    220a:	9c 93       	st	X, r25
    220c:	fe 01       	movw	r30, r28
    220e:	e9 5b       	subi	r30, 0xB9	; 185
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_displayChar+0x2f4>
    221a:	fe 01       	movw	r30, r28
    221c:	e9 5b       	subi	r30, 0xB9	; 185
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    2224:	fe 01       	movw	r30, r28
    2226:	ed 59       	subi	r30, 0x9D	; 157
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	80 71       	andi	r24, 0x10	; 16
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	95 95       	asr	r25
    2236:	87 95       	ror	r24
    2238:	95 95       	asr	r25
    223a:	87 95       	ror	r24
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	98 2f       	mov	r25, r24
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	63 e0       	ldi	r22, 0x03	; 3
    224a:	49 2f       	mov	r20, r25
    224c:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    2250:	fe 01       	movw	r30, r28
    2252:	ed 59       	subi	r30, 0x9D	; 157
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	80 72       	andi	r24, 0x20	; 32
    225e:	90 70       	andi	r25, 0x00	; 0
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	95 95       	asr	r25
    2272:	87 95       	ror	r24
    2274:	98 2f       	mov	r25, r24
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	64 e0       	ldi	r22, 0x04	; 4
    227a:	49 2f       	mov	r20, r25
    227c:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    2280:	fe 01       	movw	r30, r28
    2282:	ed 59       	subi	r30, 0x9D	; 157
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	80 74       	andi	r24, 0x40	; 64
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	08 2e       	mov	r0, r24
    2292:	89 2f       	mov	r24, r25
    2294:	00 0c       	add	r0, r0
    2296:	88 1f       	adc	r24, r24
    2298:	99 0b       	sbc	r25, r25
    229a:	00 0c       	add	r0, r0
    229c:	88 1f       	adc	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	98 2f       	mov	r25, r24
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	65 e0       	ldi	r22, 0x05	; 5
    22a6:	49 2f       	mov	r20, r25
    22a8:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 59       	subi	r30, 0x9D	; 157
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	98 2f       	mov	r25, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	99 27       	eor	r25, r25
    22ba:	99 1f       	adc	r25, r25
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	66 e0       	ldi	r22, 0x06	; 6
    22c0:	49 2f       	mov	r20, r25
    22c2:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 5b       	subi	r30, 0xBD	; 189
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	01 5c       	subi	r16, 0xC1	; 193
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 5b       	subi	r30, 0xBD	; 189
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	55 e4       	ldi	r21, 0x45	; 69
    22f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	ff 96       	adiw	r30, 0x3f	; 63
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <LCD_displayChar+0x40e>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9e af       	std	Y+62, r25	; 0x3e
    232c:	8d af       	std	Y+61, r24	; 0x3d
    232e:	46 c0       	rjmp	.+140    	; 0x23bc <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    2330:	fe 01       	movw	r30, r28
    2332:	ff 96       	adiw	r30, 0x3f	; 63
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	64 f5       	brge	.+88     	; 0x23a4 <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	fe 01       	movw	r30, r28
    234e:	ed 5b       	subi	r30, 0xBD	; 189
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e af       	std	Y+62, r25	; 0x3e
    2378:	8d af       	std	Y+61, r24	; 0x3d
    237a:	0f c0       	rjmp	.+30     	; 0x239a <LCD_displayChar+0x478>
    237c:	80 e9       	ldi	r24, 0x90	; 144
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9c af       	std	Y+60, r25	; 0x3c
    2382:	8b af       	std	Y+59, r24	; 0x3b
    2384:	8b ad       	ldd	r24, Y+59	; 0x3b
    2386:	9c ad       	ldd	r25, Y+60	; 0x3c
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_displayChar+0x466>
    238c:	9c af       	std	Y+60, r25	; 0x3c
    238e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d ad       	ldd	r24, Y+61	; 0x3d
    2392:	9e ad       	ldd	r25, Y+62	; 0x3e
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e af       	std	Y+62, r25	; 0x3e
    2398:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d ad       	ldd	r24, Y+61	; 0x3d
    239c:	9e ad       	ldd	r25, Y+62	; 0x3e
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <LCD_displayChar+0x45a>
    23a2:	16 c0       	rjmp	.+44     	; 0x23d0 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	fe 01       	movw	r30, r28
    23a6:	ff 96       	adiw	r30, 0x3f	; 63
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e af       	std	Y+62, r25	; 0x3e
    23ba:	8d af       	std	Y+61, r24	; 0x3d
    23bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23be:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c0:	9a af       	std	Y+58, r25	; 0x3a
    23c2:	89 af       	std	Y+57, r24	; 0x39
    23c4:	89 ad       	ldd	r24, Y+57	; 0x39
    23c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_displayChar+0x4a6>
    23cc:	9a af       	std	Y+58, r25	; 0x3a
    23ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e8       	ldi	r26, 0x80	; 128
    23e0:	bf e3       	ldi	r27, 0x3F	; 63
    23e2:	8d ab       	std	Y+53, r24	; 0x35
    23e4:	9e ab       	std	Y+54, r25	; 0x36
    23e6:	af ab       	std	Y+55, r26	; 0x37
    23e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6d a9       	ldd	r22, Y+53	; 0x35
    23ec:	7e a9       	ldd	r23, Y+54	; 0x36
    23ee:	8f a9       	ldd	r24, Y+55	; 0x37
    23f0:	98 ad       	ldd	r25, Y+56	; 0x38
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a e7       	ldi	r20, 0x7A	; 122
    23f8:	55 e4       	ldi	r21, 0x45	; 69
    23fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	89 ab       	std	Y+49, r24	; 0x31
    2404:	9a ab       	std	Y+50, r25	; 0x32
    2406:	ab ab       	std	Y+51, r26	; 0x33
    2408:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <LCD_displayChar+0x50a>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	98 ab       	std	Y+48, r25	; 0x30
    2428:	8f a7       	std	Y+47, r24	; 0x2f
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6d a9       	ldd	r22, Y+53	; 0x35
    2446:	7e a9       	ldd	r23, Y+54	; 0x36
    2448:	8f a9       	ldd	r24, Y+55	; 0x37
    244a:	98 ad       	ldd	r25, Y+56	; 0x38
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	98 ab       	std	Y+48, r25	; 0x30
    246a:	8f a7       	std	Y+47, r24	; 0x2f
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_displayChar+0x56a>
    246e:	80 e9       	ldi	r24, 0x90	; 144
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	9e a7       	std	Y+46, r25	; 0x2e
    2474:	8d a7       	std	Y+45, r24	; 0x2d
    2476:	8d a5       	ldd	r24, Y+45	; 0x2d
    2478:	9e a5       	ldd	r25, Y+46	; 0x2e
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_displayChar+0x558>
    247e:	9e a7       	std	Y+46, r25	; 0x2e
    2480:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8f a5       	ldd	r24, Y+47	; 0x2f
    2484:	98 a9       	ldd	r25, Y+48	; 0x30
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	98 ab       	std	Y+48, r25	; 0x30
    248a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8f a5       	ldd	r24, Y+47	; 0x2f
    248e:	98 a9       	ldd	r25, Y+48	; 0x30
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <LCD_displayChar+0x54c>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	69 a9       	ldd	r22, Y+49	; 0x31
    2498:	7a a9       	ldd	r23, Y+50	; 0x32
    249a:	8b a9       	ldd	r24, Y+51	; 0x33
    249c:	9c a9       	ldd	r25, Y+52	; 0x34
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
    24aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ac:	98 a9       	ldd	r25, Y+48	; 0x30
    24ae:	9c a7       	std	Y+44, r25	; 0x2c
    24b0:	8b a7       	std	Y+43, r24	; 0x2b
    24b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_displayChar+0x594>
    24ba:	9c a7       	std	Y+44, r25	; 0x2c
    24bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	62 e0       	ldi	r22, 0x02	; 2
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e8       	ldi	r26, 0x80	; 128
    24ce:	bf e3       	ldi	r27, 0x3F	; 63
    24d0:	8f a3       	std	Y+39, r24	; 0x27
    24d2:	98 a7       	std	Y+40, r25	; 0x28
    24d4:	a9 a7       	std	Y+41, r26	; 0x29
    24d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6f a1       	ldd	r22, Y+39	; 0x27
    24da:	78 a5       	ldd	r23, Y+40	; 0x28
    24dc:	89 a5       	ldd	r24, Y+41	; 0x29
    24de:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a e7       	ldi	r20, 0x7A	; 122
    24e6:	55 e4       	ldi	r21, 0x45	; 69
    24e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8b a3       	std	Y+35, r24	; 0x23
    24f2:	9c a3       	std	Y+36, r25	; 0x24
    24f4:	ad a3       	std	Y+37, r26	; 0x25
    24f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_displayChar+0x5f8>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9a a3       	std	Y+34, r25	; 0x22
    2516:	89 a3       	std	Y+33, r24	; 0x21
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    251a:	6b a1       	ldd	r22, Y+35	; 0x23
    251c:	7c a1       	ldd	r23, Y+36	; 0x24
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6f a1       	ldd	r22, Y+39	; 0x27
    2534:	78 a5       	ldd	r23, Y+40	; 0x28
    2536:	89 a5       	ldd	r24, Y+41	; 0x29
    2538:	9a a5       	ldd	r25, Y+42	; 0x2a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9a a3       	std	Y+34, r25	; 0x22
    2558:	89 a3       	std	Y+33, r24	; 0x21
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_displayChar+0x658>
    255c:	80 e9       	ldi	r24, 0x90	; 144
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	98 a3       	std	Y+32, r25	; 0x20
    2562:	8f 8f       	std	Y+31, r24	; 0x1f
    2564:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2566:	98 a1       	ldd	r25, Y+32	; 0x20
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_displayChar+0x646>
    256c:	98 a3       	std	Y+32, r25	; 0x20
    256e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	89 a1       	ldd	r24, Y+33	; 0x21
    2572:	9a a1       	ldd	r25, Y+34	; 0x22
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9a a3       	std	Y+34, r25	; 0x22
    2578:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	89 a1       	ldd	r24, Y+33	; 0x21
    257c:	9a a1       	ldd	r25, Y+34	; 0x22
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_displayChar+0x63a>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6b a1       	ldd	r22, Y+35	; 0x23
    2586:	7c a1       	ldd	r23, Y+36	; 0x24
    2588:	8d a1       	ldd	r24, Y+37	; 0x25
    258a:	9e a1       	ldd	r25, Y+38	; 0x26
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9a a3       	std	Y+34, r25	; 0x22
    2596:	89 a3       	std	Y+33, r24	; 0x21
    2598:	89 a1       	ldd	r24, Y+33	; 0x21
    259a:	9a a1       	ldd	r25, Y+34	; 0x22
    259c:	9e 8f       	std	Y+30, r25	; 0x1e
    259e:	8d 8f       	std	Y+29, r24	; 0x1d
    25a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_displayChar+0x682>
    25a8:	9e 8f       	std	Y+30, r25	; 0x1e
    25aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    25ac:	fe 01       	movw	r30, r28
    25ae:	ed 59       	subi	r30, 0x9D	; 157
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	98 2f       	mov	r25, r24
    25b6:	91 70       	andi	r25, 0x01	; 1
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	49 2f       	mov	r20, r25
    25be:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    25c2:	fe 01       	movw	r30, r28
    25c4:	ed 59       	subi	r30, 0x9D	; 157
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	82 70       	andi	r24, 0x02	; 2
    25d0:	90 70       	andi	r25, 0x00	; 0
    25d2:	95 95       	asr	r25
    25d4:	87 95       	ror	r24
    25d6:	98 2f       	mov	r25, r24
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	64 e0       	ldi	r22, 0x04	; 4
    25dc:	49 2f       	mov	r20, r25
    25de:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 59       	subi	r30, 0x9D	; 157
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	84 70       	andi	r24, 0x04	; 4
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	95 95       	asr	r25
    25f4:	87 95       	ror	r24
    25f6:	95 95       	asr	r25
    25f8:	87 95       	ror	r24
    25fa:	98 2f       	mov	r25, r24
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	65 e0       	ldi	r22, 0x05	; 5
    2600:	49 2f       	mov	r20, r25
    2602:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    2606:	fe 01       	movw	r30, r28
    2608:	ed 59       	subi	r30, 0x9D	; 157
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	88 70       	andi	r24, 0x08	; 8
    2614:	90 70       	andi	r25, 0x00	; 0
    2616:	95 95       	asr	r25
    2618:	87 95       	ror	r24
    261a:	95 95       	asr	r25
    261c:	87 95       	ror	r24
    261e:	95 95       	asr	r25
    2620:	87 95       	ror	r24
    2622:	98 2f       	mov	r25, r24
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	66 e0       	ldi	r22, 0x06	; 6
    2628:	49 2f       	mov	r20, r25
    262a:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e8       	ldi	r26, 0x80	; 128
    2634:	bf e3       	ldi	r27, 0x3F	; 63
    2636:	89 8f       	std	Y+25, r24	; 0x19
    2638:	9a 8f       	std	Y+26, r25	; 0x1a
    263a:	ab 8f       	std	Y+27, r26	; 0x1b
    263c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	69 8d       	ldd	r22, Y+25	; 0x19
    2640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a e7       	ldi	r20, 0x7A	; 122
    264c:	55 e4       	ldi	r21, 0x45	; 69
    264e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8d 8b       	std	Y+21, r24	; 0x15
    2658:	9e 8b       	std	Y+22, r25	; 0x16
    265a:	af 8b       	std	Y+23, r26	; 0x17
    265c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <LCD_displayChar+0x75e>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c 8b       	std	Y+20, r25	; 0x14
    267c:	8b 8b       	std	Y+19, r24	; 0x13
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	69 8d       	ldd	r22, Y+25	; 0x19
    269a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9c 8b       	std	Y+20, r25	; 0x14
    26be:	8b 8b       	std	Y+19, r24	; 0x13
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <LCD_displayChar+0x7be>
    26c2:	80 e9       	ldi	r24, 0x90	; 144
    26c4:	91 e0       	ldi	r25, 0x01	; 1
    26c6:	9a 8b       	std	Y+18, r25	; 0x12
    26c8:	89 8b       	std	Y+17, r24	; 0x11
    26ca:	89 89       	ldd	r24, Y+17	; 0x11
    26cc:	9a 89       	ldd	r25, Y+18	; 0x12
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_displayChar+0x7ac>
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9c 8b       	std	Y+20, r25	; 0x14
    26de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	9c 89       	ldd	r25, Y+20	; 0x14
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <LCD_displayChar+0x7a0>
    26e8:	14 c0       	rjmp	.+40     	; 0x2712 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	6d 89       	ldd	r22, Y+21	; 0x15
    26ec:	7e 89       	ldd	r23, Y+22	; 0x16
    26ee:	8f 89       	ldd	r24, Y+23	; 0x17
    26f0:	98 8d       	ldd	r25, Y+24	; 0x18
    26f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	98 8b       	std	Y+16, r25	; 0x10
    2704:	8f 87       	std	Y+15, r24	; 0x0f
    2706:	8f 85       	ldd	r24, Y+15	; 0x0f
    2708:	98 89       	ldd	r25, Y+16	; 0x10
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_displayChar+0x7e8>
    270e:	98 8b       	std	Y+16, r25	; 0x10
    2710:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e8       	ldi	r26, 0x80	; 128
    2722:	bf e3       	ldi	r27, 0x3F	; 63
    2724:	8b 87       	std	Y+11, r24	; 0x0b
    2726:	9c 87       	std	Y+12, r25	; 0x0c
    2728:	ad 87       	std	Y+13, r26	; 0x0d
    272a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	6b 85       	ldd	r22, Y+11	; 0x0b
    272e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2730:	8d 85       	ldd	r24, Y+13	; 0x0d
    2732:	9e 85       	ldd	r25, Y+14	; 0x0e
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a e7       	ldi	r20, 0x7A	; 122
    273a:	55 e4       	ldi	r21, 0x45	; 69
    273c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8f 83       	std	Y+7, r24	; 0x07
    2746:	98 87       	std	Y+8, r25	; 0x08
    2748:	a9 87       	std	Y+9, r26	; 0x09
    274a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <LCD_displayChar+0x84c>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    276e:	6f 81       	ldd	r22, Y+7	; 0x07
    2770:	78 85       	ldd	r23, Y+8	; 0x08
    2772:	89 85       	ldd	r24, Y+9	; 0x09
    2774:	9a 85       	ldd	r25, Y+10	; 0x0a
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	3f ef       	ldi	r19, 0xFF	; 255
    277a:	4f e7       	ldi	r20, 0x7F	; 127
    277c:	57 e4       	ldi	r21, 0x47	; 71
    277e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2782:	18 16       	cp	r1, r24
    2784:	4c f5       	brge	.+82     	; 0x27d8 <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	6b 85       	ldd	r22, Y+11	; 0x0b
    2788:	7c 85       	ldd	r23, Y+12	; 0x0c
    278a:	8d 85       	ldd	r24, Y+13	; 0x0d
    278c:	9e 85       	ldd	r25, Y+14	; 0x0e
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e2       	ldi	r20, 0x20	; 32
    2794:	51 e4       	ldi	r21, 0x41	; 65
    2796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <LCD_displayChar+0x8ac>
    27b0:	80 e9       	ldi	r24, 0x90	; 144
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <LCD_displayChar+0x89a>
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <LCD_displayChar+0x88e>
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d8:	6f 81       	ldd	r22, Y+7	; 0x07
    27da:	78 85       	ldd	r23, Y+8	; 0x08
    27dc:	89 85       	ldd	r24, Y+9	; 0x09
    27de:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <LCD_displayChar+0x8d6>
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2800:	cd 59       	subi	r28, 0x9D	; 157
    2802:	df 4f       	sbci	r29, 0xFF	; 255
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <LCD_displayString+0x6>
    281e:	0f 92       	push	r0
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	9b 83       	std	Y+3, r25	; 0x03
    2826:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2828:	19 82       	std	Y+1, r1	; 0x01
    282a:	0e c0       	rjmp	.+28     	; 0x2848 <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	9b 81       	ldd	r25, Y+3	; 0x03
    2836:	fc 01       	movw	r30, r24
    2838:	e2 0f       	add	r30, r18
    283a:	f3 1f       	adc	r31, r19
    283c:	80 81       	ld	r24, Z
    283e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_displayChar>
		i++;
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	8f 5f       	subi	r24, 0xFF	; 255
    2846:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	fc 01       	movw	r30, r24
    2854:	e2 0f       	add	r30, r18
    2856:	f3 1f       	adc	r31, r19
    2858:	80 81       	ld	r24, Z
    285a:	88 23       	and	r24, r24
    285c:	39 f7       	brne	.-50     	; 0x282c <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <LCD_moveCursor+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <LCD_moveCursor+0x8>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	8a 83       	std	Y+2, r24	; 0x02
    287a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	3d 83       	std	Y+5, r19	; 0x05
    2884:	2c 83       	std	Y+4, r18	; 0x04
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	9d 81       	ldd	r25, Y+5	; 0x05
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	91 05       	cpc	r25, r1
    288e:	c1 f0       	breq	.+48     	; 0x28c0 <LCD_moveCursor+0x56>
    2890:	2c 81       	ldd	r18, Y+4	; 0x04
    2892:	3d 81       	ldd	r19, Y+5	; 0x05
    2894:	22 30       	cpi	r18, 0x02	; 2
    2896:	31 05       	cpc	r19, r1
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_moveCursor+0x3a>
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	9d 81       	ldd	r25, Y+5	; 0x05
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	61 f0       	breq	.+24     	; 0x28ba <LCD_moveCursor+0x50>
    28a2:	19 c0       	rjmp	.+50     	; 0x28d6 <LCD_moveCursor+0x6c>
    28a4:	2c 81       	ldd	r18, Y+4	; 0x04
    28a6:	3d 81       	ldd	r19, Y+5	; 0x05
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	69 f0       	breq	.+26     	; 0x28c8 <LCD_moveCursor+0x5e>
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	9d 81       	ldd	r25, Y+5	; 0x05
    28b2:	83 30       	cpi	r24, 0x03	; 3
    28b4:	91 05       	cpc	r25, r1
    28b6:	61 f0       	breq	.+24     	; 0x28d0 <LCD_moveCursor+0x66>
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	0b c0       	rjmp	.+22     	; 0x28d6 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	80 5c       	subi	r24, 0xC0	; 192
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	07 c0       	rjmp	.+14     	; 0x28d6 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	80 5f       	subi	r24, 0xF0	; 240
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	80 5b       	subi	r24, 0xB0	; 176
    28d4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	80 68       	ori	r24, 0x80	; 128
    28da:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_displayStringRowColumn+0x6>
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <LCD_displayStringRowColumn+0x8>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	6a 83       	std	Y+2, r22	; 0x02
    28fe:	5c 83       	std	Y+4, r21	; 0x04
    2900:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	6a 81       	ldd	r22, Y+2	; 0x02
    2906:	0e 94 35 14 	call	0x286a	; 0x286a <LCD_moveCursor>
	LCD_displayString(str);
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	9c 81       	ldd	r25, Y+4	; 0x04
    290e:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_displayString>
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint16 data){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	62 97       	sbiw	r28, 0x12	; 18
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	9a 8b       	std	Y+18, r25	; 0x12
    2936:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    2938:	89 89       	ldd	r24, Y+17	; 0x11
    293a:	9a 89       	ldd	r25, Y+18	; 0x12
    293c:	9e 01       	movw	r18, r28
    293e:	2f 5f       	subi	r18, 0xFF	; 255
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	b9 01       	movw	r22, r18
    2944:	4a e0       	ldi	r20, 0x0A	; 10
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <itoa>
	LCD_displayString(buff);
    294c:	ce 01       	movw	r24, r28
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_displayString>
}
    2954:	62 96       	adiw	r28, 0x12	; 18
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_sendCommand>
}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <Buzzer_init>:
#include "buzzer.h"

/*
 * Initializes the buzzer pin direction and turn off the buzzer
 */
void Buzzer_init(void){
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62

	/* set buzzer pin direction to be output */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	65 e0       	ldi	r22, 0x05	; 5
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 91 06 	call	0xd22	; 0xd22 <GPIO_setupPinDirection>

}
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <Buzzer_on>:

/*
 * Activates the buzzer.
 */
void Buzzer_on(void){
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62

	/* activate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,HIGH);
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>

}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <Buzzer_off>:

/*
 * Deactivates the buzzer.
 */
void Buzzer_off(void){
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62

	/* deactivate buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOW);
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	65 e0       	ldi	r22, 0x05	; 5
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 7c 07 	call	0xef8	; 0xef8 <GPIO_writePin>

}
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <main>:
#define F_CPU 16000000UL

/* used Libraries */
#include "../MCAL/UART_DRIVER/uart.h"

int main(void){
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	65 97       	sbiw	r28, 0x15	; 21
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61

	/* Application Initialization */
	uint8 data;
	uint8 str[20];
	UART_init(9600);
    29d6:	60 e8       	ldi	r22, 0x80	; 128
    29d8:	75 e2       	ldi	r23, 0x25	; 37
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_init>
		/* Application Code */
		/*
		data = UART_receiveByte();
		UART_sendByte(data);
		*/
		UART_receiveString(str);
    29e2:	ce 01       	movw	r24, r28
    29e4:	02 96       	adiw	r24, 0x02	; 2
    29e6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <UART_receiveString>
		UART_sendString(str);
    29ea:	ce 01       	movw	r24, r28
    29ec:	02 96       	adiw	r24, 0x02	; 2
    29ee:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_sendString>
    29f2:	f7 cf       	rjmp	.-18     	; 0x29e2 <main+0x20>

000029f4 <__udivmodsi4>:
    29f4:	a1 e2       	ldi	r26, 0x21	; 33
    29f6:	1a 2e       	mov	r1, r26
    29f8:	aa 1b       	sub	r26, r26
    29fa:	bb 1b       	sub	r27, r27
    29fc:	fd 01       	movw	r30, r26
    29fe:	0d c0       	rjmp	.+26     	; 0x2a1a <__udivmodsi4_ep>

00002a00 <__udivmodsi4_loop>:
    2a00:	aa 1f       	adc	r26, r26
    2a02:	bb 1f       	adc	r27, r27
    2a04:	ee 1f       	adc	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	a2 17       	cp	r26, r18
    2a0a:	b3 07       	cpc	r27, r19
    2a0c:	e4 07       	cpc	r30, r20
    2a0e:	f5 07       	cpc	r31, r21
    2a10:	20 f0       	brcs	.+8      	; 0x2a1a <__udivmodsi4_ep>
    2a12:	a2 1b       	sub	r26, r18
    2a14:	b3 0b       	sbc	r27, r19
    2a16:	e4 0b       	sbc	r30, r20
    2a18:	f5 0b       	sbc	r31, r21

00002a1a <__udivmodsi4_ep>:
    2a1a:	66 1f       	adc	r22, r22
    2a1c:	77 1f       	adc	r23, r23
    2a1e:	88 1f       	adc	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	1a 94       	dec	r1
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <__udivmodsi4_loop>
    2a26:	60 95       	com	r22
    2a28:	70 95       	com	r23
    2a2a:	80 95       	com	r24
    2a2c:	90 95       	com	r25
    2a2e:	9b 01       	movw	r18, r22
    2a30:	ac 01       	movw	r20, r24
    2a32:	bd 01       	movw	r22, r26
    2a34:	cf 01       	movw	r24, r30
    2a36:	08 95       	ret

00002a38 <__prologue_saves__>:
    2a38:	2f 92       	push	r2
    2a3a:	3f 92       	push	r3
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	ca 1b       	sub	r28, r26
    2a62:	db 0b       	sbc	r29, r27
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	09 94       	ijmp

00002a70 <__epilogue_restores__>:
    2a70:	2a 88       	ldd	r2, Y+18	; 0x12
    2a72:	39 88       	ldd	r3, Y+17	; 0x11
    2a74:	48 88       	ldd	r4, Y+16	; 0x10
    2a76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a82:	b9 84       	ldd	r11, Y+9	; 0x09
    2a84:	c8 84       	ldd	r12, Y+8	; 0x08
    2a86:	df 80       	ldd	r13, Y+7	; 0x07
    2a88:	ee 80       	ldd	r14, Y+6	; 0x06
    2a8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a90:	aa 81       	ldd	r26, Y+2	; 0x02
    2a92:	b9 81       	ldd	r27, Y+1	; 0x01
    2a94:	ce 0f       	add	r28, r30
    2a96:	d1 1d       	adc	r29, r1
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	ed 01       	movw	r28, r26
    2aa4:	08 95       	ret

00002aa6 <itoa>:
    2aa6:	fb 01       	movw	r30, r22
    2aa8:	9f 01       	movw	r18, r30
    2aaa:	e8 94       	clt
    2aac:	42 30       	cpi	r20, 0x02	; 2
    2aae:	c4 f0       	brlt	.+48     	; 0x2ae0 <itoa+0x3a>
    2ab0:	45 32       	cpi	r20, 0x25	; 37
    2ab2:	b4 f4       	brge	.+44     	; 0x2ae0 <itoa+0x3a>
    2ab4:	4a 30       	cpi	r20, 0x0A	; 10
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <itoa+0x1c>
    2ab8:	97 fb       	bst	r25, 7
    2aba:	1e f4       	brtc	.+6      	; 0x2ac2 <itoa+0x1c>
    2abc:	90 95       	com	r25
    2abe:	81 95       	neg	r24
    2ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac2:	64 2f       	mov	r22, r20
    2ac4:	77 27       	eor	r23, r23
    2ac6:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__udivmodhi4>
    2aca:	80 5d       	subi	r24, 0xD0	; 208
    2acc:	8a 33       	cpi	r24, 0x3A	; 58
    2ace:	0c f0       	brlt	.+2      	; 0x2ad2 <itoa+0x2c>
    2ad0:	89 5d       	subi	r24, 0xD9	; 217
    2ad2:	81 93       	st	Z+, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	a1 f7       	brne	.-24     	; 0x2ac2 <itoa+0x1c>
    2ada:	16 f4       	brtc	.+4      	; 0x2ae0 <itoa+0x3a>
    2adc:	5d e2       	ldi	r21, 0x2D	; 45
    2ade:	51 93       	st	Z+, r21
    2ae0:	10 82       	st	Z, r1
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <strrev>

00002ae8 <strrev>:
    2ae8:	dc 01       	movw	r26, r24
    2aea:	fc 01       	movw	r30, r24
    2aec:	67 2f       	mov	r22, r23
    2aee:	71 91       	ld	r23, Z+
    2af0:	77 23       	and	r23, r23
    2af2:	e1 f7       	brne	.-8      	; 0x2aec <strrev+0x4>
    2af4:	32 97       	sbiw	r30, 0x02	; 2
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <strrev+0x18>
    2af8:	7c 91       	ld	r23, X
    2afa:	6d 93       	st	X+, r22
    2afc:	70 83       	st	Z, r23
    2afe:	62 91       	ld	r22, -Z
    2b00:	ae 17       	cp	r26, r30
    2b02:	bf 07       	cpc	r27, r31
    2b04:	c8 f3       	brcs	.-14     	; 0x2af8 <strrev+0x10>
    2b06:	08 95       	ret

00002b08 <__udivmodhi4>:
    2b08:	aa 1b       	sub	r26, r26
    2b0a:	bb 1b       	sub	r27, r27
    2b0c:	51 e1       	ldi	r21, 0x11	; 17
    2b0e:	07 c0       	rjmp	.+14     	; 0x2b1e <__udivmodhi4_ep>

00002b10 <__udivmodhi4_loop>:
    2b10:	aa 1f       	adc	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	a6 17       	cp	r26, r22
    2b16:	b7 07       	cpc	r27, r23
    2b18:	10 f0       	brcs	.+4      	; 0x2b1e <__udivmodhi4_ep>
    2b1a:	a6 1b       	sub	r26, r22
    2b1c:	b7 0b       	sbc	r27, r23

00002b1e <__udivmodhi4_ep>:
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	5a 95       	dec	r21
    2b24:	a9 f7       	brne	.-22     	; 0x2b10 <__udivmodhi4_loop>
    2b26:	80 95       	com	r24
    2b28:	90 95       	com	r25
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	08 95       	ret

00002b30 <_exit>:
    2b30:	f8 94       	cli

00002b32 <__stop_program>:
    2b32:	ff cf       	rjmp	.-2      	; 0x2b32 <__stop_program>
