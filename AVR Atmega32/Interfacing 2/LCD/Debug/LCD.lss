
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000278e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000278e  00002802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001998  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b67  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000889c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000089fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 c5 13 	jmp	0x278a	; 0x278a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
 *      Author: Mohamed Newir
 *
 */


int main(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62

	return 0;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <LCD_init>:

/*
 * function purpose is to initialize LCD: pin direction
 *  , setup lcd data mode 4-bits or 8-bits
 */
void LCD_init(void){
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	2e 97       	sbiw	r28, 0x0e	; 14
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 ea       	ldi	r26, 0xA0	; 160
     b76:	b1 e4       	ldi	r27, 0x41	; 65
     b78:	8b 87       	std	Y+11, r24	; 0x0b
     b7a:	9c 87       	std	Y+12, r25	; 0x0c
     b7c:	ad 87       	std	Y+13, r26	; 0x0d
     b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6b 85       	ldd	r22, Y+11	; 0x0b
     b82:	7c 85       	ldd	r23, Y+12	; 0x0c
     b84:	8d 85       	ldd	r24, Y+13	; 0x0d
     b86:	9e 85       	ldd	r25, Y+14	; 0x0e
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a e7       	ldi	r20, 0x7A	; 122
     b8e:	55 e4       	ldi	r21, 0x45	; 69
     b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8f 83       	std	Y+7, r24	; 0x07
     b9a:	98 87       	std	Y+8, r25	; 0x08
     b9c:	a9 87       	std	Y+9, r26	; 0x09
     b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba0:	6f 81       	ldd	r22, Y+7	; 0x07
     ba2:	78 85       	ldd	r23, Y+8	; 0x08
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <LCD_init+0x7a>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9e 83       	std	Y+6, r25	; 0x06
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <LCD_init+0xf8>
	else if (__tmp > 65535)
     bc2:	6f 81       	ldd	r22, Y+7	; 0x07
     bc4:	78 85       	ldd	r23, Y+8	; 0x08
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6b 85       	ldd	r22, Y+11	; 0x0b
     bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bde:	8d 85       	ldd	r24, Y+13	; 0x0d
     be0:	9e 85       	ldd	r25, Y+14	; 0x0e
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	9e 83       	std	Y+6, r25	; 0x06
     c00:	8d 83       	std	Y+5, r24	; 0x05
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <LCD_init+0xda>
     c04:	80 e9       	ldi	r24, 0x90	; 144
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_init+0xc8>
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <LCD_init+0xbc>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	6f 81       	ldd	r22, Y+7	; 0x07
     c2e:	78 85       	ldd	r23, Y+8	; 0x08
     c30:	89 85       	ldd	r24, Y+9	; 0x09
     c32:	9a 85       	ldd	r25, Y+10	; 0x0a
     c34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	9e 83       	std	Y+6, r25	; 0x06
     c3e:	8d 83       	std	Y+5, r24	; 0x05
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	9e 81       	ldd	r25, Y+6	; 0x06
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <LCD_init+0x104>
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4_PIN_ID,PIN_OUTPUT);
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	63 e0       	ldi	r22, 0x03	; 3
     c58:	41 e0       	ldi	r20, 0x01	; 1
     c5a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5_PIN_ID,PIN_OUTPUT);
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6_PIN_ID,PIN_OUTPUT);
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	65 e0       	ldi	r22, 0x05	; 5
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7_PIN_ID,PIN_OUTPUT);
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	66 e0       	ldi	r22, 0x06	; 6
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT1);
     c7c:	83 e3       	ldi	r24, 0x33	; 51
     c7e:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE_INT2);
     c82:	82 e3       	ldi	r24, 0x32	; 50
     c84:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_4_BITS_MODE);
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_8_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
     c8e:	8c e0       	ldi	r24, 0x0C	; 12
     c90:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>

}
     c9a:	2e 96       	adiw	r28, 0x0e	; 14
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <LCD_sendCommand>:

/*
 * function purpose is to send commands to LCD
 */
void LCD_sendCommand(uint8 command){
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	c3 56       	subi	r28, 0x63	; 99
     cba:	d0 40       	sbci	r29, 0x00	; 0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	fe 01       	movw	r30, r28
     cc8:	ed 59       	subi	r30, 0x9D	; 157
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOW);
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	64 e0       	ldi	r22, 0x04	; 4
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
     cd8:	fe 01       	movw	r30, r28
     cda:	e1 5a       	subi	r30, 0xA1	; 161
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a0 e8       	ldi	r26, 0x80	; 128
     ce4:	bf e3       	ldi	r27, 0x3F	; 63
     ce6:	80 83       	st	Z, r24
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	a2 83       	std	Z+2, r26	; 0x02
     cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cee:	8e 01       	movw	r16, r28
     cf0:	05 5a       	subi	r16, 0xA5	; 165
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	fe 01       	movw	r30, r28
     cf6:	e1 5a       	subi	r30, 0xA1	; 161
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a e7       	ldi	r20, 0x7A	; 122
     d08:	55 e4       	ldi	r21, 0x45	; 69
     d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	f8 01       	movw	r30, r16
     d14:	80 83       	st	Z, r24
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	a2 83       	std	Z+2, r26	; 0x02
     d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d1c:	fe 01       	movw	r30, r28
     d1e:	e5 5a       	subi	r30, 0xA5	; 165
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	44 f4       	brge	.+16     	; 0xd4a <LCD_sendCommand+0x9e>
		__ticks = 1;
     d3a:	fe 01       	movw	r30, r28
     d3c:	e7 5a       	subi	r30, 0xA7	; 167
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	64 c0       	rjmp	.+200    	; 0xe12 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5a       	subi	r30, 0xA5	; 165
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d64:	18 16       	cp	r1, r24
     d66:	0c f0       	brlt	.+2      	; 0xd6a <LCD_sendCommand+0xbe>
     d68:	43 c0       	rjmp	.+134    	; 0xdf0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	fe 01       	movw	r30, r28
     d6c:	e1 5a       	subi	r30, 0xA1	; 161
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e2       	ldi	r20, 0x20	; 32
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8e 01       	movw	r16, r28
     d8a:	07 5a       	subi	r16, 0xA7	; 167
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	f8 01       	movw	r30, r16
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <LCD_sendCommand+0x134>
     da2:	fe 01       	movw	r30, r28
     da4:	e9 5a       	subi	r30, 0xA9	; 169
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	80 e9       	ldi	r24, 0x90	; 144
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
     db0:	fe 01       	movw	r30, r28
     db2:	e9 5a       	subi	r30, 0xA9	; 169
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <LCD_sendCommand+0x10e>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e9 5a       	subi	r30, 0xA9	; 169
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc8:	de 01       	movw	r26, r28
     dca:	a7 5a       	subi	r26, 0xA7	; 167
     dcc:	bf 4f       	sbci	r27, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 5a       	subi	r30, 0xA7	; 167
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	9c 93       	st	X, r25
     dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	fe 01       	movw	r30, r28
     de2:	e7 5a       	subi	r30, 0xA7	; 167
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	d1 f6       	brne	.-76     	; 0xda2 <LCD_sendCommand+0xf6>
     dee:	27 c0       	rjmp	.+78     	; 0xe3e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	8e 01       	movw	r16, r28
     df2:	07 5a       	subi	r16, 0xA7	; 167
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	fe 01       	movw	r30, r28
     df8:	e5 5a       	subi	r30, 0xA5	; 165
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	de 01       	movw	r26, r28
     e14:	ab 5a       	subi	r26, 0xAB	; 171
     e16:	bf 4f       	sbci	r27, 0xFF	; 255
     e18:	fe 01       	movw	r30, r28
     e1a:	e7 5a       	subi	r30, 0xA7	; 167
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	8d 93       	st	X+, r24
     e24:	9c 93       	st	X, r25
     e26:	fe 01       	movw	r30, r28
     e28:	eb 5a       	subi	r30, 0xAB	; 171
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <LCD_sendCommand+0x184>
     e34:	fe 01       	movw	r30, r28
     e36:	eb 5a       	subi	r30, 0xAB	; 171
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	65 e0       	ldi	r22, 0x05	; 5
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
     e48:	fe 01       	movw	r30, r28
     e4a:	ef 5a       	subi	r30, 0xAF	; 175
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e8       	ldi	r26, 0x80	; 128
     e54:	bf e3       	ldi	r27, 0x3F	; 63
     e56:	80 83       	st	Z, r24
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	a2 83       	std	Z+2, r26	; 0x02
     e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	8e 01       	movw	r16, r28
     e60:	03 5b       	subi	r16, 0xB3	; 179
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	fe 01       	movw	r30, r28
     e66:	ef 5a       	subi	r30, 0xAF	; 175
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a e7       	ldi	r20, 0x7A	; 122
     e78:	55 e4       	ldi	r21, 0x45	; 69
     e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8c:	fe 01       	movw	r30, r28
     e8e:	e3 5b       	subi	r30, 0xB3	; 179
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e8       	ldi	r20, 0x80	; 128
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	44 f4       	brge	.+16     	; 0xeba <LCD_sendCommand+0x20e>
		__ticks = 1;
     eaa:	fe 01       	movw	r30, r28
     eac:	e5 5b       	subi	r30, 0xB5	; 181
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
     eb8:	64 c0       	rjmp	.+200    	; 0xf82 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     eba:	fe 01       	movw	r30, r28
     ebc:	e3 5b       	subi	r30, 0xB3	; 179
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	0c f0       	brlt	.+2      	; 0xeda <LCD_sendCommand+0x22e>
     ed8:	43 c0       	rjmp	.+134    	; 0xf60 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eda:	fe 01       	movw	r30, r28
     edc:	ef 5a       	subi	r30, 0xAF	; 175
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8e 01       	movw	r16, r28
     efa:	05 5b       	subi	r16, 0xB5	; 181
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	f8 01       	movw	r30, r16
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
     f10:	1f c0       	rjmp	.+62     	; 0xf50 <LCD_sendCommand+0x2a4>
     f12:	fe 01       	movw	r30, r28
     f14:	e7 5b       	subi	r30, 0xB7	; 183
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 e9       	ldi	r24, 0x90	; 144
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	80 83       	st	Z, r24
     f20:	fe 01       	movw	r30, r28
     f22:	e7 5b       	subi	r30, 0xB7	; 183
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <LCD_sendCommand+0x27e>
     f2e:	fe 01       	movw	r30, r28
     f30:	e7 5b       	subi	r30, 0xB7	; 183
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	de 01       	movw	r26, r28
     f3a:	a5 5b       	subi	r26, 0xB5	; 181
     f3c:	bf 4f       	sbci	r27, 0xFF	; 255
     f3e:	fe 01       	movw	r30, r28
     f40:	e5 5b       	subi	r30, 0xB5	; 181
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	11 96       	adiw	r26, 0x01	; 1
     f4c:	9c 93       	st	X, r25
     f4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f50:	fe 01       	movw	r30, r28
     f52:	e5 5b       	subi	r30, 0xB5	; 181
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	d1 f6       	brne	.-76     	; 0xf12 <LCD_sendCommand+0x266>
     f5e:	27 c0       	rjmp	.+78     	; 0xfae <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	8e 01       	movw	r16, r28
     f62:	05 5b       	subi	r16, 0xB5	; 181
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	fe 01       	movw	r30, r28
     f68:	e3 5b       	subi	r30, 0xB3	; 179
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	f8 01       	movw	r30, r16
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
     f82:	de 01       	movw	r26, r28
     f84:	a9 5b       	subi	r26, 0xB9	; 185
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	e5 5b       	subi	r30, 0xB5	; 181
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	8d 93       	st	X+, r24
     f94:	9c 93       	st	X, r25
     f96:	fe 01       	movw	r30, r28
     f98:	e9 5b       	subi	r30, 0xB9	; 185
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <LCD_sendCommand+0x2f4>
     fa4:	fe 01       	movw	r30, r28
     fa6:	e9 5b       	subi	r30, 0xB9	; 185
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,4));
     fae:	fe 01       	movw	r30, r28
     fb0:	ed 59       	subi	r30, 0x9D	; 157
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 71       	andi	r24, 0x10	; 16
     fbc:	90 70       	andi	r25, 0x00	; 0
     fbe:	95 95       	asr	r25
     fc0:	87 95       	ror	r24
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	98 2f       	mov	r25, r24
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	49 2f       	mov	r20, r25
     fd6:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,5));
     fda:	fe 01       	movw	r30, r28
     fdc:	ed 59       	subi	r30, 0x9D	; 157
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 72       	andi	r24, 0x20	; 32
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	95 95       	asr	r25
     ff0:	87 95       	ror	r24
     ff2:	95 95       	asr	r25
     ff4:	87 95       	ror	r24
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	98 2f       	mov	r25, r24
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	49 2f       	mov	r20, r25
    1006:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,6));
    100a:	fe 01       	movw	r30, r28
    100c:	ed 59       	subi	r30, 0x9D	; 157
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	80 74       	andi	r24, 0x40	; 64
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	08 2e       	mov	r0, r24
    101c:	89 2f       	mov	r24, r25
    101e:	00 0c       	add	r0, r0
    1020:	88 1f       	adc	r24, r24
    1022:	99 0b       	sbc	r25, r25
    1024:	00 0c       	add	r0, r0
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	98 2f       	mov	r25, r24
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	65 e0       	ldi	r22, 0x05	; 5
    1030:	49 2f       	mov	r20, r25
    1032:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1036:	fe 01       	movw	r30, r28
    1038:	ed 59       	subi	r30, 0x9D	; 157
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	80 81       	ld	r24, Z
    103e:	98 2f       	mov	r25, r24
    1040:	99 1f       	adc	r25, r25
    1042:	99 27       	eor	r25, r25
    1044:	99 1f       	adc	r25, r25
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	66 e0       	ldi	r22, 0x06	; 6
    104a:	49 2f       	mov	r20, r25
    104c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1050:	fe 01       	movw	r30, r28
    1052:	ed 5b       	subi	r30, 0xBD	; 189
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e8       	ldi	r26, 0x80	; 128
    105c:	bf e3       	ldi	r27, 0x3F	; 63
    105e:	80 83       	st	Z, r24
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	a2 83       	std	Z+2, r26	; 0x02
    1064:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	8e 01       	movw	r16, r28
    1068:	01 5c       	subi	r16, 0xC1	; 193
    106a:	1f 4f       	sbci	r17, 0xFF	; 255
    106c:	fe 01       	movw	r30, r28
    106e:	ed 5b       	subi	r30, 0xBD	; 189
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a e7       	ldi	r20, 0x7A	; 122
    1080:	55 e4       	ldi	r21, 0x45	; 69
    1082:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	f8 01       	movw	r30, r16
    108c:	80 83       	st	Z, r24
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	a2 83       	std	Z+2, r26	; 0x02
    1092:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1094:	fe 01       	movw	r30, r28
    1096:	ff 96       	adiw	r30, 0x3f	; 63
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <LCD_sendCommand+0x40e>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e af       	std	Y+62, r25	; 0x3e
    10b6:	8d af       	std	Y+61, r24	; 0x3d
    10b8:	46 c0       	rjmp	.+140    	; 0x1146 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    10ba:	fe 01       	movw	r30, r28
    10bc:	ff 96       	adiw	r30, 0x3f	; 63
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	64 f5       	brge	.+88     	; 0x112e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	fe 01       	movw	r30, r28
    10d8:	ed 5b       	subi	r30, 0xBD	; 189
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e2       	ldi	r20, 0x20	; 32
    10ea:	51 e4       	ldi	r21, 0x41	; 65
    10ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9e af       	std	Y+62, r25	; 0x3e
    1102:	8d af       	std	Y+61, r24	; 0x3d
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <LCD_sendCommand+0x478>
    1106:	80 e9       	ldi	r24, 0x90	; 144
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	9c af       	std	Y+60, r25	; 0x3c
    110c:	8b af       	std	Y+59, r24	; 0x3b
    110e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1110:	9c ad       	ldd	r25, Y+60	; 0x3c
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCD_sendCommand+0x466>
    1116:	9c af       	std	Y+60, r25	; 0x3c
    1118:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111a:	8d ad       	ldd	r24, Y+61	; 0x3d
    111c:	9e ad       	ldd	r25, Y+62	; 0x3e
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9e af       	std	Y+62, r25	; 0x3e
    1122:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1124:	8d ad       	ldd	r24, Y+61	; 0x3d
    1126:	9e ad       	ldd	r25, Y+62	; 0x3e
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	69 f7       	brne	.-38     	; 0x1106 <LCD_sendCommand+0x45a>
    112c:	16 c0       	rjmp	.+44     	; 0x115a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	fe 01       	movw	r30, r28
    1130:	ff 96       	adiw	r30, 0x3f	; 63
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e af       	std	Y+62, r25	; 0x3e
    1144:	8d af       	std	Y+61, r24	; 0x3d
    1146:	8d ad       	ldd	r24, Y+61	; 0x3d
    1148:	9e ad       	ldd	r25, Y+62	; 0x3e
    114a:	9a af       	std	Y+58, r25	; 0x3a
    114c:	89 af       	std	Y+57, r24	; 0x39
    114e:	89 ad       	ldd	r24, Y+57	; 0x39
    1150:	9a ad       	ldd	r25, Y+58	; 0x3a
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <LCD_sendCommand+0x4a6>
    1156:	9a af       	std	Y+58, r25	; 0x3a
    1158:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	65 e0       	ldi	r22, 0x05	; 5
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a0 e8       	ldi	r26, 0x80	; 128
    116a:	bf e3       	ldi	r27, 0x3F	; 63
    116c:	8d ab       	std	Y+53, r24	; 0x35
    116e:	9e ab       	std	Y+54, r25	; 0x36
    1170:	af ab       	std	Y+55, r26	; 0x37
    1172:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1174:	6d a9       	ldd	r22, Y+53	; 0x35
    1176:	7e a9       	ldd	r23, Y+54	; 0x36
    1178:	8f a9       	ldd	r24, Y+55	; 0x37
    117a:	98 ad       	ldd	r25, Y+56	; 0x38
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4a e7       	ldi	r20, 0x7A	; 122
    1182:	55 e4       	ldi	r21, 0x45	; 69
    1184:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	89 ab       	std	Y+49, r24	; 0x31
    118e:	9a ab       	std	Y+50, r25	; 0x32
    1190:	ab ab       	std	Y+51, r26	; 0x33
    1192:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1194:	69 a9       	ldd	r22, Y+49	; 0x31
    1196:	7a a9       	ldd	r23, Y+50	; 0x32
    1198:	8b a9       	ldd	r24, Y+51	; 0x33
    119a:	9c a9       	ldd	r25, Y+52	; 0x34
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11a8:	88 23       	and	r24, r24
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	98 ab       	std	Y+48, r25	; 0x30
    11b2:	8f a7       	std	Y+47, r24	; 0x2f
    11b4:	3f c0       	rjmp	.+126    	; 0x1234 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    11b6:	69 a9       	ldd	r22, Y+49	; 0x31
    11b8:	7a a9       	ldd	r23, Y+50	; 0x32
    11ba:	8b a9       	ldd	r24, Y+51	; 0x33
    11bc:	9c a9       	ldd	r25, Y+52	; 0x34
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	3f ef       	ldi	r19, 0xFF	; 255
    11c2:	4f e7       	ldi	r20, 0x7F	; 127
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11ca:	18 16       	cp	r1, r24
    11cc:	4c f5       	brge	.+82     	; 0x1220 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	6d a9       	ldd	r22, Y+53	; 0x35
    11d0:	7e a9       	ldd	r23, Y+54	; 0x36
    11d2:	8f a9       	ldd	r24, Y+55	; 0x37
    11d4:	98 ad       	ldd	r25, Y+56	; 0x38
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	98 ab       	std	Y+48, r25	; 0x30
    11f4:	8f a7       	std	Y+47, r24	; 0x2f
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <LCD_sendCommand+0x56a>
    11f8:	80 e9       	ldi	r24, 0x90	; 144
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	9e a7       	std	Y+46, r25	; 0x2e
    11fe:	8d a7       	std	Y+45, r24	; 0x2d
    1200:	8d a5       	ldd	r24, Y+45	; 0x2d
    1202:	9e a5       	ldd	r25, Y+46	; 0x2e
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_sendCommand+0x558>
    1208:	9e a7       	std	Y+46, r25	; 0x2e
    120a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	8f a5       	ldd	r24, Y+47	; 0x2f
    120e:	98 a9       	ldd	r25, Y+48	; 0x30
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	98 ab       	std	Y+48, r25	; 0x30
    1214:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	8f a5       	ldd	r24, Y+47	; 0x2f
    1218:	98 a9       	ldd	r25, Y+48	; 0x30
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	69 f7       	brne	.-38     	; 0x11f8 <LCD_sendCommand+0x54c>
    121e:	14 c0       	rjmp	.+40     	; 0x1248 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	69 a9       	ldd	r22, Y+49	; 0x31
    1222:	7a a9       	ldd	r23, Y+50	; 0x32
    1224:	8b a9       	ldd	r24, Y+51	; 0x33
    1226:	9c a9       	ldd	r25, Y+52	; 0x34
    1228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	8f a5       	ldd	r24, Y+47	; 0x2f
    1236:	98 a9       	ldd	r25, Y+48	; 0x30
    1238:	9c a7       	std	Y+44, r25	; 0x2c
    123a:	8b a7       	std	Y+43, r24	; 0x2b
    123c:	8b a5       	ldd	r24, Y+43	; 0x2b
    123e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <LCD_sendCommand+0x594>
    1244:	9c a7       	std	Y+44, r25	; 0x2c
    1246:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	65 e0       	ldi	r22, 0x05	; 5
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e8       	ldi	r26, 0x80	; 128
    1258:	bf e3       	ldi	r27, 0x3F	; 63
    125a:	8f a3       	std	Y+39, r24	; 0x27
    125c:	98 a7       	std	Y+40, r25	; 0x28
    125e:	a9 a7       	std	Y+41, r26	; 0x29
    1260:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	6f a1       	ldd	r22, Y+39	; 0x27
    1264:	78 a5       	ldd	r23, Y+40	; 0x28
    1266:	89 a5       	ldd	r24, Y+41	; 0x29
    1268:	9a a5       	ldd	r25, Y+42	; 0x2a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a e7       	ldi	r20, 0x7A	; 122
    1270:	55 e4       	ldi	r21, 0x45	; 69
    1272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8b a3       	std	Y+35, r24	; 0x23
    127c:	9c a3       	std	Y+36, r25	; 0x24
    127e:	ad a3       	std	Y+37, r26	; 0x25
    1280:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1282:	6b a1       	ldd	r22, Y+35	; 0x23
    1284:	7c a1       	ldd	r23, Y+36	; 0x24
    1286:	8d a1       	ldd	r24, Y+37	; 0x25
    1288:	9e a1       	ldd	r25, Y+38	; 0x26
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9a a3       	std	Y+34, r25	; 0x22
    12a0:	89 a3       	std	Y+33, r24	; 0x21
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    12a4:	6b a1       	ldd	r22, Y+35	; 0x23
    12a6:	7c a1       	ldd	r23, Y+36	; 0x24
    12a8:	8d a1       	ldd	r24, Y+37	; 0x25
    12aa:	9e a1       	ldd	r25, Y+38	; 0x26
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <LCD_sendCommand+0x658>
    12e6:	80 e9       	ldi	r24, 0x90	; 144
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	98 a3       	std	Y+32, r25	; 0x20
    12ec:	8f 8f       	std	Y+31, r24	; 0x1f
    12ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f0:	98 a1       	ldd	r25, Y+32	; 0x20
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_sendCommand+0x646>
    12f6:	98 a3       	std	Y+32, r25	; 0x20
    12f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	89 a1       	ldd	r24, Y+33	; 0x21
    12fc:	9a a1       	ldd	r25, Y+34	; 0x22
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	89 a1       	ldd	r24, Y+33	; 0x21
    1306:	9a a1       	ldd	r25, Y+34	; 0x22
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <LCD_sendCommand+0x63a>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6b a1       	ldd	r22, Y+35	; 0x23
    1310:	7c a1       	ldd	r23, Y+36	; 0x24
    1312:	8d a1       	ldd	r24, Y+37	; 0x25
    1314:	9e a1       	ldd	r25, Y+38	; 0x26
    1316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	89 a1       	ldd	r24, Y+33	; 0x21
    1324:	9a a1       	ldd	r25, Y+34	; 0x22
    1326:	9e 8f       	std	Y+30, r25	; 0x1e
    1328:	8d 8f       	std	Y+29, r24	; 0x1d
    132a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_sendCommand+0x682>
    1332:	9e 8f       	std	Y+30, r25	; 0x1e
    1334:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1336:	fe 01       	movw	r30, r28
    1338:	ed 59       	subi	r30, 0x9D	; 157
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 81       	ld	r24, Z
    133e:	98 2f       	mov	r25, r24
    1340:	91 70       	andi	r25, 0x01	; 1
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	63 e0       	ldi	r22, 0x03	; 3
    1346:	49 2f       	mov	r20, r25
    1348:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(command,1));
    134c:	fe 01       	movw	r30, r28
    134e:	ed 59       	subi	r30, 0x9D	; 157
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	82 70       	andi	r24, 0x02	; 2
    135a:	90 70       	andi	r25, 0x00	; 0
    135c:	95 95       	asr	r25
    135e:	87 95       	ror	r24
    1360:	98 2f       	mov	r25, r24
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	49 2f       	mov	r20, r25
    1368:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
    136c:	fe 01       	movw	r30, r28
    136e:	ed 59       	subi	r30, 0x9D	; 157
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 81       	ld	r24, Z
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	84 70       	andi	r24, 0x04	; 4
    137a:	90 70       	andi	r25, 0x00	; 0
    137c:	95 95       	asr	r25
    137e:	87 95       	ror	r24
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	98 2f       	mov	r25, r24
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	65 e0       	ldi	r22, 0x05	; 5
    138a:	49 2f       	mov	r20, r25
    138c:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1390:	fe 01       	movw	r30, r28
    1392:	ed 59       	subi	r30, 0x9D	; 157
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	88 70       	andi	r24, 0x08	; 8
    139e:	90 70       	andi	r25, 0x00	; 0
    13a0:	95 95       	asr	r25
    13a2:	87 95       	ror	r24
    13a4:	95 95       	asr	r25
    13a6:	87 95       	ror	r24
    13a8:	95 95       	asr	r25
    13aa:	87 95       	ror	r24
    13ac:	98 2f       	mov	r25, r24
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	66 e0       	ldi	r22, 0x06	; 6
    13b2:	49 2f       	mov	r20, r25
    13b4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e8       	ldi	r26, 0x80	; 128
    13be:	bf e3       	ldi	r27, 0x3F	; 63
    13c0:	89 8f       	std	Y+25, r24	; 0x19
    13c2:	9a 8f       	std	Y+26, r25	; 0x1a
    13c4:	ab 8f       	std	Y+27, r26	; 0x1b
    13c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8d 8b       	std	Y+21, r24	; 0x15
    13e2:	9e 8b       	std	Y+22, r25	; 0x16
    13e4:	af 8b       	std	Y+23, r26	; 0x17
    13e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ea:	7e 89       	ldd	r23, Y+22	; 0x16
    13ec:	8f 89       	ldd	r24, Y+23	; 0x17
    13ee:	98 8d       	ldd	r25, Y+24	; 0x18
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_sendCommand+0x75e>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    140a:	6d 89       	ldd	r22, Y+21	; 0x15
    140c:	7e 89       	ldd	r23, Y+22	; 0x16
    140e:	8f 89       	ldd	r24, Y+23	; 0x17
    1410:	98 8d       	ldd	r25, Y+24	; 0x18
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	69 8d       	ldd	r22, Y+25	; 0x19
    1424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_sendCommand+0x7be>
    144c:	80 e9       	ldi	r24, 0x90	; 144
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9a 8b       	std	Y+18, r25	; 0x12
    1452:	89 8b       	std	Y+17, r24	; 0x11
    1454:	89 89       	ldd	r24, Y+17	; 0x11
    1456:	9a 89       	ldd	r25, Y+18	; 0x12
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_sendCommand+0x7ac>
    145c:	9a 8b       	std	Y+18, r25	; 0x12
    145e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9c 8b       	std	Y+20, r25	; 0x14
    1468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_sendCommand+0x7a0>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6d 89       	ldd	r22, Y+21	; 0x15
    1476:	7e 89       	ldd	r23, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9c 8b       	std	Y+20, r25	; 0x14
    1486:	8b 8b       	std	Y+19, r24	; 0x13
    1488:	8b 89       	ldd	r24, Y+19	; 0x13
    148a:	9c 89       	ldd	r25, Y+20	; 0x14
    148c:	98 8b       	std	Y+16, r25	; 0x10
    148e:	8f 87       	std	Y+15, r24	; 0x0f
    1490:	8f 85       	ldd	r24, Y+15	; 0x0f
    1492:	98 89       	ldd	r25, Y+16	; 0x10
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_sendCommand+0x7e8>
    1498:	98 8b       	std	Y+16, r25	; 0x10
    149a:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writePort(LCD_DATA_PORT,command);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	65 e0       	ldi	r22, 0x05	; 5
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a0 e8       	ldi	r26, 0x80	; 128
    14ac:	bf e3       	ldi	r27, 0x3F	; 63
    14ae:	8b 87       	std	Y+11, r24	; 0x0b
    14b0:	9c 87       	std	Y+12, r25	; 0x0c
    14b2:	ad 87       	std	Y+13, r26	; 0x0d
    14b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    14bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	55 e4       	ldi	r21, 0x45	; 69
    14c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	8f 83       	std	Y+7, r24	; 0x07
    14d0:	98 87       	std	Y+8, r25	; 0x08
    14d2:	a9 87       	std	Y+9, r26	; 0x09
    14d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d6:	6f 81       	ldd	r22, Y+7	; 0x07
    14d8:	78 85       	ldd	r23, Y+8	; 0x08
    14da:	89 85       	ldd	r24, Y+9	; 0x09
    14dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14ea:	88 23       	and	r24, r24
    14ec:	2c f4       	brge	.+10     	; 0x14f8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	3f c0       	rjmp	.+126    	; 0x1576 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    14f8:	6f 81       	ldd	r22, Y+7	; 0x07
    14fa:	78 85       	ldd	r23, Y+8	; 0x08
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	3f ef       	ldi	r19, 0xFF	; 255
    1504:	4f e7       	ldi	r20, 0x7F	; 127
    1506:	57 e4       	ldi	r21, 0x47	; 71
    1508:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    150c:	18 16       	cp	r1, r24
    150e:	4c f5       	brge	.+82     	; 0x1562 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1510:	6b 85       	ldd	r22, Y+11	; 0x0b
    1512:	7c 85       	ldd	r23, Y+12	; 0x0c
    1514:	8d 85       	ldd	r24, Y+13	; 0x0d
    1516:	9e 85       	ldd	r25, Y+14	; 0x0e
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e2       	ldi	r20, 0x20	; 32
    151e:	51 e4       	ldi	r21, 0x41	; 65
    1520:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	0f c0       	rjmp	.+30     	; 0x1558 <LCD_sendCommand+0x8ac>
    153a:	80 e9       	ldi	r24, 0x90	; 144
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <LCD_sendCommand+0x89a>
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	69 f7       	brne	.-38     	; 0x153a <LCD_sendCommand+0x88e>
    1560:	14 c0       	rjmp	.+40     	; 0x158a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1562:	6f 81       	ldd	r22, Y+7	; 0x07
    1564:	78 85       	ldd	r23, Y+8	; 0x08
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_sendCommand+0x8d6>
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    158a:	cd 59       	subi	r28, 0x9D	; 157
    158c:	df 4f       	sbci	r29, 0xFF	; 255
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <LCD_displayChar>:

/*
 * function purpose is to display single char on LCD
 */
void LCD_displayChar(uint8 character){
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	c3 56       	subi	r28, 0x63	; 99
    15b0:	d0 40       	sbci	r29, 0x00	; 0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	fe 01       	movw	r30, r28
    15be:	ed 59       	subi	r30, 0x9D	; 157
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,HIGH);
    15c4:	83 e0       	ldi	r24, 0x03	; 3
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e1 5a       	subi	r30, 0xA1	; 161
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 e8       	ldi	r26, 0x80	; 128
    15da:	bf e3       	ldi	r27, 0x3F	; 63
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	8e 01       	movw	r16, r28
    15e6:	05 5a       	subi	r16, 0xA5	; 165
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	fe 01       	movw	r30, r28
    15ec:	e1 5a       	subi	r30, 0xA1	; 161
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	55 e4       	ldi	r21, 0x45	; 69
    1600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1612:	fe 01       	movw	r30, r28
    1614:	e5 5a       	subi	r30, 0xA5	; 165
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	44 f4       	brge	.+16     	; 0x1640 <LCD_displayChar+0x9e>
		__ticks = 1;
    1630:	fe 01       	movw	r30, r28
    1632:	e7 5a       	subi	r30, 0xA7	; 167
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	64 c0       	rjmp	.+200    	; 0x1708 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    1640:	fe 01       	movw	r30, r28
    1642:	e5 5a       	subi	r30, 0xA5	; 165
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	0c f0       	brlt	.+2      	; 0x1660 <LCD_displayChar+0xbe>
    165e:	43 c0       	rjmp	.+134    	; 0x16e6 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	fe 01       	movw	r30, r28
    1662:	e1 5a       	subi	r30, 0xA1	; 161
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8e 01       	movw	r16, r28
    1680:	07 5a       	subi	r16, 0xA7	; 167
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	1f c0       	rjmp	.+62     	; 0x16d6 <LCD_displayChar+0x134>
    1698:	fe 01       	movw	r30, r28
    169a:	e9 5a       	subi	r30, 0xA9	; 169
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 e9       	ldi	r24, 0x90	; 144
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	fe 01       	movw	r30, r28
    16a8:	e9 5a       	subi	r30, 0xA9	; 169
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_displayChar+0x10e>
    16b4:	fe 01       	movw	r30, r28
    16b6:	e9 5a       	subi	r30, 0xA9	; 169
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	de 01       	movw	r26, r28
    16c0:	a7 5a       	subi	r26, 0xA7	; 167
    16c2:	bf 4f       	sbci	r27, 0xFF	; 255
    16c4:	fe 01       	movw	r30, r28
    16c6:	e7 5a       	subi	r30, 0xA7	; 167
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	11 96       	adiw	r26, 0x01	; 1
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	fe 01       	movw	r30, r28
    16d8:	e7 5a       	subi	r30, 0xA7	; 167
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	d1 f6       	brne	.-76     	; 0x1698 <LCD_displayChar+0xf6>
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e6:	8e 01       	movw	r16, r28
    16e8:	07 5a       	subi	r16, 0xA7	; 167
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5a       	subi	r30, 0xA5	; 165
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	de 01       	movw	r26, r28
    170a:	ab 5a       	subi	r26, 0xAB	; 171
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	8d 93       	st	X+, r24
    171a:	9c 93       	st	X, r25
    171c:	fe 01       	movw	r30, r28
    171e:	eb 5a       	subi	r30, 0xAB	; 171
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_displayChar+0x184>
    172a:	fe 01       	movw	r30, r28
    172c:	eb 5a       	subi	r30, 0xAB	; 171
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    173e:	fe 01       	movw	r30, r28
    1740:	ef 5a       	subi	r30, 0xAF	; 175
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e8       	ldi	r26, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	80 83       	st	Z, r24
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	a2 83       	std	Z+2, r26	; 0x02
    1752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	8e 01       	movw	r16, r28
    1756:	03 5b       	subi	r16, 0xB3	; 179
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	ef 5a       	subi	r30, 0xAF	; 175
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a e7       	ldi	r20, 0x7A	; 122
    176e:	55 e4       	ldi	r21, 0x45	; 69
    1770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1782:	fe 01       	movw	r30, r28
    1784:	e3 5b       	subi	r30, 0xB3	; 179
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	44 f4       	brge	.+16     	; 0x17b0 <LCD_displayChar+0x20e>
		__ticks = 1;
    17a0:	fe 01       	movw	r30, r28
    17a2:	e5 5b       	subi	r30, 0xB5	; 181
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	64 c0       	rjmp	.+200    	; 0x1878 <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    17b0:	fe 01       	movw	r30, r28
    17b2:	e3 5b       	subi	r30, 0xB3	; 179
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <LCD_displayChar+0x22e>
    17ce:	43 c0       	rjmp	.+134    	; 0x1856 <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	fe 01       	movw	r30, r28
    17d2:	ef 5a       	subi	r30, 0xAF	; 175
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8e 01       	movw	r16, r28
    17f0:	05 5b       	subi	r16, 0xB5	; 181
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	f8 01       	movw	r30, r16
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
    1806:	1f c0       	rjmp	.+62     	; 0x1846 <LCD_displayChar+0x2a4>
    1808:	fe 01       	movw	r30, r28
    180a:	e7 5b       	subi	r30, 0xB7	; 183
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 e9       	ldi	r24, 0x90	; 144
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	fe 01       	movw	r30, r28
    1818:	e7 5b       	subi	r30, 0xB7	; 183
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_displayChar+0x27e>
    1824:	fe 01       	movw	r30, r28
    1826:	e7 5b       	subi	r30, 0xB7	; 183
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	de 01       	movw	r26, r28
    1830:	a5 5b       	subi	r26, 0xB5	; 181
    1832:	bf 4f       	sbci	r27, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	e5 5b       	subi	r30, 0xB5	; 181
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	fe 01       	movw	r30, r28
    1848:	e5 5b       	subi	r30, 0xB5	; 181
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	d1 f6       	brne	.-76     	; 0x1808 <LCD_displayChar+0x266>
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	8e 01       	movw	r16, r28
    1858:	05 5b       	subi	r16, 0xB5	; 181
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e3 5b       	subi	r30, 0xB3	; 179
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	de 01       	movw	r26, r28
    187a:	a9 5b       	subi	r26, 0xB9	; 185
    187c:	bf 4f       	sbci	r27, 0xFF	; 255
    187e:	fe 01       	movw	r30, r28
    1880:	e5 5b       	subi	r30, 0xB5	; 181
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	8d 93       	st	X+, r24
    188a:	9c 93       	st	X, r25
    188c:	fe 01       	movw	r30, r28
    188e:	e9 5b       	subi	r30, 0xB9	; 185
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_displayChar+0x2f4>
    189a:	fe 01       	movw	r30, r28
    189c:	e9 5b       	subi	r30, 0xB9	; 185
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	80 83       	st	Z, r24
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,4));
    18a4:	fe 01       	movw	r30, r28
    18a6:	ed 59       	subi	r30, 0x9D	; 157
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	80 71       	andi	r24, 0x10	; 16
    18b2:	90 70       	andi	r25, 0x00	; 0
    18b4:	95 95       	asr	r25
    18b6:	87 95       	ror	r24
    18b8:	95 95       	asr	r25
    18ba:	87 95       	ror	r24
    18bc:	95 95       	asr	r25
    18be:	87 95       	ror	r24
    18c0:	95 95       	asr	r25
    18c2:	87 95       	ror	r24
    18c4:	98 2f       	mov	r25, r24
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	63 e0       	ldi	r22, 0x03	; 3
    18ca:	49 2f       	mov	r20, r25
    18cc:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,5));
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 59       	subi	r30, 0x9D	; 157
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	80 72       	andi	r24, 0x20	; 32
    18de:	90 70       	andi	r25, 0x00	; 0
    18e0:	95 95       	asr	r25
    18e2:	87 95       	ror	r24
    18e4:	95 95       	asr	r25
    18e6:	87 95       	ror	r24
    18e8:	95 95       	asr	r25
    18ea:	87 95       	ror	r24
    18ec:	95 95       	asr	r25
    18ee:	87 95       	ror	r24
    18f0:	95 95       	asr	r25
    18f2:	87 95       	ror	r24
    18f4:	98 2f       	mov	r25, r24
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	64 e0       	ldi	r22, 0x04	; 4
    18fa:	49 2f       	mov	r20, r25
    18fc:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,6));
    1900:	fe 01       	movw	r30, r28
    1902:	ed 59       	subi	r30, 0x9D	; 157
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	80 74       	andi	r24, 0x40	; 64
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	08 2e       	mov	r0, r24
    1912:	89 2f       	mov	r24, r25
    1914:	00 0c       	add	r0, r0
    1916:	88 1f       	adc	r24, r24
    1918:	99 0b       	sbc	r25, r25
    191a:	00 0c       	add	r0, r0
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	98 2f       	mov	r25, r24
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	65 e0       	ldi	r22, 0x05	; 5
    1926:	49 2f       	mov	r20, r25
    1928:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,7));
    192c:	fe 01       	movw	r30, r28
    192e:	ed 59       	subi	r30, 0x9D	; 157
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	98 2f       	mov	r25, r24
    1936:	99 1f       	adc	r25, r25
    1938:	99 27       	eor	r25, r25
    193a:	99 1f       	adc	r25, r25
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	66 e0       	ldi	r22, 0x06	; 6
    1940:	49 2f       	mov	r20, r25
    1942:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1946:	fe 01       	movw	r30, r28
    1948:	ed 5b       	subi	r30, 0xBD	; 189
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	80 83       	st	Z, r24
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	a2 83       	std	Z+2, r26	; 0x02
    195a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	8e 01       	movw	r16, r28
    195e:	01 5c       	subi	r16, 0xC1	; 193
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	fe 01       	movw	r30, r28
    1964:	ed 5b       	subi	r30, 0xBD	; 189
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	55 e4       	ldi	r21, 0x45	; 69
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	f8 01       	movw	r30, r16
    1982:	80 83       	st	Z, r24
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	a2 83       	std	Z+2, r26	; 0x02
    1988:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    198a:	fe 01       	movw	r30, r28
    198c:	ff 96       	adiw	r30, 0x3f	; 63
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <LCD_displayChar+0x40e>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e af       	std	Y+62, r25	; 0x3e
    19ac:	8d af       	std	Y+61, r24	; 0x3d
    19ae:	46 c0       	rjmp	.+140    	; 0x1a3c <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    19b0:	fe 01       	movw	r30, r28
    19b2:	ff 96       	adiw	r30, 0x3f	; 63
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	64 f5       	brge	.+88     	; 0x1a24 <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	fe 01       	movw	r30, r28
    19ce:	ed 5b       	subi	r30, 0xBD	; 189
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e af       	std	Y+62, r25	; 0x3e
    19f8:	8d af       	std	Y+61, r24	; 0x3d
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <LCD_displayChar+0x478>
    19fc:	80 e9       	ldi	r24, 0x90	; 144
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	9c af       	std	Y+60, r25	; 0x3c
    1a02:	8b af       	std	Y+59, r24	; 0x3b
    1a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a06:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_displayChar+0x466>
    1a0c:	9c af       	std	Y+60, r25	; 0x3c
    1a0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a12:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9e af       	std	Y+62, r25	; 0x3e
    1a18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <LCD_displayChar+0x45a>
    1a22:	16 c0       	rjmp	.+44     	; 0x1a50 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	fe 01       	movw	r30, r28
    1a26:	ff 96       	adiw	r30, 0x3f	; 63
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e af       	std	Y+62, r25	; 0x3e
    1a3a:	8d af       	std	Y+61, r24	; 0x3d
    1a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a40:	9a af       	std	Y+58, r25	; 0x3a
    1a42:	89 af       	std	Y+57, r24	; 0x39
    1a44:	89 ad       	ldd	r24, Y+57	; 0x39
    1a46:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_displayChar+0x4a6>
    1a4c:	9a af       	std	Y+58, r25	; 0x3a
    1a4e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	65 e0       	ldi	r22, 0x05	; 5
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e8       	ldi	r26, 0x80	; 128
    1a60:	bf e3       	ldi	r27, 0x3F	; 63
    1a62:	8d ab       	std	Y+53, r24	; 0x35
    1a64:	9e ab       	std	Y+54, r25	; 0x36
    1a66:	af ab       	std	Y+55, r26	; 0x37
    1a68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a70:	98 ad       	ldd	r25, Y+56	; 0x38
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	55 e4       	ldi	r21, 0x45	; 69
    1a7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	89 ab       	std	Y+49, r24	; 0x31
    1a84:	9a ab       	std	Y+50, r25	; 0x32
    1a86:	ab ab       	std	Y+51, r26	; 0x33
    1a88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a90:	9c a9       	ldd	r25, Y+52	; 0x34
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <LCD_displayChar+0x50a>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	98 ab       	std	Y+48, r25	; 0x30
    1aa8:	8f a7       	std	Y+47, r24	; 0x2f
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    1aac:	69 a9       	ldd	r22, Y+49	; 0x31
    1aae:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	57 e4       	ldi	r21, 0x47	; 71
    1abc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac8:	8f a9       	ldd	r24, Y+55	; 0x37
    1aca:	98 ad       	ldd	r25, Y+56	; 0x38
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	98 ab       	std	Y+48, r25	; 0x30
    1aea:	8f a7       	std	Y+47, r24	; 0x2f
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <LCD_displayChar+0x56a>
    1aee:	80 e9       	ldi	r24, 0x90	; 144
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	9e a7       	std	Y+46, r25	; 0x2e
    1af4:	8d a7       	std	Y+45, r24	; 0x2d
    1af6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_displayChar+0x558>
    1afe:	9e a7       	std	Y+46, r25	; 0x2e
    1b00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b04:	98 a9       	ldd	r25, Y+48	; 0x30
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	98 ab       	std	Y+48, r25	; 0x30
    1b0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <LCD_displayChar+0x54c>
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	69 a9       	ldd	r22, Y+49	; 0x31
    1b18:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2e:	9c a7       	std	Y+44, r25	; 0x2c
    1b30:	8b a7       	std	Y+43, r24	; 0x2b
    1b32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_displayChar+0x594>
    1b3a:	9c a7       	std	Y+44, r25	; 0x2c
    1b3c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,HIGH);
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	65 e0       	ldi	r22, 0x05	; 5
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	8f a3       	std	Y+39, r24	; 0x27
    1b52:	98 a7       	std	Y+40, r25	; 0x28
    1b54:	a9 a7       	std	Y+41, r26	; 0x29
    1b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	55 e4       	ldi	r21, 0x45	; 69
    1b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8b a3       	std	Y+35, r24	; 0x23
    1b72:	9c a3       	std	Y+36, r25	; 0x24
    1b74:	ad a3       	std	Y+37, r26	; 0x25
    1b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b78:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_displayChar+0x5f8>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    1b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9a a3       	std	Y+34, r25	; 0x22
    1bd8:	89 a3       	std	Y+33, r24	; 0x21
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_displayChar+0x658>
    1bdc:	80 e9       	ldi	r24, 0x90	; 144
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	98 a3       	std	Y+32, r25	; 0x20
    1be2:	8f 8f       	std	Y+31, r24	; 0x1f
    1be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be6:	98 a1       	ldd	r25, Y+32	; 0x20
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayChar+0x646>
    1bec:	98 a3       	std	Y+32, r25	; 0x20
    1bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9a a3       	std	Y+34, r25	; 0x22
    1bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_displayChar+0x63a>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	6b a1       	ldd	r22, Y+35	; 0x23
    1c06:	7c a1       	ldd	r23, Y+36	; 0x24
    1c08:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_displayChar+0x682>
    1c28:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PORT,LCD_DB4_PIN_ID,GET_BIT(character,0));
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ed 59       	subi	r30, 0x9D	; 157
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	98 2f       	mov	r25, r24
    1c36:	91 70       	andi	r25, 0x01	; 1
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	49 2f       	mov	r20, r25
    1c3e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5_PIN_ID,GET_BIT(character,1));
    1c42:	fe 01       	movw	r30, r28
    1c44:	ed 59       	subi	r30, 0x9D	; 157
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	82 70       	andi	r24, 0x02	; 2
    1c50:	90 70       	andi	r25, 0x00	; 0
    1c52:	95 95       	asr	r25
    1c54:	87 95       	ror	r24
    1c56:	98 2f       	mov	r25, r24
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	64 e0       	ldi	r22, 0x04	; 4
    1c5c:	49 2f       	mov	r20, r25
    1c5e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(character,2));
    1c62:	fe 01       	movw	r30, r28
    1c64:	ed 59       	subi	r30, 0x9D	; 157
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	84 70       	andi	r24, 0x04	; 4
    1c70:	90 70       	andi	r25, 0x00	; 0
    1c72:	95 95       	asr	r25
    1c74:	87 95       	ror	r24
    1c76:	95 95       	asr	r25
    1c78:	87 95       	ror	r24
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	65 e0       	ldi	r22, 0x05	; 5
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 59       	subi	r30, 0x9D	; 157
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	88 70       	andi	r24, 0x08	; 8
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	95 95       	asr	r25
    1c98:	87 95       	ror	r24
    1c9a:	95 95       	asr	r25
    1c9c:	87 95       	ror	r24
    1c9e:	95 95       	asr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	66 e0       	ldi	r22, 0x06	; 6
    1ca8:	49 2f       	mov	r20, r25
    1caa:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e8       	ldi	r26, 0x80	; 128
    1cb4:	bf e3       	ldi	r27, 0x3F	; 63
    1cb6:	89 8f       	std	Y+25, r24	; 0x19
    1cb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cba:	ab 8f       	std	Y+27, r26	; 0x1b
    1cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a e7       	ldi	r20, 0x7A	; 122
    1ccc:	55 e4       	ldi	r21, 0x45	; 69
    1cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8d 8b       	std	Y+21, r24	; 0x15
    1cd8:	9e 8b       	std	Y+22, r25	; 0x16
    1cda:	af 8b       	std	Y+23, r26	; 0x17
    1cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cde:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_displayChar+0x75e>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9c 8b       	std	Y+20, r25	; 0x14
    1cfc:	8b 8b       	std	Y+19, r24	; 0x13
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9c 8b       	std	Y+20, r25	; 0x14
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_displayChar+0x7be>
    1d42:	80 e9       	ldi	r24, 0x90	; 144
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_displayChar+0x7ac>
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
    1d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8b 89       	ldd	r24, Y+19	; 0x13
    1d58:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_displayChar+0x7a0>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9c 8b       	std	Y+20, r25	; 0x14
    1d7c:	8b 8b       	std	Y+19, r24	; 0x13
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	98 89       	ldd	r25, Y+16	; 0x10
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_displayChar+0x7e8>
    1d8e:	98 8b       	std	Y+16, r25	; 0x10
    1d90:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT,character);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOW);
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	65 e0       	ldi	r22, 0x05	; 5
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_writePin>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a0 e8       	ldi	r26, 0x80	; 128
    1da2:	bf e3       	ldi	r27, 0x3F	; 63
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	ad 87       	std	Y+13, r26	; 0x0d
    1daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a e7       	ldi	r20, 0x7A	; 122
    1dba:	55 e4       	ldi	r21, 0x45	; 69
    1dbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8f 83       	std	Y+7, r24	; 0x07
    1dc6:	98 87       	std	Y+8, r25	; 0x08
    1dc8:	a9 87       	std	Y+9, r26	; 0x09
    1dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <LCD_displayChar+0x84c>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <LCD_displayChar+0x8ac>
    1e30:	80 e9       	ldi	r24, 0x90	; 144
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_displayChar+0x89a>
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <LCD_displayChar+0x88e>
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5a:	78 85       	ldd	r23, Y+8	; 0x08
    1e5c:	89 85       	ldd	r24, Y+9	; 0x09
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_displayChar+0x8d6>
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e80:	cd 59       	subi	r28, 0x9D	; 157
    1e82:	df 4f       	sbci	r29, 0xFF	; 255
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <LCD_displayString>:

/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <LCD_displayString+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <LCD_displayString+0x30>
	while( *(str + i) != '\0' ){
		LCD_displayChar( *(str + i) );
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 81       	ld	r24, Z
    1ebe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_displayChar>
		i++;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	89 83       	std	Y+1, r24	; 0x01
/*
 * function purpose is to display strings on LCD
 */
void LCD_displayString(const uint8 *str){
	uint8 i = 0;
	while( *(str + i) != '\0' ){
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e2 0f       	add	r30, r18
    1ed6:	f3 1f       	adc	r31, r19
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 23       	and	r24, r24
    1edc:	39 f7       	brne	.-50     	; 0x1eac <LCD_displayString+0x14>
		LCD_displayChar( *(str + i) );
		i++;
	}
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <LCD_moveCursor>:

/*
 * function purpose is to move cursor to specfic location
 * on screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <LCD_moveCursor+0x6>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <LCD_moveCursor+0x8>
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    1efa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memoryAddress;
	switch(row){
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3d 83       	std	Y+5, r19	; 0x05
    1f04:	2c 83       	std	Y+4, r18	; 0x04
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	c1 f0       	breq	.+48     	; 0x1f40 <LCD_moveCursor+0x56>
    1f10:	2c 81       	ldd	r18, Y+4	; 0x04
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_moveCursor+0x3a>
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <LCD_moveCursor+0x50>
    1f22:	19 c0       	rjmp	.+50     	; 0x1f56 <LCD_moveCursor+0x6c>
    1f24:	2c 81       	ldd	r18, Y+4	; 0x04
    1f26:	3d 81       	ldd	r19, Y+5	; 0x05
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	69 f0       	breq	.+26     	; 0x1f48 <LCD_moveCursor+0x5e>
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	9d 81       	ldd	r25, Y+5	; 0x05
    1f32:	83 30       	cpi	r24, 0x03	; 3
    1f34:	91 05       	cpc	r25, r1
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <LCD_moveCursor+0x66>
    1f38:	0e c0       	rjmp	.+28     	; 0x1f56 <LCD_moveCursor+0x6c>
	case 0:
		LCD_memoryAddress = col ;
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	0b c0       	rjmp	.+22     	; 0x1f56 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memoryAddress = col +0x40 ;
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	80 5c       	subi	r24, 0xC0	; 192
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memoryAddress = col +0x10;
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	80 5f       	subi	r24, 0xF0	; 240
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memoryAddress = col +0x50;
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	80 5b       	subi	r24, 0xB0	; 176
    1f54:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_memoryAddress | LCD_SET_CURSOR_LOCATION);
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	80 68       	ori	r24, 0x80	; 128
    1f5a:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <LCD_displayStringRowColumn>:

/*
 * function purpose is to display strings on LCD specific row/column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *str){
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <LCD_displayStringRowColumn+0x6>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <LCD_displayStringRowColumn+0x8>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	6a 83       	std	Y+2, r22	; 0x02
    1f7e:	5c 83       	std	Y+4, r21	; 0x04
    1f80:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	6a 81       	ldd	r22, Y+2	; 0x02
    1f86:	0e 94 75 0f 	call	0x1eea	; 0x1eea <LCD_moveCursor>
	LCD_displayString(str);
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_displayString>
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <LCD_integerToString>:

/*
 * function purpose is to display integers on screen
 */
void LCD_integerToString(uint8 data){
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	61 97       	sbiw	r28, 0x11	; 17
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	89 8b       	std	Y+17, r24	; 0x11

	uint8 buff[16];
	itoa(data,buff,10);
    1fb6:	89 89       	ldd	r24, Y+17	; 0x11
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc2:	b9 01       	movw	r22, r18
    1fc4:	4a e0       	ldi	r20, 0x0A	; 10
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	0e 94 80 13 	call	0x2700	; 0x2700 <itoa>
	LCD_displayString(buff);
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_displayString>
}
    1fd4:	61 96       	adiw	r28, 0x11	; 17
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <LCD_clearScreen>:

/*
 * function purpose is send command to clear screen
 */
void LCD_clearScreen(void){
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_sendCommand>
}
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <GPIO_setupPinDirection>:
 * setup the direction of the required pin  either input or output
 * check if the input port and pin ID isn't defined
 * if the pin direction is output the  pin will be output
 * if the pin direction is input the  pin will be input
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <GPIO_setupPinDirection+0x6>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <GPIO_setupPinDirection+0x8>
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	6a 83       	std	Y+2, r22	; 0x02
    200c:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	88 30       	cpi	r24, 0x08	; 8
    2012:	08 f0       	brcs	.+2      	; 0x2016 <GPIO_setupPinDirection+0x1c>
    2014:	d5 c0       	rjmp	.+426    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	84 30       	cpi	r24, 0x04	; 4
    201a:	08 f0       	brcs	.+2      	; 0x201e <GPIO_setupPinDirection+0x24>
    201c:	d1 c0       	rjmp	.+418    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
		/*do nothing*/
	} else {
		switch (port_num) {
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3d 83       	std	Y+5, r19	; 0x05
    2026:	2c 83       	std	Y+4, r18	; 0x04
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <GPIO_setupPinDirection+0x3a>
    2032:	43 c0       	rjmp	.+134    	; 0x20ba <GPIO_setupPinDirection+0xc0>
    2034:	2c 81       	ldd	r18, Y+4	; 0x04
    2036:	3d 81       	ldd	r19, Y+5	; 0x05
    2038:	22 30       	cpi	r18, 0x02	; 2
    203a:	31 05       	cpc	r19, r1
    203c:	2c f4       	brge	.+10     	; 0x2048 <GPIO_setupPinDirection+0x4e>
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	9d 81       	ldd	r25, Y+5	; 0x05
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	71 f0       	breq	.+28     	; 0x2062 <GPIO_setupPinDirection+0x68>
    2046:	bc c0       	rjmp	.+376    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
    2048:	2c 81       	ldd	r18, Y+4	; 0x04
    204a:	3d 81       	ldd	r19, Y+5	; 0x05
    204c:	22 30       	cpi	r18, 0x02	; 2
    204e:	31 05       	cpc	r19, r1
    2050:	09 f4       	brne	.+2      	; 0x2054 <GPIO_setupPinDirection+0x5a>
    2052:	5f c0       	rjmp	.+190    	; 0x2112 <GPIO_setupPinDirection+0x118>
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	91 05       	cpc	r25, r1
    205c:	09 f4       	brne	.+2      	; 0x2060 <GPIO_setupPinDirection+0x66>
    205e:	85 c0       	rjmp	.+266    	; 0x216a <GPIO_setupPinDirection+0x170>
    2060:	af c0       	rjmp	.+350    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	a1 f4       	brne	.+40     	; 0x2090 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    2068:	aa e3       	ldi	r26, 0x3A	; 58
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ea e3       	ldi	r30, 0x3A	; 58
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <GPIO_setupPinDirection+0x8c>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <GPIO_setupPinDirection+0x88>
    208a:	84 2b       	or	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	98 c0       	rjmp	.+304    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    2090:	aa e3       	ldi	r26, 0x3A	; 58
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ea e3       	ldi	r30, 0x3A	; 58
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <GPIO_setupPinDirection+0xb4>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <GPIO_setupPinDirection+0xb0>
    20b2:	80 95       	com	r24
    20b4:	84 23       	and	r24, r20
    20b6:	8c 93       	st	X, r24
    20b8:	83 c0       	rjmp	.+262    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	a1 f4       	brne	.+40     	; 0x20e8 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    20c0:	a7 e3       	ldi	r26, 0x37	; 55
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e7 e3       	ldi	r30, 0x37	; 55
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_setupPinDirection+0xe4>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_setupPinDirection+0xe0>
    20e2:	84 2b       	or	r24, r20
    20e4:	8c 93       	st	X, r24
    20e6:	6c c0       	rjmp	.+216    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    20e8:	a7 e3       	ldi	r26, 0x37	; 55
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e7 e3       	ldi	r30, 0x37	; 55
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 2e       	mov	r0, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <GPIO_setupPinDirection+0x10c>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <GPIO_setupPinDirection+0x108>
    210a:	80 95       	com	r24
    210c:	84 23       	and	r24, r20
    210e:	8c 93       	st	X, r24
    2110:	57 c0       	rjmp	.+174    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	a1 f4       	brne	.+40     	; 0x2140 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    2118:	a4 e3       	ldi	r26, 0x34	; 52
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e4 e3       	ldi	r30, 0x34	; 52
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_setupPinDirection+0x13c>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_setupPinDirection+0x138>
    213a:	84 2b       	or	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	40 c0       	rjmp	.+128    	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    2140:	a4 e3       	ldi	r26, 0x34	; 52
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e4 e3       	ldi	r30, 0x34	; 52
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <GPIO_setupPinDirection+0x164>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <GPIO_setupPinDirection+0x160>
    2162:	80 95       	com	r24
    2164:	84 23       	and	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	2b c0       	rjmp	.+86     	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	a1 f4       	brne	.+40     	; 0x2198 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    2170:	a1 e3       	ldi	r26, 0x31	; 49
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e1 e3       	ldi	r30, 0x31	; 49
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <GPIO_setupPinDirection+0x194>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <GPIO_setupPinDirection+0x190>
    2192:	84 2b       	or	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    2198:	a1 e3       	ldi	r26, 0x31	; 49
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e1 e3       	ldi	r30, 0x31	; 49
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <GPIO_setupPinDirection+0x1bc>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <GPIO_setupPinDirection+0x1b8>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <GPIO_writePin>:
 * check if the input port and pin ID isn't defined
 * if the pin is output the value will be written either LOW or HIGH
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <GPIO_writePin+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <GPIO_writePin+0x8>
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	6a 83       	std	Y+2, r22	; 0x02
    21e2:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	88 30       	cpi	r24, 0x08	; 8
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <GPIO_writePin+0x1c>
    21ea:	d5 c0       	rjmp	.+426    	; 0x2396 <GPIO_writePin+0x1c6>
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <GPIO_writePin+0x24>
    21f2:	d1 c0       	rjmp	.+418    	; 0x2396 <GPIO_writePin+0x1c6>
		/* do nothing */
	} else {
		switch (port_num) {
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3d 83       	std	Y+5, r19	; 0x05
    21fc:	2c 83       	std	Y+4, r18	; 0x04
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <GPIO_writePin+0x3a>
    2208:	43 c0       	rjmp	.+134    	; 0x2290 <GPIO_writePin+0xc0>
    220a:	2c 81       	ldd	r18, Y+4	; 0x04
    220c:	3d 81       	ldd	r19, Y+5	; 0x05
    220e:	22 30       	cpi	r18, 0x02	; 2
    2210:	31 05       	cpc	r19, r1
    2212:	2c f4       	brge	.+10     	; 0x221e <GPIO_writePin+0x4e>
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	71 f0       	breq	.+28     	; 0x2238 <GPIO_writePin+0x68>
    221c:	bc c0       	rjmp	.+376    	; 0x2396 <GPIO_writePin+0x1c6>
    221e:	2c 81       	ldd	r18, Y+4	; 0x04
    2220:	3d 81       	ldd	r19, Y+5	; 0x05
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <GPIO_writePin+0x5a>
    2228:	5f c0       	rjmp	.+190    	; 0x22e8 <GPIO_writePin+0x118>
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	9d 81       	ldd	r25, Y+5	; 0x05
    222e:	83 30       	cpi	r24, 0x03	; 3
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <GPIO_writePin+0x66>
    2234:	85 c0       	rjmp	.+266    	; 0x2340 <GPIO_writePin+0x170>
    2236:	af c0       	rjmp	.+350    	; 0x2396 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (HIGH == value) {
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	a1 f4       	brne	.+40     	; 0x2266 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    223e:	ab e3       	ldi	r26, 0x3B	; 59
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	eb e3       	ldi	r30, 0x3B	; 59
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <GPIO_writePin+0x8c>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <GPIO_writePin+0x88>
    2260:	84 2b       	or	r24, r20
    2262:	8c 93       	st	X, r24
    2264:	98 c0       	rjmp	.+304    	; 0x2396 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    2266:	ab e3       	ldi	r26, 0x3B	; 59
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	eb e3       	ldi	r30, 0x3B	; 59
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	48 2f       	mov	r20, r24
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	02 2e       	mov	r0, r18
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <GPIO_writePin+0xb4>
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	0a 94       	dec	r0
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <GPIO_writePin+0xb0>
    2288:	80 95       	com	r24
    228a:	84 23       	and	r24, r20
    228c:	8c 93       	st	X, r24
    228e:	83 c0       	rjmp	.+262    	; 0x2396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (HIGH == value) {
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	a1 f4       	brne	.+40     	; 0x22be <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    2296:	a8 e3       	ldi	r26, 0x38	; 56
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e8 e3       	ldi	r30, 0x38	; 56
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	48 2f       	mov	r20, r24
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 2e       	mov	r0, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <GPIO_writePin+0xe4>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <GPIO_writePin+0xe0>
    22b8:	84 2b       	or	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	6c c0       	rjmp	.+216    	; 0x2396 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    22be:	a8 e3       	ldi	r26, 0x38	; 56
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e8 e3       	ldi	r30, 0x38	; 56
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <GPIO_writePin+0x10c>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <GPIO_writePin+0x108>
    22e0:	80 95       	com	r24
    22e2:	84 23       	and	r24, r20
    22e4:	8c 93       	st	X, r24
    22e6:	57 c0       	rjmp	.+174    	; 0x2396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (HIGH == value) {
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	a1 f4       	brne	.+40     	; 0x2316 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    22ee:	a5 e3       	ldi	r26, 0x35	; 53
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e5 e3       	ldi	r30, 0x35	; 53
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <GPIO_writePin+0x13c>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <GPIO_writePin+0x138>
    2310:	84 2b       	or	r24, r20
    2312:	8c 93       	st	X, r24
    2314:	40 c0       	rjmp	.+128    	; 0x2396 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    2316:	a5 e3       	ldi	r26, 0x35	; 53
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e5 e3       	ldi	r30, 0x35	; 53
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <GPIO_writePin+0x164>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <GPIO_writePin+0x160>
    2338:	80 95       	com	r24
    233a:	84 23       	and	r24, r20
    233c:	8c 93       	st	X, r24
    233e:	2b c0       	rjmp	.+86     	; 0x2396 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (HIGH == value) {
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	a1 f4       	brne	.+40     	; 0x236e <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    2346:	a2 e3       	ldi	r26, 0x32	; 50
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e2 e3       	ldi	r30, 0x32	; 50
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	48 2f       	mov	r20, r24
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 2e       	mov	r0, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <GPIO_writePin+0x194>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	0a 94       	dec	r0
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <GPIO_writePin+0x190>
    2368:	84 2b       	or	r24, r20
    236a:	8c 93       	st	X, r24
    236c:	14 c0       	rjmp	.+40     	; 0x2396 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    236e:	a2 e3       	ldi	r26, 0x32	; 50
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e2 e3       	ldi	r30, 0x32	; 50
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <GPIO_writePin+0x1bc>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <GPIO_writePin+0x1b8>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <GPIO_readPin>:
/*
 * Description:
 * Read the value on required pin and return its value
 * check if the input port and pin ID isn't defined it will return 0
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	29 97       	sbiw	r28, 0x09	; 9
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	6a 83       	std	Y+2, r22	; 0x02

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	88 30       	cpi	r24, 0x08	; 8
    23c2:	08 f0       	brcs	.+2      	; 0x23c6 <GPIO_readPin+0x20>
    23c4:	8d c0       	rjmp	.+282    	; 0x24e0 <GPIO_readPin+0x13a>
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	84 30       	cpi	r24, 0x04	; 4
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <GPIO_readPin+0x28>
    23cc:	89 c0       	rjmp	.+274    	; 0x24e0 <GPIO_readPin+0x13a>
		/* do nothing */
	} else {
		switch (port_num) {
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	39 87       	std	Y+9, r19	; 0x09
    23d6:	28 87       	std	Y+8, r18	; 0x08
    23d8:	48 85       	ldd	r20, Y+8	; 0x08
    23da:	59 85       	ldd	r21, Y+9	; 0x09
    23dc:	41 30       	cpi	r20, 0x01	; 1
    23de:	51 05       	cpc	r21, r1
    23e0:	89 f1       	breq	.+98     	; 0x2444 <GPIO_readPin+0x9e>
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	99 85       	ldd	r25, Y+9	; 0x09
    23e6:	82 30       	cpi	r24, 0x02	; 2
    23e8:	91 05       	cpc	r25, r1
    23ea:	34 f4       	brge	.+12     	; 0x23f8 <GPIO_readPin+0x52>
    23ec:	28 85       	ldd	r18, Y+8	; 0x08
    23ee:	39 85       	ldd	r19, Y+9	; 0x09
    23f0:	21 15       	cp	r18, r1
    23f2:	31 05       	cpc	r19, r1
    23f4:	69 f0       	breq	.+26     	; 0x2410 <GPIO_readPin+0x6a>
    23f6:	74 c0       	rjmp	.+232    	; 0x24e0 <GPIO_readPin+0x13a>
    23f8:	48 85       	ldd	r20, Y+8	; 0x08
    23fa:	59 85       	ldd	r21, Y+9	; 0x09
    23fc:	42 30       	cpi	r20, 0x02	; 2
    23fe:	51 05       	cpc	r21, r1
    2400:	d9 f1       	breq	.+118    	; 0x2478 <GPIO_readPin+0xd2>
    2402:	88 85       	ldd	r24, Y+8	; 0x08
    2404:	99 85       	ldd	r25, Y+9	; 0x09
    2406:	83 30       	cpi	r24, 0x03	; 3
    2408:	91 05       	cpc	r25, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <GPIO_readPin+0x68>
    240c:	4f c0       	rjmp	.+158    	; 0x24ac <GPIO_readPin+0x106>
    240e:	68 c0       	rjmp	.+208    	; 0x24e0 <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? HIGH : LOW;
    2410:	e9 e3       	ldi	r30, 0x39	; 57
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a9 01       	movw	r20, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <GPIO_readPin+0x82>
    2424:	55 95       	asr	r21
    2426:	47 95       	ror	r20
    2428:	8a 95       	dec	r24
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <GPIO_readPin+0x7e>
    242c:	ca 01       	movw	r24, r20
    242e:	81 70       	andi	r24, 0x01	; 1
    2430:	90 70       	andi	r25, 0x00	; 0
    2432:	88 23       	and	r24, r24
    2434:	19 f0       	breq	.+6      	; 0x243c <GPIO_readPin+0x96>
    2436:	51 e0       	ldi	r21, 0x01	; 1
    2438:	5e 83       	std	Y+6, r21	; 0x06
    243a:	01 c0       	rjmp	.+2      	; 0x243e <GPIO_readPin+0x98>
    243c:	1e 82       	std	Y+6, r1	; 0x06
    243e:	8e 81       	ldd	r24, Y+6	; 0x06
    2440:	8f 83       	std	Y+7, r24	; 0x07
    2442:	4f c0       	rjmp	.+158    	; 0x24e2 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? HIGH : LOW;
    2444:	e6 e3       	ldi	r30, 0x36	; 54
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a9 01       	movw	r20, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <GPIO_readPin+0xb6>
    2458:	55 95       	asr	r21
    245a:	47 95       	ror	r20
    245c:	8a 95       	dec	r24
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <GPIO_readPin+0xb2>
    2460:	ca 01       	movw	r24, r20
    2462:	81 70       	andi	r24, 0x01	; 1
    2464:	90 70       	andi	r25, 0x00	; 0
    2466:	88 23       	and	r24, r24
    2468:	19 f0       	breq	.+6      	; 0x2470 <GPIO_readPin+0xca>
    246a:	51 e0       	ldi	r21, 0x01	; 1
    246c:	5d 83       	std	Y+5, r21	; 0x05
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <GPIO_readPin+0xcc>
    2470:	1d 82       	std	Y+5, r1	; 0x05
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	35 c0       	rjmp	.+106    	; 0x24e2 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? HIGH : LOW;
    2478:	e3 e3       	ldi	r30, 0x33	; 51
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <GPIO_readPin+0xea>
    248c:	55 95       	asr	r21
    248e:	47 95       	ror	r20
    2490:	8a 95       	dec	r24
    2492:	e2 f7       	brpl	.-8      	; 0x248c <GPIO_readPin+0xe6>
    2494:	ca 01       	movw	r24, r20
    2496:	81 70       	andi	r24, 0x01	; 1
    2498:	90 70       	andi	r25, 0x00	; 0
    249a:	88 23       	and	r24, r24
    249c:	19 f0       	breq	.+6      	; 0x24a4 <GPIO_readPin+0xfe>
    249e:	51 e0       	ldi	r21, 0x01	; 1
    24a0:	5c 83       	std	Y+4, r21	; 0x04
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <GPIO_readPin+0x100>
    24a4:	1c 82       	std	Y+4, r1	; 0x04
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	1b c0       	rjmp	.+54     	; 0x24e2 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? HIGH : LOW;
    24ac:	e0 e3       	ldi	r30, 0x30	; 48
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a9 01       	movw	r20, r18
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <GPIO_readPin+0x11e>
    24c0:	55 95       	asr	r21
    24c2:	47 95       	ror	r20
    24c4:	8a 95       	dec	r24
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <GPIO_readPin+0x11a>
    24c8:	ca 01       	movw	r24, r20
    24ca:	81 70       	andi	r24, 0x01	; 1
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	88 23       	and	r24, r24
    24d0:	19 f0       	breq	.+6      	; 0x24d8 <GPIO_readPin+0x132>
    24d2:	51 e0       	ldi	r21, 0x01	; 1
    24d4:	5b 83       	std	Y+3, r21	; 0x03
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <GPIO_readPin+0x134>
    24d8:	1b 82       	std	Y+3, r1	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	8f 83       	std	Y+7, r24	; 0x07
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <GPIO_readPin+0x13c>
					break;
				}*/

	}

	return 0;
    24e0:	1f 82       	std	Y+7, r1	; 0x07
    24e2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    24e4:	29 96       	adiw	r28, 0x09	; 9
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <GPIO_setupPortDirection>:
 * setup the direction of the required port  either input or output
 * check if the input port ID isn't defined
 * if the port direction is output the entire pins will be output
 * if the port direction is input the entire pins will be input
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <GPIO_setupPortDirection+0x6>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <GPIO_setupPortDirection+0x8>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	84 30       	cpi	r24, 0x04	; 4
    250a:	90 f5       	brcc	.+100    	; 0x2570 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	3c 83       	std	Y+4, r19	; 0x04
    2514:	2b 83       	std	Y+3, r18	; 0x03
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	91 05       	cpc	r25, r1
    251e:	d1 f0       	breq	.+52     	; 0x2554 <GPIO_setupPortDirection+0x5e>
    2520:	2b 81       	ldd	r18, Y+3	; 0x03
    2522:	3c 81       	ldd	r19, Y+4	; 0x04
    2524:	22 30       	cpi	r18, 0x02	; 2
    2526:	31 05       	cpc	r19, r1
    2528:	2c f4       	brge	.+10     	; 0x2534 <GPIO_setupPortDirection+0x3e>
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	61 f0       	breq	.+24     	; 0x254a <GPIO_setupPortDirection+0x54>
    2532:	1e c0       	rjmp	.+60     	; 0x2570 <GPIO_setupPortDirection+0x7a>
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	3c 81       	ldd	r19, Y+4	; 0x04
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	81 f0       	breq	.+32     	; 0x255e <GPIO_setupPortDirection+0x68>
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	91 05       	cpc	r25, r1
    2546:	81 f0       	breq	.+32     	; 0x2568 <GPIO_setupPortDirection+0x72>
    2548:	13 c0       	rjmp	.+38     	; 0x2570 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    254a:	ea e3       	ldi	r30, 0x3A	; 58
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	80 83       	st	Z, r24
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2554:	e7 e3       	ldi	r30, 0x37	; 55
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	80 83       	st	Z, r24
    255c:	09 c0       	rjmp	.+18     	; 0x2570 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    255e:	e4 e3       	ldi	r30, 0x34	; 52
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	80 83       	st	Z, r24
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2568:	e1 e3       	ldi	r30, 0x31	; 49
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <GPIO_writePort>:
 * check if the input port ID isn't defined
 * if the pin is output the value will be written
 * if the pin is input it will either activate/deactivate internal
 *  pull-up register
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <GPIO_writePort+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <GPIO_writePort+0x8>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	84 30       	cpi	r24, 0x04	; 4
    2592:	90 f5       	brcc	.+100    	; 0x25f8 <GPIO_writePort+0x7a>
		/* DO NOTHING */
	} else {
		switch (port_num) {
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3c 83       	std	Y+4, r19	; 0x04
    259c:	2b 83       	std	Y+3, r18	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	91 05       	cpc	r25, r1
    25a6:	d1 f0       	breq	.+52     	; 0x25dc <GPIO_writePort+0x5e>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	2c f4       	brge	.+10     	; 0x25bc <GPIO_writePort+0x3e>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	61 f0       	breq	.+24     	; 0x25d2 <GPIO_writePort+0x54>
    25ba:	1e c0       	rjmp	.+60     	; 0x25f8 <GPIO_writePort+0x7a>
    25bc:	2b 81       	ldd	r18, Y+3	; 0x03
    25be:	3c 81       	ldd	r19, Y+4	; 0x04
    25c0:	22 30       	cpi	r18, 0x02	; 2
    25c2:	31 05       	cpc	r19, r1
    25c4:	81 f0       	breq	.+32     	; 0x25e6 <GPIO_writePort+0x68>
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	83 30       	cpi	r24, 0x03	; 3
    25cc:	91 05       	cpc	r25, r1
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <GPIO_writePort+0x72>
    25d0:	13 c0       	rjmp	.+38     	; 0x25f8 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    25d2:	eb e3       	ldi	r30, 0x3B	; 59
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	80 83       	st	Z, r24
    25da:	0e c0       	rjmp	.+28     	; 0x25f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    25dc:	e8 e3       	ldi	r30, 0x38	; 56
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	80 83       	st	Z, r24
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	80 83       	st	Z, r24
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    25f0:	e2 e3       	ldi	r30, 0x32	; 50
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <GPIO_readPort>:
/*
 * Description:
 * Read the value in required port and return its value
 * check if the input port ID isn't defined, it will return 0
 */
uint8 GPIO_readPort(uint8 port_num) {
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <GPIO_readPort+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <GPIO_readPort+0x8>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	89 83       	std	Y+1, r24	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	84 30       	cpi	r24, 0x04	; 4
    2618:	98 f5       	brcc	.+102    	; 0x2680 <GPIO_readPort+0x7a>
		/* do nothing */
	} else {
		switch (port_num) {
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	3c 83       	std	Y+4, r19	; 0x04
    2622:	2b 83       	std	Y+3, r18	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	91 05       	cpc	r25, r1
    262c:	d1 f0       	breq	.+52     	; 0x2662 <GPIO_readPort+0x5c>
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	3c 81       	ldd	r19, Y+4	; 0x04
    2632:	22 30       	cpi	r18, 0x02	; 2
    2634:	31 05       	cpc	r19, r1
    2636:	2c f4       	brge	.+10     	; 0x2642 <GPIO_readPort+0x3c>
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	61 f0       	breq	.+24     	; 0x2658 <GPIO_readPort+0x52>
    2640:	1f c0       	rjmp	.+62     	; 0x2680 <GPIO_readPort+0x7a>
    2642:	2b 81       	ldd	r18, Y+3	; 0x03
    2644:	3c 81       	ldd	r19, Y+4	; 0x04
    2646:	22 30       	cpi	r18, 0x02	; 2
    2648:	31 05       	cpc	r19, r1
    264a:	81 f0       	breq	.+32     	; 0x266c <GPIO_readPort+0x66>
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	83 30       	cpi	r24, 0x03	; 3
    2652:	91 05       	cpc	r25, r1
    2654:	81 f0       	breq	.+32     	; 0x2676 <GPIO_readPort+0x70>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    2658:	e9 e3       	ldi	r30, 0x39	; 57
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	90 81       	ld	r25, Z
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	10 c0       	rjmp	.+32     	; 0x2682 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    2662:	e6 e3       	ldi	r30, 0x36	; 54
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	20 81       	ld	r18, Z
    2668:	2a 83       	std	Y+2, r18	; 0x02
    266a:	0b c0       	rjmp	.+22     	; 0x2682 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    266c:	e3 e3       	ldi	r30, 0x33	; 51
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	30 81       	ld	r19, Z
    2672:	3a 83       	std	Y+2, r19	; 0x02
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    2676:	e0 e3       	ldi	r30, 0x30	; 48
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <GPIO_readPort+0x7c>
			break;
		}
	}
	return 0;
    2680:	1a 82       	std	Y+2, r1	; 0x02
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <__prologue_saves__>:
    2692:	2f 92       	push	r2
    2694:	3f 92       	push	r3
    2696:	4f 92       	push	r4
    2698:	5f 92       	push	r5
    269a:	6f 92       	push	r6
    269c:	7f 92       	push	r7
    269e:	8f 92       	push	r8
    26a0:	9f 92       	push	r9
    26a2:	af 92       	push	r10
    26a4:	bf 92       	push	r11
    26a6:	cf 92       	push	r12
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	ca 1b       	sub	r28, r26
    26bc:	db 0b       	sbc	r29, r27
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	09 94       	ijmp

000026ca <__epilogue_restores__>:
    26ca:	2a 88       	ldd	r2, Y+18	; 0x12
    26cc:	39 88       	ldd	r3, Y+17	; 0x11
    26ce:	48 88       	ldd	r4, Y+16	; 0x10
    26d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26da:	aa 84       	ldd	r10, Y+10	; 0x0a
    26dc:	b9 84       	ldd	r11, Y+9	; 0x09
    26de:	c8 84       	ldd	r12, Y+8	; 0x08
    26e0:	df 80       	ldd	r13, Y+7	; 0x07
    26e2:	ee 80       	ldd	r14, Y+6	; 0x06
    26e4:	fd 80       	ldd	r15, Y+5	; 0x05
    26e6:	0c 81       	ldd	r16, Y+4	; 0x04
    26e8:	1b 81       	ldd	r17, Y+3	; 0x03
    26ea:	aa 81       	ldd	r26, Y+2	; 0x02
    26ec:	b9 81       	ldd	r27, Y+1	; 0x01
    26ee:	ce 0f       	add	r28, r30
    26f0:	d1 1d       	adc	r29, r1
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	ed 01       	movw	r28, r26
    26fe:	08 95       	ret

00002700 <itoa>:
    2700:	fb 01       	movw	r30, r22
    2702:	9f 01       	movw	r18, r30
    2704:	e8 94       	clt
    2706:	42 30       	cpi	r20, 0x02	; 2
    2708:	c4 f0       	brlt	.+48     	; 0x273a <itoa+0x3a>
    270a:	45 32       	cpi	r20, 0x25	; 37
    270c:	b4 f4       	brge	.+44     	; 0x273a <itoa+0x3a>
    270e:	4a 30       	cpi	r20, 0x0A	; 10
    2710:	29 f4       	brne	.+10     	; 0x271c <itoa+0x1c>
    2712:	97 fb       	bst	r25, 7
    2714:	1e f4       	brtc	.+6      	; 0x271c <itoa+0x1c>
    2716:	90 95       	com	r25
    2718:	81 95       	neg	r24
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	64 2f       	mov	r22, r20
    271e:	77 27       	eor	r23, r23
    2720:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodhi4>
    2724:	80 5d       	subi	r24, 0xD0	; 208
    2726:	8a 33       	cpi	r24, 0x3A	; 58
    2728:	0c f0       	brlt	.+2      	; 0x272c <itoa+0x2c>
    272a:	89 5d       	subi	r24, 0xD9	; 217
    272c:	81 93       	st	Z+, r24
    272e:	cb 01       	movw	r24, r22
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	a1 f7       	brne	.-24     	; 0x271c <itoa+0x1c>
    2734:	16 f4       	brtc	.+4      	; 0x273a <itoa+0x3a>
    2736:	5d e2       	ldi	r21, 0x2D	; 45
    2738:	51 93       	st	Z+, r21
    273a:	10 82       	st	Z, r1
    273c:	c9 01       	movw	r24, r18
    273e:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <strrev>

00002742 <strrev>:
    2742:	dc 01       	movw	r26, r24
    2744:	fc 01       	movw	r30, r24
    2746:	67 2f       	mov	r22, r23
    2748:	71 91       	ld	r23, Z+
    274a:	77 23       	and	r23, r23
    274c:	e1 f7       	brne	.-8      	; 0x2746 <strrev+0x4>
    274e:	32 97       	sbiw	r30, 0x02	; 2
    2750:	04 c0       	rjmp	.+8      	; 0x275a <strrev+0x18>
    2752:	7c 91       	ld	r23, X
    2754:	6d 93       	st	X+, r22
    2756:	70 83       	st	Z, r23
    2758:	62 91       	ld	r22, -Z
    275a:	ae 17       	cp	r26, r30
    275c:	bf 07       	cpc	r27, r31
    275e:	c8 f3       	brcs	.-14     	; 0x2752 <strrev+0x10>
    2760:	08 95       	ret

00002762 <__udivmodhi4>:
    2762:	aa 1b       	sub	r26, r26
    2764:	bb 1b       	sub	r27, r27
    2766:	51 e1       	ldi	r21, 0x11	; 17
    2768:	07 c0       	rjmp	.+14     	; 0x2778 <__udivmodhi4_ep>

0000276a <__udivmodhi4_loop>:
    276a:	aa 1f       	adc	r26, r26
    276c:	bb 1f       	adc	r27, r27
    276e:	a6 17       	cp	r26, r22
    2770:	b7 07       	cpc	r27, r23
    2772:	10 f0       	brcs	.+4      	; 0x2778 <__udivmodhi4_ep>
    2774:	a6 1b       	sub	r26, r22
    2776:	b7 0b       	sbc	r27, r23

00002778 <__udivmodhi4_ep>:
    2778:	88 1f       	adc	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	5a 95       	dec	r21
    277e:	a9 f7       	brne	.-22     	; 0x276a <__udivmodhi4_loop>
    2780:	80 95       	com	r24
    2782:	90 95       	com	r25
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	08 95       	ret

0000278a <_exit>:
    278a:	f8 94       	cli

0000278c <__stop_program>:
    278c:	ff cf       	rjmp	.-2      	; 0x278c <__stop_program>
